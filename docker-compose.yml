version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  api-gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    ports:
      - '3001:3001'
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - keycloak
    networks:
      - app-network

  microservice-1:
    build:
      context: .
      dockerfile: ./apps/microservice-1/Dockerfile
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - keycloak
    networks:
      - app-network

  microservice-2:
    build:
      context: .
      dockerfile: ./apps/microservice-2/Dockerfile
    env_file:
      - .env
    depends_on:
      - redis
      - keycloak
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    ports:
      - '8081:8080'  # Expose Keycloak on port 8080 internally
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - 'start-dev'
      - '--db=postgres'
      - '--db-url=jdbc:postgresql://postgres:5432/keycloak'
      - '--db-username=${POSTGRES_USER}'
      - '--db-password=${POSTGRES_PASSWORD}'
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./keycloak-themes:/opt/keycloak/themes
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health/ready']
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  postgres:
    image: postgres:13
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    ports:
      - '5432:5432'
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:alpine
    env_file:
      - .env
    ports:
      - '6379:6379'
    command: ['redis-server', '--loglevel', 'verbose']
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - app-network

  adminer:
    image: adminer
    container_name: adminer
    env_file:
      - .env
    ports:
      - '8089:8080'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    env_file:
      - .env
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/config.ini:/etc/grafana/config.ini
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    ports:
      - '3010:3000'
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    env_file:
      - .env
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - app-network

  loki:
    image: grafana/loki:latest
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  keycloak_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
