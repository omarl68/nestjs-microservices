{"version":3,"file":"AuthenticationSection-Cd6r8c1Z.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStatePrimary.js","../../src/authentication/BindFlowDialog.tsx","../../src/authentication/DuplicateFlowModal.tsx","../../src/authentication/RequiredActions.tsx","../../src/authentication/components/UsedBy.tsx","../../src/authentication/policies/CibaPolicy.tsx","../../src/components/time-selector/TimeSelectorControl.tsx","../../src/authentication/policies/OtpPolicy.tsx","../../src/authentication/policies/PolicyRow.tsx","../../src/authentication/policies/util.ts","../../src/authentication/policies/PasswordPolicy.tsx","../../src/authentication/policies/WebauthnPolicy.tsx","../../src/authentication/policies/Policies.tsx","../../src/authentication/AuthenticationSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStatePrimary = (_a) => {\n    var { children, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStatePrimary, className) }, props), children));\n};\nEmptyStatePrimary.displayName = 'EmptyStatePrimary';\n//# sourceMappingURL=EmptyStatePrimary.js.map","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { REALM_FLOWS } from \"./AuthenticationSection\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: (used?: boolean) => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<BindingForm>();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    const realmRep = await adminClient.realms.findOne({ realm });\n\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias },\n      );\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateFlowError\", error);\n    }\n\n    onClose(true);\n  };\n\n  const flowKeys = Array.from(REALM_FLOWS.keys());\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => onClose()}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={form.handleSubmit(onSubmit)}>\n        <FormProvider {...form}>\n          <SelectControl\n            id=\"chooseBindingType\"\n            name=\"bindingType\"\n            label={t(\"chooseBindingType\")}\n            options={flowKeys\n              .filter((f) => f !== \"dockerAuthenticationFlow\")\n              .map((key) => ({\n                key,\n                value: t(`flow.${REALM_FLOWS.get(key)}`),\n              }))}\n            controller={{ defaultValue: flowKeys[0] }}\n            variant={SelectVariant.single}\n            menuAppendTo=\"parent\"\n            aria-label={t(\"chooseBindingType\")}\n          />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { t } = useTranslation();\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow,\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        }),\n      );\n    } catch (error) {\n      addError(\"copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type RequiredActionProviderSimpleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderSimpleRepresentation\";\nimport { AlertVariant, Switch } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { toKey } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { DraggableTable } from \"./components/DraggableTable\";\n\ntype DataType = RequiredActionProviderRepresentation &\n  RequiredActionProviderSimpleRepresentation;\n\ntype Row = {\n  name: string;\n  enabled: boolean;\n  defaultAction: boolean;\n  data: DataType;\n};\n\nexport const RequiredActions = () => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [actions, setActions] = useState<Row[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const [requiredActions, unregisteredRequiredActions] = await Promise.all([\n        adminClient.authenticationManagement.getRequiredActions(),\n        adminClient.authenticationManagement.getUnregisteredRequiredActions(),\n      ]);\n      return [\n        ...requiredActions.map((a) => ({\n          name: a.name!,\n          enabled: a.enabled!,\n          defaultAction: a.defaultAction!,\n          data: a,\n        })),\n        ...unregisteredRequiredActions.map((a) => ({\n          name: a.name!,\n          enabled: false,\n          defaultAction: false,\n          data: a,\n        })),\n      ];\n    },\n    (actions) => setActions(actions),\n    [key],\n  );\n\n  const isUnregisteredAction = (data: DataType): boolean => {\n    return !(\"alias\" in data);\n  };\n\n  const updateAction = async (\n    action: DataType,\n    field: \"enabled\" | \"defaultAction\",\n  ) => {\n    try {\n      if (field in action) {\n        action[field] = !action[field];\n        await adminClient.authenticationManagement.updateRequiredAction(\n          { alias: action.alias! },\n          action,\n        );\n      } else if (isUnregisteredAction(action)) {\n        await adminClient.authenticationManagement.registerRequiredAction({\n          name: action.name,\n          providerId: action.providerId,\n        });\n      }\n      refresh();\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  const executeMove = async (\n    action: RequiredActionProviderRepresentation,\n    times: number,\n  ) => {\n    try {\n      const alias = action.alias!;\n      for (let index = 0; index < Math.abs(times); index++) {\n        if (times > 0) {\n          await adminClient.authenticationManagement.lowerRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        } else {\n          await adminClient.authenticationManagement.raiseRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        }\n      }\n      refresh();\n\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  if (!actions) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DraggableTable\n      keyField=\"name\"\n      onDragFinish={async (nameDragged, items) => {\n        const keys = actions.map((e) => e.name);\n        const newIndex = items.indexOf(nameDragged);\n        const oldIndex = keys.indexOf(nameDragged);\n        const dragged = actions[oldIndex].data;\n        if (!dragged.alias) return;\n\n        const times = newIndex - oldIndex;\n        executeMove(dragged, times);\n      }}\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"requiredActions\",\n        },\n        {\n          name: \"enabled\",\n          displayKey: \"enabled\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`enable-${toKey(row.name)}`}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={row.enabled}\n              onChange={() => {\n                updateAction(row.data, \"enabled\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n        {\n          name: \"default\",\n          displayKey: \"setAsDefaultAction\",\n          thTooltipText: \"authDefaultActionTooltip\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`default-${toKey(row.name)}`}\n              label={t(\"on\")}\n              isDisabled={!row.enabled}\n              labelOff={!row.enabled ? t(\"disabledOff\") : t(\"off\")}\n              isChecked={row.defaultAction}\n              onChange={() => {\n                updateAction(row.data, \"defaultAction\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n      ]}\n      data={actions}\n    />\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { fetchUsedBy } from \"../../components/role-mapping/resource\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useToggle from \"../../utils/useToggle\";\nimport { AuthenticationType, REALM_FLOWS } from \"../AuthenticationSection\";\n\nimport style from \"./used-by.module.css\";\n\ntype UsedByProps = {\n  authType: AuthenticationType;\n  realm: RealmRepresentation;\n};\n\nconst Label = ({ label }: { label: string }) => (\n  <>\n    <CheckCircleIcon className={style.label} /> {label}\n  </>\n);\n\ntype UsedByModalProps = {\n  id: string;\n  onClose: () => void;\n  isSpecificClient: boolean;\n};\n\nconst UsedByModal = ({ id, isSpecificClient, onClose }: UsedByModalProps) => {\n  const { t } = useTranslation();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<{ name: string }[]> => {\n    const result = await fetchUsedBy({\n      id,\n      type: isSpecificClient ? \"clients\" : \"idp\",\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n    return result.map((p) => ({ name: p }));\n  };\n\n  return (\n    <Modal\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"flowUsedBy\")}</Text>\n          <Text>\n            {t(\"flowUsedByDescription\", {\n              value: isSpecificClient ? t(\"clients\") : t(\"identiyProviders\"),\n            })}\n          </Text>\n        </TextContent>\n      }\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          onClick={onClose}\n        >\n          {t(\"close\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"usedBy\"\n        searchPlaceholderKey=\"search\"\n        columns={[\n          {\n            name: \"name\",\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nexport const UsedBy = ({ authType: { id, usedBy }, realm }: UsedByProps) => {\n  const { t } = useTranslation();\n  const [open, toggle] = useToggle();\n\n  const key = Object.entries(realm).find(\n    (e) => e[1] === usedBy?.values[0],\n  )?.[0];\n\n  return (\n    <>\n      {open && (\n        <UsedByModal\n          id={id!}\n          onClose={toggle}\n          isSpecificClient={usedBy?.type === \"SPECIFIC_CLIENTS\"}\n        />\n      )}\n      {(usedBy?.type === \"SPECIFIC_PROVIDERS\" ||\n        usedBy?.type === \"SPECIFIC_CLIENTS\") &&\n        (usedBy.values.length <= 8 ? (\n          <Popover\n            key={id}\n            aria-label={t(\"usedBy\")}\n            bodyContent={\n              <div key={`usedBy-${id}-${usedBy.values}`}>\n                {t(\n                  \"appliedBy\" +\n                    (usedBy.type === \"SPECIFIC_CLIENTS\"\n                      ? \"Clients\"\n                      : \"Providers\"),\n                )}{\" \"}\n                {usedBy.values.map((used, index) => (\n                  <>\n                    <strong>{used}</strong>\n                    {index < usedBy.values.length - 1 ? \", \" : \"\"}\n                  </>\n                ))}\n              </div>\n            }\n          >\n            <Button variant=\"link\" className={style.label}>\n              <Label label={t(`used.${usedBy.type}`)} />\n            </Button>\n          </Popover>\n        ) : (\n          <Button variant=\"link\" className={style.label} onClick={toggle}>\n            <Label label={t(`used.${usedBy.type}`)} />\n          </Button>\n        ))}\n      {usedBy?.type === \"DEFAULT\" && (\n        <Label label={t(`flow.${REALM_FLOWS.get(key!)}`)} />\n      )}\n      {!usedBy?.type && t(\"used.notInUse\")}\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { SelectControl, TextControl } from \"ui-shared\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nconst CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES = [\"poll\", \"ping\"] as const;\nconst CIBA_EXPIRES_IN_MIN = 10;\nconst CIBA_EXPIRES_IN_MAX = 600;\nconst CIBA_INTERVAL_MIN = 0;\nconst CIBA_INTERVAL_MAX = 600;\n\ntype CibaPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const CibaPolicy = ({ realm, realmUpdated }: CibaPolicyProps) => {\n  const { t } = useTranslation();\n  const form = useForm<FormFields>({ mode: \"onChange\" });\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, form.setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        convertFormValuesToObject(formValues),\n      );\n\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateCibaSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateCibaError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={form.handleSubmit(onSubmit)}\n      >\n        <FormProvider {...form}>\n          <SelectControl\n            name=\"attributes.cibaBackchannelTokenDeliveryMode\"\n            label={t(\"cibaBackchannelTokenDeliveryMode\")}\n            labelIcon={t(\"cibaBackchannelTokenDeliveryModeHelp\")}\n            options={CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES.map((mode) => ({\n              key: mode,\n              value: t(`cibaBackhannelTokenDeliveryModes.${mode}`),\n            }))}\n            controller={{ defaultValue: \"\" }}\n          />\n          <TextControl\n            name=\"attributes.cibaExpiresIn\"\n            type=\"number\"\n            min={CIBA_EXPIRES_IN_MIN}\n            max={CIBA_EXPIRES_IN_MAX}\n            label={t(\"cibaExpiresIn\")}\n            labelIcon={t(\"cibaExpiresInHelp\")}\n            rules={{\n              min: {\n                value: CIBA_EXPIRES_IN_MIN,\n                message: t(\"greaterThan\", {\n                  value: CIBA_EXPIRES_IN_MIN,\n                }),\n              },\n              max: {\n                value: CIBA_EXPIRES_IN_MAX,\n                message: t(\"lessThan\", { value: CIBA_EXPIRES_IN_MAX }),\n              },\n              required: {\n                value: true,\n                message: t(\"required\"),\n              },\n            }}\n          />\n          <TextControl\n            name=\"attributes.cibaInterval\"\n            type=\"number\"\n            min={CIBA_EXPIRES_IN_MIN}\n            max={CIBA_EXPIRES_IN_MAX}\n            label={t(\"cibaInterval\")}\n            labelIcon={t(\"cibaIntervalHelp\")}\n            rules={{\n              min: {\n                value: CIBA_INTERVAL_MIN,\n                message: t(\"greaterThan\", {\n                  value: CIBA_INTERVAL_MIN,\n                }),\n              },\n              max: {\n                value: CIBA_INTERVAL_MAX,\n                message: t(\"lessThan\", { value: CIBA_INTERVAL_MAX }),\n              },\n              required: {\n                value: true,\n                message: t(\"required\"),\n              },\n            }}\n          />\n          <SelectControl\n            name=\"attributes.cibaAuthRequestedUserHint\"\n            label={t(\"cibaAuthRequestedUserHint\")}\n            labelIcon={t(\"cibaAuthRequestedUserHintHelp\")}\n            options={[\"login_hint\", \"id_token_hint\", \"login_hint_token\"]}\n            controller={{ defaultValue: \"\" }}\n            isDisabled\n          />\n        </FormProvider>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!form.formState.isValid || !form.formState.isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm({ ...realm })}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  UseControllerProps,\n  useFormContext,\n} from \"react-hook-form\";\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector, TimeSelectorProps } from \"./TimeSelector\";\n\nexport type NumberControlOption = {\n  key: string;\n  value: string;\n};\n\nexport type TimeSelectorControlProps<\n  T extends FieldValues,\n  P extends FieldPath<T> = FieldPath<T>,\n> = Omit<TimeSelectorProps, \"name\"> &\n  UseControllerProps<T, P> & {\n    name: string;\n    label?: string;\n    labelIcon?: string;\n    controller: Omit<ControllerProps, \"name\" | \"render\">;\n  };\n\nexport const TimeSelectorControl = <\n  T extends FieldValues,\n  P extends FieldPath<T> = FieldPath<T>,\n>({\n  name,\n  label,\n  controller,\n  labelIcon,\n  ...rest\n}: TimeSelectorControlProps<T, P>) => {\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n  return (\n    <FormGroup\n      isRequired={controller.rules?.required === true}\n      label={label || name}\n      fieldId={name}\n      labelIcon={\n        labelIcon ? (\n          <HelpItem helpText={labelIcon} fieldLabelId={name} />\n        ) : undefined\n      }\n      helperTextInvalid={errors[name]?.message as string}\n      validated={\n        errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n    >\n      <Controller\n        {...controller}\n        name={name}\n        control={control}\n        render={({ field }) => (\n          <TimeSelector\n            {...rest}\n            id={name}\n            data-testid={name}\n            value={field.value}\n            onChange={field.onChange}\n            validated={\n              errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  PageSection,\n  Radio,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  HelpItem,\n  NumberControl,\n  SelectControl,\n  SwitchControl,\n} from \"ui-shared\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\n\nimport \"./otp-policy.css\";\n\nconst POLICY_TYPES = [\"totp\", \"hotp\"] as const;\nconst OTP_HASH_ALGORITHMS = [\"SHA1\", \"SHA256\", \"SHA512\"] as const;\nconst NUMBER_OF_DIGITS = [6, 8] as const;\n\ntype OtpPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\" | \"users\" | \"federatedUsers\"\n>;\n\nexport const OtpPolicy = ({ realm, realmUpdated }: OtpPolicyProps) => {\n  const { t } = useTranslation();\n  const form = useForm<FormFields>({ mode: \"onChange\", defaultValues: realm });\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { isValid, isDirty },\n  } = form;\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n\n  const otpType = useWatch({\n    name: \"otpPolicyType\",\n    control,\n    defaultValue: POLICY_TYPES[0],\n  });\n\n  const setupForm = (formValues: FormFields) => reset(formValues);\n\n  useEffect(() => setupForm(realm), []);\n\n  const supportedApplications = useMemo(() => {\n    const labels = (realm.otpSupportedApplications ?? []).map((key) =>\n      t(`otpSupportedApplications.${key}`),\n    );\n\n    return localeSort(labels, (label) => label);\n  }, [realm.otpSupportedApplications]);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update({ realm: realmName }, formValues);\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateOtpSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateOtpError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__otp_policies_authentication__form\"\n      >\n        <FormProvider {...form}>\n          <FormGroup\n            label={t(\"otpType\")}\n            labelIcon={\n              <HelpItem helpText={t(\"otpTypeHelp\")} fieldLabelId=\"otpType\" />\n            }\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"otpPolicyType\"\n              data-testid=\"otpPolicyType\"\n              defaultValue={POLICY_TYPES[0]}\n              control={control}\n              render={({ field }) => (\n                <>\n                  {POLICY_TYPES.map((type) => (\n                    <Radio\n                      key={type}\n                      id={type}\n                      data-testid={type}\n                      isChecked={field.value === type}\n                      name=\"otpPolicyType\"\n                      onChange={() => field.onChange(type)}\n                      label={t(`policyType.${type}`)}\n                      className=\"keycloak__otp_policies_authentication__policy-type\"\n                    />\n                  ))}\n                </>\n              )}\n            />\n          </FormGroup>\n          <SelectControl\n            name=\"otpPolicyAlgorithm\"\n            label={t(\"otpHashAlgorithm\")}\n            labelIcon={t(\"otpHashAlgorithmHelp\")}\n            options={OTP_HASH_ALGORITHMS.map((type) => ({\n              key: `Hmac${type}`,\n              value: type,\n            }))}\n            controller={{ defaultValue: `Hmac${OTP_HASH_ALGORITHMS[0]}` }}\n          />\n          <FormGroup\n            label={t(\"otpPolicyDigits\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"otpPolicyDigitsHelp\")}\n                fieldLabelId=\"otpPolicyDigits\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"otpPolicyDigits\"\n              data-testid=\"otpPolicyDigits\"\n              defaultValue={NUMBER_OF_DIGITS[0]}\n              control={control}\n              render={({ field }) => (\n                <>\n                  {NUMBER_OF_DIGITS.map((type) => (\n                    <Radio\n                      key={type}\n                      id={`digit-${type}`}\n                      data-testid={`digit-${type}`}\n                      isChecked={field.value === type}\n                      name=\"otpPolicyDigits\"\n                      onChange={() => field.onChange(type)}\n                      label={type}\n                      className=\"keycloak__otp_policies_authentication__number-of-digits\"\n                    />\n                  ))}\n                </>\n              )}\n            />\n          </FormGroup>\n          <NumberControl\n            name=\"otpPolicyLookAheadWindow\"\n            label={t(\"lookAround\")}\n            labelIcon={t(\"lookAroundHelp\")}\n            controller={{ defaultValue: 1, rules: { min: 0 } }}\n          />\n          {otpType === POLICY_TYPES[0] && (\n            <TimeSelectorControl\n              name=\"otpPolicyPeriod\"\n              label={t(\"otpPolicyPeriod\")}\n              labelIcon={t(\"otpPolicyPeriodHelp\")}\n              units={[\"second\", \"minute\"]}\n              controller={{\n                defaultValue: 30,\n                rules: {\n                  min: 1,\n                  max: {\n                    value: 120,\n                    message: t(\"maxLength\", { length: \"2 \" + t(\"minutes\") }),\n                  },\n                },\n              }}\n            />\n          )}\n          {otpType === POLICY_TYPES[1] && (\n            <NumberControl\n              name=\"otpPolicyInitialCounter\"\n              label={t(\"initialCounter\")}\n              labelIcon={t(\"initialCounterHelp\")}\n              controller={{ defaultValue: 30, rules: { min: 1, max: 120 } }}\n            />\n          )}\n          <FormGroup\n            label={t(\"supportedApplications\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"supportedApplicationsHelp\")}\n                fieldLabelId=\"supportedApplications\"\n              />\n            }\n          >\n            <ChipGroup data-testid=\"supportedApplications\">\n              {supportedApplications.map((label) => (\n                <Chip key={label} isReadOnly>\n                  {label}\n                </Chip>\n              ))}\n            </ChipGroup>\n          </FormGroup>\n\n          {otpType === POLICY_TYPES[0] && (\n            <SwitchControl\n              name=\"otpPolicyCodeReusable\"\n              label={t(\"otpPolicyCodeReusable\")}\n              labelIcon={t(\"otpPolicyCodeReusableHelp\")}\n              labelOn={t(\"on\")}\n              labelOff={t(\"off\")}\n            />\n          )}\n\n          <ActionGroup>\n            <Button\n              data-testid=\"save\"\n              variant=\"primary\"\n              type=\"submit\"\n              isDisabled={!isValid || !isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              data-testid=\"reload\"\n              variant={ButtonVariant.link}\n              onClick={() => reset({ ...realm })}\n            >\n              {t(\"reload\")}\n            </Button>\n          </ActionGroup>\n        </FormProvider>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport {\n  Button,\n  FormGroup,\n  NumberInput,\n  Split,\n  SplitItem,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./policy-row.css\";\n\ntype PolicyRowProps = {\n  policy: PasswordPolicyTypeRepresentation;\n  onRemove: (id?: string) => void;\n};\n\nexport const PolicyRow = ({\n  policy: { id, configType, defaultValue, displayName },\n  onRemove,\n}: PolicyRowProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <FormGroup\n      label={displayName}\n      fieldId={id!}\n      isRequired\n      helperTextInvalid={t(\"required\")}\n      validated={\n        errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      labelIcon={\n        <HelpItem\n          helpText={t(`passwordPoliciesHelp.${id}`)}\n          fieldLabelId={id!}\n        />\n      }\n    >\n      <Split>\n        <SplitItem isFilled>\n          {configType && configType !== \"int\" && (\n            <KeycloakTextInput\n              id={id}\n              data-testid={id}\n              {...register(id!, { required: true })}\n              defaultValue={defaultValue}\n              validated={\n                errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n              }\n            />\n          )}\n          {configType === \"int\" && (\n            <Controller\n              name={id!}\n              defaultValue={Number.parseInt(defaultValue || \"0\")}\n              control={control}\n              render={({ field }) => {\n                const MIN_VALUE = 0;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n                const value = Number(field.value);\n\n                return (\n                  <NumberInput\n                    id={id}\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 0);\n                    }}\n                    className=\"keycloak__policies_authentication__number-field\"\n                  />\n                );\n              }}\n            />\n          )}\n          {!configType && (\n            <Switch\n              id={id!}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked\n              isDisabled\n              aria-label={displayName}\n            />\n          )}\n        </SplitItem>\n        <SplitItem>\n          <Button\n            data-testid={`remove-${id}`}\n            variant=\"link\"\n            className=\"keycloak__policies_authentication__minus-icon\"\n            onClick={() => onRemove(id)}\n            aria-label={t(\"remove\")}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\n\nexport type SubmittedValues = {\n  [index: string]: string;\n};\n\nconst POLICY_SEPARATOR = \" and \";\n\nexport const serializePolicy = (\n  policies: PasswordPolicyTypeRepresentation[],\n  submitted: SubmittedValues,\n) =>\n  policies\n    .map((policy) => `${policy.id}(${submitted[policy.id!]})`)\n    .join(POLICY_SEPARATOR);\n\ntype PolicyValue = PasswordPolicyTypeRepresentation & {\n  value?: string;\n};\n\nexport const parsePolicy = (\n  value: string,\n  policies: PasswordPolicyTypeRepresentation[],\n) =>\n  value\n    .split(POLICY_SEPARATOR)\n    .map(parsePolicyToken)\n    .reduce<PolicyValue[]>((result, { id, value }) => {\n      const matchingPolicy = policies.find((policy) => policy.id === id);\n\n      if (!matchingPolicy) {\n        return result;\n      }\n\n      return result.concat({ ...matchingPolicy, value });\n    }, []);\n\ntype PolicyTokenParsed = {\n  id: string;\n  value?: string;\n};\n\nfunction parsePolicyToken(token: string): PolicyTokenParsed {\n  const valueStart = token.indexOf(\"(\");\n\n  if (valueStart === -1) {\n    return { id: token.trim() };\n  }\n\n  const id = token.substring(0, valueStart).trim();\n  const valueEnd = token.lastIndexOf(\")\");\n\n  if (valueEnd === -1) {\n    return { id };\n  }\n\n  const value = token.substring(valueStart + 1, valueEnd).trim();\n\n  return { id, value };\n}\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  PageSection,\n  Select,\n  SelectOption,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { PolicyRow } from \"./PolicyRow\";\nimport { SubmittedValues, parsePolicy, serializePolicy } from \"./util\";\n\ntype PolicySelectProps = {\n  onSelect: (row: PasswordPolicyTypeRepresentation) => void;\n  selectedPolicies: PasswordPolicyTypeRepresentation[];\n};\n\nconst PolicySelect = ({ onSelect, selectedPolicies }: PolicySelectProps) => {\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n  const [open, setOpen] = useState(false);\n\n  const policies = useMemo(\n    () =>\n      passwordPolicies?.filter(\n        (p) => selectedPolicies.find((o) => o.id === p.id) === undefined,\n      ),\n    [selectedPolicies],\n  );\n\n  return (\n    <Select\n      width={300}\n      onSelect={(_, selection) => {\n        onSelect(selection as PasswordPolicyTypeRepresentation);\n        setOpen(false);\n      }}\n      onToggle={(value) => setOpen(value)}\n      isOpen={open}\n      selections={t(\"addPolicy\")}\n      isDisabled={policies?.length === 0}\n    >\n      {policies?.map((policy) => (\n        <SelectOption key={policy.id} value={policy}>\n          {policy.displayName}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\ntype PasswordPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\nexport const PasswordPolicy = ({\n  realm,\n  realmUpdated,\n}: PasswordPolicyProps) => {\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const [rows, setRows] = useState<PasswordPolicyTypeRepresentation[]>([]);\n  const onSelect = (row: PasswordPolicyTypeRepresentation) => {\n    setRows([...rows, row]);\n    setValue(row.id!, row.defaultValue!, { shouldDirty: true });\n  };\n\n  const form = useForm<SubmittedValues>({\n    defaultValues: {},\n  });\n  const {\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = form;\n\n  const setupForm = (realm: RealmRepresentation) => {\n    reset();\n    const values = parsePolicy(realm.passwordPolicy || \"\", passwordPolicies!);\n    values.forEach((v) => {\n      setValue(v.id!, v.value!);\n    });\n    setRows(values);\n  };\n\n  useEffect(() => setupForm(realm), []);\n\n  const save = async (values: SubmittedValues) => {\n    const updatedRealm = {\n      ...realm,\n      passwordPolicy: serializePolicy(rows, values),\n    };\n    try {\n      await adminClient.realms.update({ realm: realmName }, updatedRealm);\n      realmUpdated(updatedRealm);\n      setupForm(updatedRealm);\n      addAlert(t(\"updatePasswordPolicySuccess\"), AlertVariant.success);\n    } catch (error: any) {\n      addError(\"updatePasswordPolicyError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      {(rows.length !== 0 || realm.passwordPolicy) && (\n        <>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <PolicySelect onSelect={onSelect} selectedPolicies={rows} />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <Divider />\n          <PageSection variant=\"light\">\n            <FormProvider {...form}>\n              <FormAccess\n                className=\"keycloak__policies_authentication__form\"\n                role=\"manage-realm\"\n                isHorizontal\n                onSubmit={handleSubmit(save)}\n              >\n                {rows.map((r, index) => (\n                  <PolicyRow\n                    key={`${r.id}-${index}`}\n                    policy={r}\n                    onRemove={(id) => {\n                      setRows(rows.filter((r) => r.id !== id));\n                      setValue(r.id!, \"\", { shouldDirty: true });\n                    }}\n                  />\n                ))}\n                <ActionGroup>\n                  <Button\n                    data-testid=\"save\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"save\")}\n                  </Button>\n                  <Button\n                    data-testid=\"reload\"\n                    variant={ButtonVariant.link}\n                    onClick={() => setupForm(realm)}\n                  >\n                    {t(\"reload\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </FormProvider>\n          </PageSection>\n        </>\n      )}\n      {!rows.length && !realm.passwordPolicy && (\n        <EmptyState data-testid=\"empty-state\" variant=\"large\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h1\" size=\"lg\">\n            {t(\"noPasswordPolicies\")}\n          </Title>\n          <EmptyStateBody>{t(\"noPasswordPoliciesInstructions\")}</EmptyStateBody>\n          <EmptyStatePrimary>\n            <PolicySelect onSelect={onSelect} selectedPolicies={[]} />\n          </EmptyStatePrimary>\n        </EmptyState>\n      )}\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  PageSection,\n  Popover,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  HelpItem,\n  SelectControl,\n  SwitchControl,\n  TextControl,\n  useHelp,\n} from \"ui-shared\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelectorControl } from \"../../components/time-selector/TimeSelectorControl\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nimport \"./webauthn-policy.css\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\",\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"Ed25519\",\n  \"RS1\",\n] as const;\nconst ATTESTATION_PREFERENCE = [\n  \"not specified\",\n  \"none\",\n  \"indirect\",\n  \"direct\",\n] as const;\n\nconst AUTHENTICATOR_ATTACHMENT = [\n  \"not specified\",\n  \"platform\",\n  \"cross-platform\",\n] as const;\n\nconst RESIDENT_KEY_OPTIONS = [\"not specified\", \"Yes\", \"No\"] as const;\n\nconst USER_VERIFY = [\n  \"not specified\",\n  \"required\",\n  \"preferred\",\n  \"discouraged\",\n] as const;\n\ntype WeauthnSelectProps = {\n  name: string;\n  label: string;\n  options: readonly string[];\n  labelPrefix?: string;\n  isMultiSelect?: boolean;\n};\n\nconst WebauthnSelect = ({\n  name,\n  label,\n  options,\n  labelPrefix,\n  isMultiSelect = false,\n}: WeauthnSelectProps) => {\n  const { t } = useTranslation();\n  return (\n    <SelectControl\n      name={name}\n      label={t(label)}\n      variant={\n        isMultiSelect ? SelectVariant.typeaheadMulti : SelectVariant.single\n      }\n      controller={{ defaultValue: options[0] }}\n      options={options.map((option) => ({\n        key: option,\n        value: labelPrefix ? t(`${labelPrefix}.${option}`) : option,\n      }))}\n      typeAheadAriaLabel={t(name)}\n    />\n  );\n};\n\ntype WebauthnPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n  isPasswordLess?: boolean;\n};\n\nexport const WebauthnPolicy = ({\n  realm,\n  realmUpdated,\n  isPasswordLess = false,\n}: WebauthnPolicyProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { enabled } = useHelp();\n  const form = useForm({ mode: \"onChange\" });\n  const {\n    setValue,\n    handleSubmit,\n    formState: { isDirty },\n  } = form;\n\n  const namePrefix = isPasswordLess\n    ? \"webAuthnPolicyPasswordless\"\n    : \"webAuthnPolicy\";\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (realm: RealmRepresentation) => {\n    const submittedRealm = convertFormValuesToObject(realm);\n    try {\n      await adminClient.realms.update({ realm: realmName }, submittedRealm);\n      realmUpdated(submittedRealm);\n      setupForm(submittedRealm);\n      addAlert(t(\"webAuthnUpdateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"webAuthnUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      {enabled && (\n        <Popover bodyContent={t(`${namePrefix}FormHelp`)}>\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"webauthnIntro\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__webauthn_policies_authentication__form\"\n      >\n        <FormProvider {...form}>\n          <TextControl\n            name={`${namePrefix}RpEntityName`}\n            label={t(\"webAuthnPolicyRpEntityName\")}\n            labelIcon={t(\"webAuthnPolicyRpEntityNameHelp\")}\n            rules={{ required: { value: true, message: t(\"required\") } }}\n          />\n          <WebauthnSelect\n            name={`${namePrefix}SignatureAlgorithms`}\n            label=\"webAuthnPolicySignatureAlgorithms\"\n            options={SIGNATURE_ALGORITHMS}\n            isMultiSelect\n          />\n          <TextControl\n            name={`${namePrefix}RpId`}\n            label={t(\"webAuthnPolicyRpId\")}\n            labelIcon={t(\"webAuthnPolicyRpIdHelp\")}\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AttestationConveyancePreference`}\n            label=\"webAuthnPolicyAttestationConveyancePreference\"\n            options={ATTESTATION_PREFERENCE}\n            labelPrefix=\"attestationPreference\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AuthenticatorAttachment`}\n            label=\"webAuthnPolicyAuthenticatorAttachment\"\n            options={AUTHENTICATOR_ATTACHMENT}\n            labelPrefix=\"authenticatorAttachment\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}RequireResidentKey`}\n            label=\"webAuthnPolicyRequireResidentKey\"\n            options={RESIDENT_KEY_OPTIONS}\n            labelPrefix=\"residentKey\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}UserVerificationRequirement`}\n            label=\"webAuthnPolicyUserVerificationRequirement\"\n            options={USER_VERIFY}\n            labelPrefix=\"userVerify\"\n          />\n          <TimeSelectorControl\n            name={`${namePrefix}CreateTimeout`}\n            label={t(\"webAuthnPolicyCreateTimeout\")}\n            labelIcon={t(\"otpPolicyPeriodHelp\")}\n            units={[\"second\", \"minute\", \"hour\"]}\n            controller={{\n              defaultValue: 0,\n              rules: {\n                min: 0,\n                max: {\n                  value: 31536,\n                  message: t(\"webAuthnPolicyCreateTimeoutHint\"),\n                },\n              },\n            }}\n          />\n          <SwitchControl\n            name={`${namePrefix}AvoidSameAuthenticatorRegister`}\n            label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n            labelIcon={t(\"webAuthnPolicyAvoidSameAuthenticatorRegisterHelp\")}\n            labelOn={t(\"on\")}\n            labelOff={t(\"off\")}\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyAcceptableAaguids\")}\n            fieldId=\"webAuthnPolicyAcceptableAaguids\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyAcceptableAaguidsHelp\")}\n                fieldLabelId=\"webAuthnPolicyAcceptableAaguids\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}AcceptableAaguids`}\n              aria-label={t(\"webAuthnPolicyAcceptableAaguids\")}\n              addButtonLabel=\"addAaguids\"\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyExtraOrigins\")}\n            fieldId=\"webAuthnPolicyExtraOrigins\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyExtraOriginsHelp\")}\n                fieldLabelId=\"webAuthnPolicyExtraOrigins\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}ExtraOrigins`}\n              aria-label={t(\"webAuthnPolicyExtraOrigins\")}\n              addButtonLabel=\"addOrigins\"\n            />\n          </FormGroup>\n        </FormProvider>\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm(realm)}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { CibaPolicy } from \"./CibaPolicy\";\nimport { OtpPolicy } from \"./OtpPolicy\";\nimport { PasswordPolicy } from \"./PasswordPolicy\";\nimport { WebauthnPolicy } from \"./WebauthnPolicy\";\n\nexport const Policies = () => {\n  const { t } = useTranslation();\n  const [subTab, setSubTab] = useState(1);\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const realm = await adminClient.realms.findOne({ realm: realmName });\n      if (!realm) {\n        throw new Error(t(\"notFound\"));\n      }\n      return realm;\n    },\n    (realm) => {\n      setRealm(realm);\n    },\n    [],\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Tabs\n      activeKey={subTab}\n      onSelect={(_, key) => setSubTab(key as number)}\n      mountOnEnter\n      unmountOnExit\n    >\n      <Tab\n        id=\"passwordPolicy\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"passwordPolicy\")}</TabTitleText>}\n      >\n        <PasswordPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"otpPolicy\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"otpPolicy\")}</TabTitleText>}\n      >\n        <OtpPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPolicy\"\n        eventKey={3}\n        title={<TabTitleText>{t(\"webauthnPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPasswordlessPolicy\"\n        eventKey={4}\n        title={<TabTitleText>{t(\"webauthnPasswordlessPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} isPasswordLess />\n      </Tab>\n      <Tab\n        data-testid=\"tab-ciba-policy\"\n        eventKey={5}\n        title={<TabTitleText>{t(\"cibaPolicy\")}</TabTitleText>}\n      >\n        <CibaPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { addTrailingSlash } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport useToggle from \"../utils/useToggle\";\nimport { BindFlowDialog } from \"./BindFlowDialog\";\nimport { DuplicateFlowModal } from \"./DuplicateFlowModal\";\nimport { RequiredActions } from \"./RequiredActions\";\nimport { UsedBy } from \"./components/UsedBy\";\nimport { Policies } from \"./policies/Policies\";\nimport { AuthenticationTab, toAuthentication } from \"./routes/Authentication\";\nimport { toCreateFlow } from \"./routes/CreateFlow\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n  realm: RealmRepresentation;\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n  [\"firstBrokerLoginFlow\", \"firstBrokerLogin\"],\n]);\n\nconst AliasRenderer = ({ id, alias, usedBy, builtIn }: AuthenticationType) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      <Link\n        to={toFlow({\n          realm,\n          id: id!,\n          usedBy: usedBy?.type || \"notInUse\",\n          builtIn: builtIn ? \"builtIn\" : undefined,\n        })}\n        key={`link-${id}`}\n      >\n        {alias}\n      </Link>{\" \"}\n      {builtIn && <Label key={`label-${id}`}>{t(\"buildIn\")}</Label>}\n    </>\n  );\n};\n\nexport default function AuthenticationSection() {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setRealm(undefined);\n    setKey(key + 1);\n  };\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [selectedFlow, setSelectedFlow] = useState<AuthenticationType>();\n  const [open, toggleOpen] = useToggle();\n  const [bindFlowOpen, toggleBindFlow] = useToggle();\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  const loader = async () => {\n    const flowsRequest = await fetchWithError(\n      `${addTrailingSlash(\n        adminClient.baseUrl,\n      )}admin/realms/${realmName}/ui-ext/authentication-management/flows`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      },\n    );\n    const flows = await flowsRequest.json();\n\n    if (!flows) {\n      return [];\n    }\n\n    return sortBy(\n      localeSort<AuthenticationType>(flows, mapByKey(\"alias\")),\n      (flow) => flow.usedBy?.type,\n    );\n  };\n\n  const useTab = (tab: AuthenticationTab) =>\n    useRoutableTab(toAuthentication({ realm: realmName, tab }));\n\n  const flowsTab = useTab(\"flows\");\n  const requiredActionsTab = useTab(\"required-actions\");\n  const policiesTab = useTab(\"policies\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmFlow\",\n    children: (\n      <Trans i18nKey=\"deleteConfirmFlowMessage\">\n        {\" \"}\n        <strong>{{ flow: selectedFlow ? selectedFlow.alias : \"\" }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.authenticationManagement.deleteFlow({\n          flowId: selectedFlow!.id!,\n        });\n        refresh();\n        addAlert(t(\"deleteFlowSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteFlowError\", error);\n      }\n    },\n  });\n\n  if (!realm) return <KeycloakSpinner />;\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <DuplicateFlowModal\n          name={selectedFlow ? selectedFlow.alias! : \"\"}\n          description={selectedFlow?.description!}\n          toggleDialog={toggleOpen}\n          onComplete={() => {\n            refresh();\n            toggleOpen();\n          }}\n        />\n      )}\n      {bindFlowOpen && (\n        <BindFlowDialog\n          onClose={() => {\n            toggleBindFlow();\n            refresh();\n          }}\n          flowAlias={selectedFlow?.alias!}\n        />\n      )}\n      <ViewHeader\n        titleKey=\"titleAuthentication\"\n        subKey=\"authenticationExplain\"\n        helpUrl={helpUrls.authenticationUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toAuthentication({ realm: realmName, tab: \"flows\" })}\n        >\n          <Tab\n            data-testid=\"flows\"\n            title={<TabTitleText>{t(\"flows\")}</TabTitleText>}\n            {...flowsTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              ariaLabelKey=\"titleAuthentication\"\n              searchPlaceholderKey=\"searchForFlow\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toCreateFlow({ realm: realmName })}\n                      />\n                    )}\n                  >\n                    {t(\"createFlow\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              actionResolver={({ data }) => [\n                {\n                  title: t(\"duplicate\"),\n                  onClick: () => {\n                    toggleOpen();\n                    setSelectedFlow(data);\n                  },\n                },\n                ...(data.usedBy?.type !== \"DEFAULT\"\n                  ? [\n                      {\n                        title: t(\"bindFlow\"),\n                        onClick: () => {\n                          toggleBindFlow();\n                          setSelectedFlow(data);\n                        },\n                      },\n                    ]\n                  : []),\n                ...(!data.builtIn && !data.usedBy\n                  ? [\n                      {\n                        title: t(\"delete\"),\n                        onClick: () => {\n                          setSelectedFlow(data);\n                          toggleDeleteDialog();\n                        },\n                      },\n                    ]\n                  : []),\n              ]}\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"flowName\",\n                  cellRenderer: (row) => <AliasRenderer {...row} />,\n                },\n                {\n                  name: \"usedBy\",\n                  displayKey: \"usedBy\",\n                  cellRenderer: (row) => (\n                    <UsedBy authType={row} realm={realm} />\n                  ),\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"description\",\n                },\n              ]}\n              emptyState={\n                <ListEmptyState\n                  message={t(\"emptyEvents\")}\n                  instructions={t(\"emptyEventsInstructions\")}\n                />\n              }\n            />\n          </Tab>\n          <Tab\n            data-testid=\"requiredActions\"\n            title={<TabTitleText>{t(\"requiredActions\")}</TabTitleText>}\n            {...requiredActionsTab}\n          >\n            <RequiredActions />\n          </Tab>\n          <Tab\n            data-testid=\"policies\"\n            title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n            {...policiesTab}\n          >\n            <Policies />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["EmptyStatePrimary","_a","children","className","props","__rest","React","css","styles","BindFlowDialog","flowAlias","onClose","t","useTranslation","form","useForm","addAlert","addError","useAlerts","realm","useRealm","onSubmit","bindingType","realmRep","adminClient","AlertVariant","error","flowKeys","REALM_FLOWS","jsx","Modal","Button","ButtonVariant","Form","FormProvider","SelectControl","f","key","SelectVariant","DuplicateFlowModal","name","description","toggleDialog","onComplete","setValue","getValues","handleSubmit","navigate","useNavigate","useEffect","newFlow","flow","toFlow","ModalVariant","NameDescription","RequiredActions","actions","setActions","useState","setKey","refresh","useFetch","requiredActions","unregisteredRequiredActions","a","isUnregisteredAction","data","updateAction","action","field","executeMove","times","alias","index","DraggableTable","nameDragged","items","keys","e","newIndex","oldIndex","dragged","row","Switch","toKey","KeycloakSpinner","Label","label","jsxs","Fragment","CheckCircleIcon","style","UsedByModal","id","isSpecificClient","loader","first","max","search","fetchUsedBy","TextContent","Text","TextVariants","KeycloakDataTable","UsedBy","usedBy","open","toggle","useToggle","Popover","used","CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES","CIBA_EXPIRES_IN_MIN","CIBA_EXPIRES_IN_MAX","CIBA_INTERVAL_MIN","CIBA_INTERVAL_MAX","CibaPolicy","realmUpdated","realmName","setupForm","convertToFormValues","formValues","convertFormValuesToObject","updatedRealm","PageSection","FormAccess","mode","TextControl","ActionGroup","TimeSelectorControl","controller","labelIcon","rest","control","errors","useFormContext","FormGroup","HelpItem","ValidatedOptions","Controller","TimeSelector","POLICY_TYPES","OTP_HASH_ALGORITHMS","NUMBER_OF_DIGITS","OtpPolicy","reset","isValid","isDirty","localeSort","useLocaleSort","otpType","useWatch","supportedApplications","useMemo","labels","type","Radio","NumberControl","ChipGroup","Chip","SwitchControl","PolicyRow","configType","defaultValue","displayName","onRemove","register","Split","SplitItem","KeycloakTextInput","newValue","value","NumberInput","event","MinusCircleIcon","POLICY_SEPARATOR","serializePolicy","policies","submitted","policy","parsePolicy","parsePolicyToken","result","matchingPolicy","token","valueStart","valueEnd","PolicySelect","onSelect","selectedPolicies","passwordPolicies","useServerInfo","setOpen","p","o","Select","_","selection","SelectOption","PasswordPolicy","rows","setRows","values","v","save","Toolbar","ToolbarContent","ToolbarItem","Divider","r","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","EmptyStateBody","SIGNATURE_ALGORITHMS","ATTESTATION_PREFERENCE","AUTHENTICATOR_ATTACHMENT","RESIDENT_KEY_OPTIONS","USER_VERIFY","WebauthnSelect","options","labelPrefix","isMultiSelect","option","WebauthnPolicy","isPasswordLess","enabled","useHelp","namePrefix","submittedRealm","QuestionCircleIcon","MultiLineInput","Policies","subTab","setSubTab","setRealm","Tabs","Tab","TabTitleText","AliasRenderer","builtIn","Link","AuthenticationSection","selectedFlow","setSelectedFlow","toggleOpen","bindFlowOpen","toggleBindFlow","flows","fetchWithError","addTrailingSlash","getAuthorizationHeaders","sortBy","mapByKey","useTab","tab","useRoutableTab","toAuthentication","flowsTab","requiredActionsTab","policiesTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","Trans","ViewHeader","helpUrls","RoutableTabs","toCreateFlow","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0]}