{"version":3,"file":"SessionsSection-qiOM2AKN.js","sources":["../../src/sessions/RevocationModal.tsx","../../src/sessions/SessionsSection.tsx"],"sourcesContent":["import type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  TextContent,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emailRegexPattern } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\n\ntype RevocationModalProps = {\n  handleModalToggle: () => void;\n  save: () => void;\n};\n\nexport const RevocationModal = ({\n  handleModalToggle,\n  save,\n}: RevocationModalProps) => {\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n\n  const { realm: realmName } = useRealm();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(new Date().getTime());\n  };\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      setRealm(realm);\n    },\n    [key],\n  );\n\n  const parseResult = (result: GlobalRequestResult, prefixKey: string) => {\n    const successCount = result.successRequests?.length || 0;\n    const failedCount = result.failedRequests?.length || 0;\n\n    if (successCount === 0 && failedCount === 0) {\n      addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n    } else if (failedCount > 0) {\n      addAlert(\n        t(\"\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success,\n      );\n      addAlert(\n        t(\"\" + prefixKey + \"Fail\", {\n          failedNodes: result.failedRequests,\n        }),\n        AlertVariant.danger,\n      );\n    } else {\n      addAlert(\n        t(\"\" + prefixKey + \"Success\", {\n          successNodes: result.successRequests,\n        }),\n        AlertVariant.success,\n      );\n    }\n  };\n\n  const setToNow = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: Date.now() / 1000,\n        },\n      );\n\n      addAlert(t(\"notBeforeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addAlert(t(\"setToNowError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const clearNotBefore = async () => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          realm: realmName,\n          notBefore: 0,\n        },\n      );\n      addAlert(t(\"notBeforeClearedSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addAlert(t(\"notBeforeError\", { error }), AlertVariant.danger);\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.realms.pushRevocation({\n      realm: realmName,\n    });\n    parseResult(result, \"notBeforePush\");\n\n    refresh();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"revocation\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"set-to-now-button\"\n          key=\"set-to-now\"\n          variant=\"tertiary\"\n          onClick={() => {\n            setToNow();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"setToNow\")}\n        </Button>,\n        <Button\n          data-testid=\"clear-not-before-button\"\n          key=\"clear\"\n          variant=\"tertiary\"\n          onClick={() => {\n            clearNotBefore();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"clear\")}\n        </Button>,\n        <Button\n          data-testid=\"modal-test-connection-button\"\n          key=\"push\"\n          variant=\"secondary\"\n          onClick={() => {\n            push();\n            handleModalToggle();\n          }}\n          form=\"revocation-modal-form\"\n        >\n          {t(\"push\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent className=\"kc-revocation-description-text\">\n        {t(\"revocationDescription\")}\n      </TextContent>\n      <Form\n        id=\"revocation-modal-form\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          className=\"kc-revocation-modal-form-group\"\n          label={t(\"notBefore\")}\n          name=\"notBefore\"\n          fieldId=\"not-before\"\n          validated={\n            errors.email ? ValidatedOptions.error : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"not-before-input\"\n            autoFocus\n            isReadOnly\n            value={\n              realm?.notBefore === 0\n                ? (t(\"none\") as string)\n                : new Date(realm?.notBefore! * 1000).toString()\n            }\n            type=\"text\"\n            id=\"not-before\"\n            {...register(\"notBefore\", {\n              required: true,\n              pattern: emailRegexPattern,\n            })}\n            validated={\n              errors.email ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport {\n  DropdownItem,\n  PageSection,\n  Select,\n  SelectOption,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { fetchAdminUI } from \"../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { RevocationModal } from \"./RevocationModal\";\nimport SessionsTable from \"./SessionsTable\";\nimport useToggle from \"../utils/useToggle\";\n\nimport \"./SessionsSection.css\";\n\ntype FilterType = \"ALL\" | \"REGULAR\" | \"OFFLINE\";\n\ntype SessionFilterProps = {\n  filterType: FilterType;\n  onChange: (filterType: FilterType) => void;\n};\n\nconst SessionFilter = ({ filterType, onChange }: SessionFilterProps) => {\n  const { t } = useTranslation();\n\n  const [open, toggle] = useToggle();\n\n  return (\n    <Select\n      data-testid=\"filter-session-type-select\"\n      isOpen={open}\n      onToggle={toggle}\n      toggleIcon={<FilterIcon />}\n      onSelect={(_, value) => {\n        const filter = value as FilterType;\n        onChange(filter);\n        toggle();\n      }}\n      selections={filterType}\n    >\n      <SelectOption data-testid=\"all-sessions-option\" value=\"ALL\">\n        {t(\"sessionsType.allSessions\")}\n      </SelectOption>\n      <SelectOption data-testid=\"regular-sso-option\" value=\"REGULAR\">\n        {t(\"sessionsType.regularSSO\")}\n      </SelectOption>\n      <SelectOption data-testid=\"offline-option\" value=\"OFFLINE\">\n        {t(\"sessionsType.offline\")}\n      </SelectOption>\n    </Select>\n  );\n};\n\nexport default function SessionsSection() {\n  const { t } = useTranslation();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const { addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [revocationModalOpen, setRevocationModalOpen] = useState(false);\n  const [filterType, setFilterType] = useState<FilterType>(\"ALL\");\n  const [noSessions, setNoSessions] = useState(false);\n\n  const handleRevocationModalToggle = () => {\n    setRevocationModalOpen(!revocationModalOpen);\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const data = await fetchAdminUI<UserSessionRepresentation[]>(\n      \"ui-ext/sessions\",\n      {\n        first: `${first}`,\n        max: `${max}`,\n        type: filterType,\n        search: search || \"\",\n      },\n    );\n    setNoSessions(data.length === 0);\n    return data;\n  };\n\n  const [toggleLogoutDialog, LogoutConfirm] = useConfirmDialog({\n    titleKey: \"logoutAllSessions\",\n    messageKey: \"logoutAllDescription\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.logoutAll({ realm });\n        refresh();\n      } catch (error) {\n        addError(\"logoutAllSessionsError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = [\n    <DropdownItem\n      key=\"toggle-modal\"\n      data-testid=\"revocation\"\n      component=\"button\"\n      onClick={() => handleRevocationModalToggle()}\n    >\n      {t(\"revocation\")}\n    </DropdownItem>,\n    <DropdownItem\n      key=\"delete-role\"\n      data-testid=\"logout-all\"\n      component=\"button\"\n      isDisabled={noSessions}\n      onClick={toggleLogoutDialog}\n    >\n      {t(\"signOutAllActiveSessions\")}\n    </DropdownItem>,\n  ];\n\n  return (\n    <>\n      <LogoutConfirm />\n      <ViewHeader\n        dropdownItems={dropdownItems}\n        titleKey=\"titleSessions\"\n        subKey=\"sessionExplain\"\n        helpUrl={helpUrls.sessionsUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        {revocationModalOpen && (\n          <RevocationModal\n            handleModalToggle={handleRevocationModalToggle}\n            save={() => {\n              handleRevocationModalToggle();\n            }}\n          />\n        )}\n        <SessionsTable\n          key={key}\n          loader={loader}\n          isSearching={filterType !== \"ALL\"}\n          isPaginated\n          filter={\n            <SessionFilter\n              filterType={filterType}\n              onChange={(type) => {\n                setFilterType(type);\n                refresh();\n              }}\n            />\n          }\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["RevocationModal","handleModalToggle","save","t","useTranslation","addAlert","useAlerts","realmName","useRealm","register","handleSubmit","errors","useForm","realm","setRealm","useState","key","setKey","refresh","useFetch","adminClient","parseResult","result","prefixKey","successCount","failedCount","AlertVariant","setToNow","error","clearNotBefore","push","jsxs","Modal","ModalVariant","jsx","Button","ButtonVariant","TextContent","Form","FormGroup","ValidatedOptions","KeycloakTextInput","emailRegexPattern","SessionFilter","filterType","onChange","open","toggle","useToggle","Select","FilterIcon","_","value","SelectOption","SessionsSection","addError","revocationModalOpen","setRevocationModalOpen","setFilterType","noSessions","setNoSessions","handleRevocationModalToggle","loader","first","max","search","data","fetchAdminUI","toggleLogoutDialog","LogoutConfirm","useConfirmDialog","dropdownItems","DropdownItem","Fragment","ViewHeader","helpUrls","PageSection","SessionsTable","type"],"mappings":"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"}