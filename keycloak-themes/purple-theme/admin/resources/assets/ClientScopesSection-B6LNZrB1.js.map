{"version":3,"file":"ClientScopesSection-B6LNZrB1.js","sources":["../../src/client-scopes/ClientScopesSection.tsx"],"sourcesContent":["import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { getProtocolName } from \"../clients/utils\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AllClientScopeType,\n  AllClientScopes,\n  CellDropdown,\n  ClientScope,\n  ClientScopeDefaultOptionalType,\n  changeScope,\n  removeScope,\n} from \"../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { emptyFormatter } from \"../util\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport { ChangeTypeDropdown } from \"./ChangeTypeDropdown\";\nimport {\n  ProtocolType,\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  nameFilter,\n  protocolFilter,\n  typeFilter,\n} from \"./details/SearchFilter\";\nimport { toClientScope } from \"./routes/ClientScope\";\nimport { toNewClientScope } from \"./routes/NewClientScope\";\n\ntype TypeSelectorProps = ClientScopeDefaultOptionalType & {\n  refresh: () => void;\n};\n\nconst TypeSelector = (scope: TypeSelectorProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  return (\n    <CellDropdown\n      clientScope={scope}\n      type={scope.type}\n      all\n      onSelect={async (value) => {\n        try {\n          await changeScope(scope, value as AllClientScopeType);\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          scope.refresh();\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nconst ClientScopeDetailLink = ({\n  id,\n  name,\n}: ClientScopeDefaultOptionalType) => {\n  const { realm } = useRealm();\n  return (\n    <Link key={id} to={toClientScope({ realm, id: id!, tab: \"settings\" })}>\n      {name}\n    </Link>\n  );\n};\n\nexport default function ClientScopesSection() {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeDefaultOptionalType[]\n  >([]);\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none,\n  );\n  const [searchProtocol, setSearchProtocol] = useState<ProtocolType>(\"all\");\n  const localeSort = useLocaleSort();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setSelectedScopes([]);\n    setKey(key + 1);\n  };\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultScopes =\n      await adminClient.clientScopes.listDefaultClientScopes();\n    const optionalScopes =\n      await adminClient.clientScopes.listDefaultOptionalClientScopes();\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const filter =\n      searchType === \"name\"\n        ? nameFilter(search)\n        : searchType === \"type\"\n          ? typeFilter(searchTypeType)\n          : protocolFilter(searchProtocol);\n\n    const transformed = clientScopes\n      .map((scope) => {\n        const row: Row = {\n          ...scope,\n          type: defaultScopes.find(\n            (defaultScope) => defaultScope.name === scope.name,\n          )\n            ? ClientScope.default\n            : optionalScopes.find(\n                  (optionalScope) => optionalScope.name === scope.name,\n                )\n              ? ClientScope.optional\n              : AllClientScopes.none,\n        };\n        return row;\n      })\n      .filter(filter);\n\n    return localeSort(transformed, mapByKey(\"name\")).slice(\n      first,\n      Number(first) + Number(max),\n    );\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedScopes.length,\n      name: selectedScopes[0]?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const clientScopes = await adminClient.clientScopes.find();\n      const clientScopeLength = Object.keys(clientScopes).length;\n      if (clientScopeLength - selectedScopes.length > 0) {\n        try {\n          for (const scope of selectedScopes) {\n            try {\n              await removeScope(scope);\n            } catch (error: any) {\n              console.warn(\n                \"could not remove scope\",\n                error.response?.data?.errorMessage || error,\n              );\n            }\n            await adminClient.clientScopes.del({ id: scope.id! });\n          }\n          addAlert(t(\"deletedSuccessClientScope\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"deleteErrorClientScope\", error);\n        }\n      } else {\n        addError(t(\"notAllowedToDeleteAllClientScopes\"), \"error\");\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey=\"clientScopes\"\n        subKey=\"clientScopeExplain\"\n        helpUrl={helpUrls.clientScopesUrl}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <KeycloakDataTable\n          key={key}\n          loader={loader}\n          ariaLabelKey=\"clientScopeList\"\n          searchPlaceholderKey={\n            searchType === \"name\" ? \"searchForClientScope\" : undefined\n          }\n          isSearching={searchType !== \"name\"}\n          searchTypeComponent={\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              withProtocol\n            />\n          }\n          isPaginated\n          onSelect={(clientScopes) => setSelectedScopes([...clientScopes])}\n          canSelectAll\n          toolbarItem={\n            <>\n              <SearchToolbar\n                searchType={searchType}\n                type={searchTypeType}\n                onSelect={(searchType) => {\n                  setSearchType(searchType);\n                  setSearchProtocol(\"all\");\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n                onType={(value) => {\n                  setSearchTypeType(value);\n                  setSearchProtocol(\"all\");\n                  refresh();\n                }}\n                protocol={searchProtocol}\n                onProtocol={(protocol) => {\n                  setSearchProtocol(protocol);\n                  setSearchTypeType(AllClientScopes.none);\n                  refresh();\n                }}\n              />\n\n              <ToolbarItem>\n                <Button\n                  component={(props) => (\n                    <Link {...props} to={toNewClientScope({ realm })} />\n                  )}\n                >\n                  {t(\"createClientScope\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <ChangeTypeDropdown\n                  selectedRows={selectedScopes}\n                  refresh={refresh}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={<KebabToggle onToggle={setKebabOpen} />}\n                  isOpen={kebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      isDisabled={selectedScopes.length === 0}\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setKebabOpen(false);\n                      }}\n                    >\n                      {t(\"delete\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (clientScope) => {\n                setSelectedScopes([clientScope]);\n                toggleDeleteDialog();\n              },\n            } as Action<Row>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientScopeDetailLink,\n            },\n            {\n              name: \"type\",\n              displayKey: \"assignedType\",\n              cellRenderer: (row) => (\n                <TypeSelector {...row} refresh={refresh} />\n              ),\n            },\n            {\n              name: \"protocol\",\n              displayKey: \"protocol\",\n              cellRenderer: (client) =>\n                getProtocolName(t, client.protocol ?? \"openid-connect\"),\n              transforms: [cellWidth(15)],\n            },\n            {\n              name: \"attributes['gui.order']\",\n              displayKey: \"displayOrder\",\n              cellFormatters: [emptyFormatter()],\n              transforms: [cellWidth(15)],\n            },\n            { name: \"description\", cellFormatters: [emptyFormatter()] },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["TypeSelector","scope","t","useTranslation","addAlert","addError","useAlerts","jsx","CellDropdown","value","changeScope","AlertVariant","error","ClientScopeDetailLink","id","name","realm","useRealm","Link","toClientScope","ClientScopesSection","kebabOpen","setKebabOpen","useState","selectedScopes","setSelectedScopes","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","searchProtocol","setSearchProtocol","localeSort","useLocaleSort","key","setKey","refresh","loader","first","max","search","defaultScopes","adminClient","optionalScopes","clientScopes","filter","nameFilter","typeFilter","protocolFilter","transformed","defaultScope","ClientScope","optionalScope","mapByKey","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","removeScope","jsxs","Fragment","ViewHeader","helpUrls","PageSection","KeycloakDataTable","SearchDropdown","SearchToolbar","protocol","ToolbarItem","Button","props","toNewClientScope","ChangeTypeDropdown","Dropdown","KebabToggle","DropdownItem","clientScope","row","client","getProtocolName","cellWidth","emptyFormatter"],"mappings":"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"}