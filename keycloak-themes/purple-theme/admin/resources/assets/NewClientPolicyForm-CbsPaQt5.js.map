{"version":3,"file":"NewClientPolicyForm-CbsPaQt5.js","sources":["../../src/realm-settings/AddClientProfileModal.tsx","../../src/realm-settings/NewClientPolicyForm.tsx"],"sourcesContent":["import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { Button, Label, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useFetch } from \"../utils/useFetch\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nconst AliasRenderer = ({ name, global }: ClientProfile) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {name} {global && <Label color=\"blue\">{t(\"global\")}</Label>}\n    </>\n  );\n};\n\nexport type AddClientProfileModalProps = {\n  open: boolean;\n  toggleDialog: () => void;\n  onConfirm: (newReps: RoleRepresentation[]) => void;\n  allProfiles: string[];\n};\n\nexport const AddClientProfileModal = (props: AddClientProfileModalProps) => {\n  const { t } = useTranslation();\n  const [selectedRows, setSelectedRows] = useState<RoleRepresentation[]>([]);\n\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        }),\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      setTableProfiles([...(globalProfiles ?? []), ...(profiles ?? [])]);\n    },\n    [],\n  );\n\n  const loader = async () =>\n    tableProfiles?.filter((item) => !props.allProfiles.includes(item.name!)) ??\n    [];\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Modal\n      data-testid=\"addClientProfile\"\n      title={t(\"addClientProfile\")}\n      isOpen={props.open}\n      onClose={props.toggleDialog}\n      variant={ModalVariant.large}\n      actions={[\n        <Button\n          key=\"add\"\n          data-testid=\"add-client-profile-button\"\n          variant=\"primary\"\n          isDisabled={!selectedRows.length}\n          onClick={() => {\n            props.toggleDialog();\n            props.onConfirm(selectedRows);\n          }}\n        >\n          {t(\"add\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            props.toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        ariaLabelKey=\"profilesList\"\n        searchPlaceholderKey=\"searchProfile\"\n        canSelectAll\n        onSelect={(rows) => {\n          setSelectedRows([...rows]);\n        }}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"clientProfileName\",\n            cellRenderer: AliasRenderer,\n          },\n          {\n            name: \"description\",\n            displayKey: \"description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noRoles\")}\n            instructions={t(\"noRolesInstructions\")}\n            primaryActionText={t(\"createRole\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  FormGroup,\n  PageSection,\n  Text,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { AddClientProfileModal } from \"./AddClientProfileModal\";\nimport { toNewClientPolicyCondition } from \"./routes/AddCondition\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\nimport {\n  EditClientPolicyParams,\n  toEditClientPolicy,\n} from \"./routes/EditClientPolicy\";\nimport { toEditClientPolicyCondition } from \"./routes/EditCondition\";\n\nimport \"./realm-settings-section.css\";\n\ntype NewClientPolicyForm = Required<ClientPolicyRepresentation>;\n\nconst defaultValues: NewClientPolicyForm = {\n  name: \"\",\n  description: \"\",\n  conditions: [],\n  enabled: true,\n  profiles: [],\n};\n\ntype PolicyDetailAttributes = {\n  idx: number;\n  name: string;\n};\n\nexport default function NewClientPolicyForm() {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>();\n  const [clientProfiles, setClientProfiles] = useState<\n    ClientProfileRepresentation[]\n  >([]);\n\n  const [currentPolicy, setCurrentPolicy] =\n    useState<ClientPolicyRepresentation>();\n  const [\n    showAddConditionsAndProfilesForm,\n    setShowAddConditionsAndProfilesForm,\n  ] = useState(false);\n\n  const [conditionToDelete, setConditionToDelete] =\n    useState<PolicyDetailAttributes>();\n\n  const [profilesModalOpen, setProfilesModalOpen] = useState(false);\n\n  const [profileToDelete, setProfileToDelete] =\n    useState<PolicyDetailAttributes>();\n\n  const { policyName } = useParams<EditClientPolicyParams>();\n\n  const navigate = useNavigate();\n  const form = useForm<NewClientPolicyForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const { handleSubmit } = form;\n\n  const formValues = form.getValues();\n\n  type ClientPoliciesHeaderProps = {\n    onChange: (value: boolean) => void;\n    value: boolean;\n    save: () => void;\n    realmName: string;\n  };\n\n  const ClientPoliciesHeader = ({\n    save,\n    onChange,\n    value,\n  }: ClientPoliciesHeaderProps) => {\n    const { t } = useTranslation();\n\n    const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n      titleKey: \"disablePolicyConfirmTitle\",\n      messageKey: \"disablePolicyConfirm\",\n      continueButtonLabel: \"disable\",\n      onConfirm: () => {\n        onChange(!value);\n        save();\n      },\n    });\n\n    if (!policies) {\n      return <KeycloakSpinner />;\n    }\n\n    return (\n      <>\n        <DisableConfirm />\n        <DeleteConfirm />\n        <ViewHeader\n          titleKey={\n            showAddConditionsAndProfilesForm || policyName\n              ? policyName\n              : \"createPolicy\"\n          }\n          divider\n          dropdownItems={\n            showAddConditionsAndProfilesForm || policyName\n              ? [\n                  <DropdownItem\n                    key=\"delete\"\n                    value=\"delete\"\n                    onClick={() => {\n                      toggleDeleteDialog();\n                    }}\n                    data-testid=\"deleteClientPolicyDropdown\"\n                  >\n                    {t(\"deleteClientPolicy\")}\n                  </DropdownItem>,\n                ]\n              : undefined\n          }\n          isEnabled={value}\n          onToggle={(value) => {\n            if (!value) {\n              toggleDisableDialog();\n            } else {\n              onChange(value);\n              save();\n            }\n          }}\n        />\n      </>\n    );\n  };\n\n  useFetch(\n    async () => {\n      const [policies, profiles] = await Promise.all([\n        adminClient.clientPolicies.listPolicies(),\n        adminClient.clientPolicies.listProfiles({\n          includeGlobalProfiles: true,\n        }),\n      ]);\n\n      return { policies, profiles };\n    },\n    ({ policies, profiles }) => {\n      const currentPolicy = policies.policies?.find(\n        (item) => item.name === policyName,\n      );\n\n      const allClientProfiles = [\n        ...(profiles.globalProfiles ?? []),\n        ...(profiles.profiles ?? []),\n      ];\n\n      setPolicies(policies.policies ?? []);\n      if (currentPolicy) {\n        setupForm(currentPolicy);\n        setClientProfiles(allClientProfiles);\n        setCurrentPolicy(currentPolicy);\n        setShowAddConditionsAndProfilesForm(true);\n      }\n    },\n    [],\n  );\n\n  const setupForm = (policy: ClientPolicyRepresentation) => {\n    form.reset(policy);\n  };\n\n  const policy = (policies || []).filter(\n    (policy) => policy.name === policyName,\n  );\n  const policyConditions = policy[0]?.conditions || [];\n  const policyProfiles = policy[0]?.profiles || [];\n\n  const serverInfo = useServerInfo();\n\n  const conditionTypes =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientpolicy.condition.ClientPolicyConditionProvider\"\n    ];\n\n  const save = async () => {\n    const createdForm = form.getValues();\n    const createdPolicy = {\n      ...createdForm,\n      profiles: [],\n      conditions: [],\n    };\n\n    const getAllPolicies = () => {\n      const policyNameExists = policies?.some(\n        (policy) => policy.name === createdPolicy.name,\n      );\n\n      if (policyNameExists) {\n        return policies?.map((policy) =>\n          policy.name === createdPolicy.name ? createdPolicy : policy,\n        );\n      } else if (createdForm.name !== policyName) {\n        return policies\n          ?.filter((item) => item.name !== policyName)\n          .concat(createdForm);\n      }\n      return policies?.concat(createdForm);\n    };\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: getAllPolicies(),\n      });\n      addAlert(\n        policyName\n          ? t(\"updateClientPolicySuccess\")\n          : t(\"createClientPolicySuccess\"),\n        AlertVariant.success,\n      );\n      navigate(toEditClientPolicy({ realm, policyName: createdForm.name! }));\n      setShowAddConditionsAndProfilesForm(true);\n    } catch (error) {\n      addError(\"createClientPolicyError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: policyName,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies?.filter(\n        (policy) => policy.name !== policyName,\n      );\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        navigate(\n          toClientPolicies({\n            realm,\n            tab: \"policies\",\n          }),\n        );\n      } catch (error) {\n        addError(t(\"deleteClientPolicyError\"), error);\n      }\n    },\n  });\n\n  const [toggleDeleteConditionDialog, DeleteConditionConfirm] =\n    useConfirmDialog({\n      titleKey: t(\"deleteClientPolicyConditionConfirmTitle\"),\n      messageKey: t(\"deleteClientPolicyConditionConfirm\", {\n        condition: conditionToDelete?.name,\n      }),\n      continueButtonLabel: t(\"delete\"),\n      continueButtonVariant: ButtonVariant.danger,\n      onConfirm: async () => {\n        if (conditionToDelete?.name) {\n          currentPolicy?.conditions?.splice(conditionToDelete.idx!, 1);\n          try {\n            await adminClient.clientPolicies.updatePolicy({\n              policies: policies,\n            });\n            addAlert(t(\"deleteConditionSuccess\"), AlertVariant.success);\n            navigate(\n              toEditClientPolicy({ realm, policyName: formValues.name! }),\n            );\n          } catch (error) {\n            addError(t(\"deleteConditionError\"), error);\n          }\n        } else {\n          const updatedPolicies = policies?.filter(\n            (policy) => policy.name !== policyName,\n          );\n\n          try {\n            await adminClient.clientPolicies.updatePolicy({\n              policies: updatedPolicies,\n            });\n            addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n            navigate(\n              toClientPolicies({\n                realm,\n                tab: \"policies\",\n              }),\n            );\n          } catch (error) {\n            addError(t(\"deleteClientError\"), error);\n          }\n        }\n      },\n    });\n\n  const [toggleDeleteProfileDialog, DeleteProfileConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyProfileConfirm\", {\n      profileName: profileToDelete?.name,\n      policyName,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      if (profileToDelete?.name) {\n        currentPolicy?.profiles?.splice(profileToDelete.idx!, 1);\n        try {\n          await adminClient.clientPolicies.updatePolicy({\n            policies: policies,\n          });\n          addAlert(t(\"deleteClientPolicyProfileSuccess\"), AlertVariant.success);\n          navigate(toEditClientPolicy({ realm, policyName: formValues.name! }));\n        } catch (error) {\n          addError(t(\"deleteClientPolicyProfileError\"), error);\n        }\n      } else {\n        const updatedPolicies = policies?.filter(\n          (policy) => policy.name !== policyName,\n        );\n\n        try {\n          await adminClient.clientPolicies.updatePolicy({\n            policies: updatedPolicies,\n          });\n          addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n          navigate(\n            toClientPolicies({\n              realm,\n              tab: \"policies\",\n            }),\n          );\n        } catch (error) {\n          addError(t(\"deleteClientError\"), error);\n        }\n      }\n    },\n  });\n\n  const reset = () => {\n    if (currentPolicy?.name !== undefined) {\n      form.setValue(\"name\", currentPolicy.name);\n    }\n\n    if (currentPolicy?.description !== undefined) {\n      form.setValue(\"description\", currentPolicy.description);\n    }\n  };\n\n  const toggleModal = () => {\n    setProfilesModalOpen(!profilesModalOpen);\n  };\n\n  const addProfiles = async (profiles: string[]) => {\n    const createdPolicy = {\n      ...currentPolicy,\n      profiles: policyProfiles.concat(profiles),\n      conditions: currentPolicy?.conditions,\n    };\n\n    const index = policies?.findIndex(\n      (policy) => createdPolicy.name === policy.name,\n    );\n\n    if (index === undefined || index === -1) {\n      return;\n    }\n\n    const newPolicies = [\n      ...(policies || []).slice(0, index),\n      createdPolicy,\n      ...(policies || []).slice(index + 1),\n    ];\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: newPolicies,\n      });\n      setPolicies(newPolicies);\n      navigate(toEditClientPolicy({ realm, policyName: formValues.name! }));\n      addAlert(t(\"addClientProfileSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addClientProfileError\", error);\n    }\n  };\n\n  return (\n    <>\n      <DeleteConditionConfirm />\n      <DeleteProfileConfirm />\n      <AddClientProfileModal\n        onConfirm={(profiles: ClientProfileRepresentation[]) => {\n          addProfiles(profiles.map((item) => item.name!));\n        }}\n        allProfiles={policyProfiles}\n        open={profilesModalOpen}\n        toggleDialog={toggleModal}\n      />\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={form.control}\n        render={({ field }) => (\n          <ClientPoliciesHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realm}\n            save={save}\n          />\n        )}\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          onSubmit={handleSubmit(save)}\n          isHorizontal\n          role=\"view-realm\"\n          className=\"pf-u-mt-lg\"\n        >\n          <FormGroup\n            label={t(\"name\")}\n            fieldId=\"kc-client-profile-name\"\n            isRequired\n            helperTextInvalid={form.formState.errors.name?.message}\n            validated={\n              form.formState.errors.name\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-client-profile-name\"\n              data-testid=\"client-policy-name\"\n              validated={\n                form.formState.errors.name\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...form.register(\"name\", {\n                required: { value: true, message: t(\"required\") },\n                validate: (value) =>\n                  policies?.some((policy) => policy.name === value)\n                    ? t(\"createClientProfileNameHelperText\").toString()\n                    : true,\n              })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"description\")} fieldId=\"kc-description\">\n            <KeycloakTextArea\n              aria-label={t(\"description\")}\n              id=\"kc-client-policy-description\"\n              data-testid=\"client-policy-description\"\n              {...form.register(\"description\")}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"saveCreatePolicy\"\n              isDisabled={!form.formState.isValid}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              id=\"cancelCreatePolicy\"\n              variant=\"link\"\n              onClick={() =>\n                showAddConditionsAndProfilesForm || policyName\n                  ? reset()\n                  : navigate(\n                      toClientPolicies({\n                        realm,\n                        tab: \"policies\",\n                      }),\n                    )\n              }\n              data-testid=\"cancelCreatePolicy\"\n            >\n              {showAddConditionsAndProfilesForm ? t(\"reload\") : t(\"cancel\")}\n            </Button>\n          </ActionGroup>\n          {(showAddConditionsAndProfilesForm || form.formState.isSubmitted) && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text className=\"kc-conditions\" component={TextVariants.h1}>\n                    {t(\"conditions\")}\n                    <HelpItem\n                      helpText={t(\"conditionsHelp\")}\n                      fieldLabelId=\"conditions\"\n                    />\n                  </Text>\n                </FlexItem>\n                <FlexItem align={{ default: \"alignRight\" }}>\n                  <Button\n                    id=\"addCondition\"\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toNewClientPolicyCondition({\n                          realm,\n                          policyName: policyName!,\n                        })}\n                      ></Link>\n                    )}\n                    variant=\"link\"\n                    className=\"kc-addCondition\"\n                    data-testid=\"addCondition\"\n                    icon={<PlusCircleIcon />}\n                  >\n                    {t(\"addCondition\")}\n                  </Button>\n                </FlexItem>\n              </Flex>\n              {policyConditions.length > 0 ? (\n                <DataList aria-label={t(\"conditions\")} isCompact>\n                  {policyConditions.map((condition, idx) => (\n                    <DataListItem\n                      aria-labelledby=\"conditions-list-item\"\n                      key={`list-item-${idx}`}\n                      id={condition.condition}\n                      data-testid=\"conditions-list-item\"\n                    >\n                      <DataListItemRow data-testid=\"conditions-list-row\">\n                        <DataListItemCells\n                          dataListCells={[\n                            <DataListCell\n                              key={`name-${idx}`}\n                              data-testid=\"condition-type\"\n                            >\n                              {Object.keys(condition.configuration!).length !==\n                              0 ? (\n                                <Link\n                                  key={condition.condition}\n                                  data-testid={`${condition.condition}-condition-link`}\n                                  to={toEditClientPolicyCondition({\n                                    realm,\n                                    conditionName: condition.condition!,\n                                    policyName: policyName,\n                                  })}\n                                  className=\"kc-condition-link\"\n                                >\n                                  {condition.condition}\n                                </Link>\n                              ) : (\n                                condition.condition\n                              )}\n                              {conditionTypes?.map(\n                                (type) =>\n                                  type.id === condition.condition && (\n                                    <>\n                                      <HelpItem\n                                        helpText={type.helpText}\n                                        fieldLabelId={condition.condition}\n                                      />\n                                      <Button\n                                        variant=\"link\"\n                                        aria-label=\"remove-condition\"\n                                        isInline\n                                        icon={\n                                          <TrashIcon\n                                            className=\"kc-conditionType-trash-icon\"\n                                            data-testid={`delete-${condition.condition}-condition`}\n                                            onClick={() => {\n                                              toggleDeleteConditionDialog();\n                                              setConditionToDelete({\n                                                idx: idx,\n                                                name: type.id!,\n                                              });\n                                            }}\n                                          />\n                                        }\n                                      ></Button>\n                                    </>\n                                  ),\n                              )}\n                            </DataListCell>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              ) : (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyConditions\"\n                    component={TextVariants.h2}\n                  >\n                    {t(\"emptyConditions\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n          {(showAddConditionsAndProfilesForm || form.formState.isSubmitted) && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text\n                    className=\"kc-client-profiles\"\n                    component={TextVariants.h1}\n                  >\n                    {t(\"clientProfiles\")}\n                    <HelpItem\n                      helpText={t(\"clientProfilesHelp\")}\n                      fieldLabelId=\"clientProfiles\"\n                    />\n                  </Text>\n                </FlexItem>\n                <FlexItem align={{ default: \"alignRight\" }}>\n                  <Button\n                    id=\"addClientProfile\"\n                    variant=\"link\"\n                    className=\"kc-addClientProfile\"\n                    data-testid=\"addClientProfile\"\n                    icon={<PlusCircleIcon />}\n                    onClick={toggleModal}\n                  >\n                    {t(\"addClientProfile\")}\n                  </Button>\n                </FlexItem>\n              </Flex>\n              {policyProfiles.length > 0 ? (\n                <DataList aria-label={t(\"profiles\")} isCompact>\n                  {policyProfiles.map((profile, idx) => (\n                    <DataListItem\n                      aria-labelledby={`${profile}-profile-list-item`}\n                      key={profile}\n                      id={`${profile}-profile-list-item`}\n                      data-testid={\"profile-list-item\"}\n                    >\n                      <DataListItemRow data-testid=\"profile-list-row\">\n                        <DataListItemCells\n                          dataListCells={[\n                            <DataListCell key=\"name\" data-testid=\"profile-name\">\n                              {profile && (\n                                <Link\n                                  key={profile}\n                                  data-testid=\"profile-name-link\"\n                                  to={toClientProfile({\n                                    realm,\n                                    profileName: profile,\n                                  })}\n                                  className=\"kc-profile-link\"\n                                >\n                                  {profile}\n                                </Link>\n                              )}\n                              {policyProfiles\n                                .filter((type) => type === profile)\n                                .map((type) => (\n                                  <>\n                                    <HelpItem\n                                      helpText={\n                                        clientProfiles.find(\n                                          (profile) => type === profile.name,\n                                        )?.description\n                                      }\n                                      fieldLabelId={profile}\n                                    />\n                                    <Button\n                                      variant=\"link\"\n                                      aria-label=\"remove-client-profile\"\n                                      isInline\n                                      icon={\n                                        <TrashIcon\n                                          className=\"kc-conditionType-trash-icon\"\n                                          data-testid=\"deleteClientProfileDropdown\"\n                                          onClick={() => {\n                                            toggleDeleteProfileDialog();\n                                            setProfileToDelete({\n                                              idx: idx,\n                                              name: type!,\n                                            });\n                                          }}\n                                        />\n                                      }\n                                    ></Button>\n                                  </>\n                                ))}\n                            </DataListCell>,\n                          ]}\n                        />\n                      </DataListItemRow>\n                    </DataListItem>\n                  ))}\n                </DataList>\n              ) : (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyClientProfiles\"\n                    component={TextVariants.h2}\n                  >\n                    {t(\"emptyProfiles\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["AliasRenderer","name","global","t","useTranslation","jsxs","Fragment","jsx","Label","AddClientProfileModal","props","selectedRows","setSelectedRows","useState","tableProfiles","setTableProfiles","useFetch","adminClient","allProfiles","globalProfiles","profiles","loader","item","Modal","ModalVariant","Button","KeycloakDataTable","rows","ListEmptyState","KeycloakSpinner","defaultValues","NewClientPolicyForm","realm","useRealm","addAlert","addError","useAlerts","policies","setPolicies","clientProfiles","setClientProfiles","currentPolicy","setCurrentPolicy","showAddConditionsAndProfilesForm","setShowAddConditionsAndProfilesForm","conditionToDelete","setConditionToDelete","profilesModalOpen","setProfilesModalOpen","profileToDelete","setProfileToDelete","policyName","useParams","navigate","useNavigate","form","useForm","handleSubmit","formValues","ClientPoliciesHeader","save","onChange","value","toggleDisableDialog","DisableConfirm","useConfirmDialog","DeleteConfirm","ViewHeader","DropdownItem","toggleDeleteDialog","allClientProfiles","setupForm","policy","policyConditions","policyProfiles","conditionTypes","useServerInfo","createdForm","createdPolicy","getAllPolicies","AlertVariant","toEditClientPolicy","error","ButtonVariant","updatedPolicies","toClientPolicies","toggleDeleteConditionDialog","DeleteConditionConfirm","toggleDeleteProfileDialog","DeleteProfileConfirm","reset","toggleModal","addProfiles","index","newPolicies","Controller","field","PageSection","FormAccess","FormGroup","ValidatedOptions","KeycloakTextInput","KeycloakTextArea","ActionGroup","Flex","FlexItem","Text","TextVariants","HelpItem","Link","toNewClientPolicyCondition","PlusCircleIcon","DataList","condition","idx","DataListItem","DataListItemRow","DataListItemCells","DataListCell","toEditClientPolicyCondition","type","TrashIcon","Divider","profile","toClientProfile"],"mappings":"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"}