{"version":3,"file":"UserFederationLdapForm-CxQ1tgUN.js","sources":["../../src/user-federation/ldap/LdapSettingsConnection.tsx","../../src/user-federation/ldap/LdapSettingsAdvanced.tsx","../../src/user-federation/ldap/LdapSettingsGeneral.tsx","../../src/user-federation/ldap/LdapSettingsKerberosIntegration.tsx","../../src/user-federation/ldap/LdapSettingsSearching.tsx","../../src/user-federation/ldap/LdapSettingsSynchronization.tsx","../../src/user-federation/UserFederationLdapForm.tsx"],"sourcesContent":["import type TestLdapConnectionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/testLdapConnection\";\nimport {\n  AlertVariant,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { get, isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport type LdapSettingsConnectionProps = {\n  form: UseFormReturn;\n  id?: string;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst testLdapProperties: Array<keyof TestLdapConnectionRepresentation> = [\n  \"connectionUrl\",\n  \"bindDn\",\n  \"bindCredential\",\n  \"useTruststoreSpi\",\n  \"connectionTimeout\",\n  \"startTls\",\n  \"authType\",\n];\n\ntype TestTypes = \"testConnection\" | \"testAuthentication\";\n\nexport const convertFormToSettings = (form: UseFormReturn) => {\n  const settings: TestLdapConnectionRepresentation = {};\n\n  testLdapProperties.forEach((key) => {\n    const value = get(form.getValues(), `config.${key}`);\n    settings[key] = Array.isArray(value) ? value[0] : \"\";\n  });\n\n  return settings;\n};\n\nexport const LdapSettingsConnection = ({\n  form,\n  id,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsConnectionProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const edit = !!id;\n\n  const testLdap = async (testType: TestTypes) => {\n    try {\n      const settings = convertFormToSettings(form);\n      await adminClient.realms.testLDAPConnection(\n        { realm },\n        { ...settings, action: testType, componentId: id },\n      );\n      addAlert(t(\"testSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"testError\", error);\n    }\n  };\n\n  const [isTruststoreSpiDropdownOpen, setIsTruststoreSpiDropdownOpen] =\n    useState(false);\n\n  const [isBindTypeDropdownOpen, setIsBindTypeDropdownOpen] = useState(false);\n\n  const ldapBindType = useWatch({\n    control: form.control,\n    name: \"config.authType\",\n    defaultValue: [\"simple\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"connectionAndAuthenticationSettings\")}\n          description={t(\"ldapConnectionAndAuthorizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"connectionURL\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"consoleDisplayConnectionUrlHelp\")}\n              fieldLabelId=\"connectionURL\"\n            />\n          }\n          fieldId=\"kc-ui-connection-url\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.connectionUrl?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.connectionUrl?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            type=\"url\"\n            id=\"kc-ui-connection-url\"\n            data-testid=\"ldap-connection-url\"\n            validated={\n              (form.formState.errors.config as any)?.connectionUrl?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.connectionUrl.0\", {\n              required: {\n                value: true,\n                message: t(\"validateConnectionUrl\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"enableStartTls\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"enableStartTlsHelp\")}\n              fieldLabelId=\"enableStartTls\"\n            />\n          }\n          fieldId=\"kc-enable-start-tls\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.startTls\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-start-tls\"}\n                data-testid=\"enable-start-tls\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"enableStartTls\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"useTruststoreSpi\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"useTruststoreSpiHelp\")}\n              fieldLabelId=\"useTruststoreSpi\"\n            />\n          }\n          fieldId=\"kc-use-truststore-spi\"\n        >\n          <Controller\n            name=\"config.useTruststoreSpi[0]\"\n            control={form.control}\n            defaultValue=\"always\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-use-truststore-spi\"\n                onToggle={() =>\n                  setIsTruststoreSpiDropdownOpen(!isTruststoreSpiDropdownOpen)\n                }\n                isOpen={isTruststoreSpiDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsTruststoreSpiDropdownOpen(false);\n                }}\n                selections={field.value}\n              >\n                <SelectOption value=\"always\">{t(\"always\")}</SelectOption>\n                <SelectOption value=\"never\">{t(\"never\")}</SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionPooling\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"connectionPoolingHelp\")}\n              fieldLabelId=\"connectionPooling\"\n            />\n          }\n          fieldId=\"kc-connection-pooling\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.connectionPooling\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-connection-pooling\"}\n                data-testid=\"connection-pooling\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"connectionPooling\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"connectionTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"connectionTimeoutHelp\")}\n              fieldLabelId=\"consoleTimeout\"\n            />\n          }\n          fieldId=\"kc-ui-connection-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-ui-connection-timeout\"\n            data-testid=\"connection-timeout\"\n            {...form.register(\"config.connectionTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup fieldId=\"kc-test-connection-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-connection-button\"\n            data-testid=\"test-connection-button\"\n            onClick={() => testLdap(\"testConnection\")}\n          >\n            {t(\"testConnection\")}\n          </Button>\n        </FormGroup>\n        <FormGroup\n          label={t(\"bindType\")}\n          labelIcon={\n            <HelpItem helpText={t(\"bindTypeHelp\")} fieldLabelId=\"bindType\" />\n          }\n          fieldId=\"kc-bind-type\"\n          isRequired\n        >\n          <Controller\n            name=\"config.authType[0]\"\n            defaultValue=\"simple\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-bind-type\"\n                required\n                onToggle={() =>\n                  setIsBindTypeDropdownOpen(!isBindTypeDropdownOpen)\n                }\n                isOpen={isBindTypeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsBindTypeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                data-testid=\"ldap-bind-type\"\n                aria-label={t(\"selectBindType\")}\n              >\n                <SelectOption value=\"simple\" />\n                <SelectOption value=\"none\" />\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {isEqual(ldapBindType, [\"simple\"]) && (\n          <>\n            <FormGroup\n              label={t(\"bindDn\")}\n              labelIcon={\n                <HelpItem helpText={t(\"bindDnHelp\")} fieldLabelId=\"bindDn\" />\n              }\n              fieldId=\"kc-ui-bind-dn\"\n              helperTextInvalid={t(\"validateBindDn\")}\n              validated={\n                (form.formState.errors.config as any)?.bindDn\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <KeycloakTextInput\n                type=\"text\"\n                id=\"kc-ui-bind-dn\"\n                data-testid=\"ldap-bind-dn\"\n                validated={\n                  (form.formState.errors.config as any)?.bindDn\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindDn.0\", { required: true })}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"bindCredentials\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"bindCredentialsHelp\")}\n                  fieldLabelId=\"bindCredentials\"\n                />\n              }\n              fieldId=\"kc-ui-bind-credentials\"\n              helperTextInvalid={t(\"validateBindCredentials\")}\n              validated={\n                (form.formState.errors.config as any)?.bindCredential\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              isRequired\n            >\n              <PasswordInput\n                hasReveal={!edit}\n                isRequired\n                id=\"kc-ui-bind-credentials\"\n                data-testid=\"ldap-bind-credentials\"\n                validated={\n                  (form.formState.errors.config as any)?.bindCredential\n                    ? ValidatedOptions.error\n                    : ValidatedOptions.default\n                }\n                {...form.register(\"config.bindCredential.0\", {\n                  required: true,\n                })}\n              />\n            </FormGroup>\n          </>\n        )}\n        <FormGroup fieldId=\"kc-test-auth-button\">\n          <Button\n            variant=\"secondary\"\n            id=\"kc-test-auth-button\"\n            data-testid=\"test-auth-button\"\n            onClick={() => testLdap(\"testAuthentication\")}\n          >\n            {t(\"testAuthentication\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormToSettings } from \"./LdapSettingsConnection\";\n\nexport type LdapSettingsAdvancedProps = {\n  id?: string;\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nconst PASSWORD_MODIFY_OID = \"1.3.6.1.4.1.4203.1.11.1\";\n\nexport const LdapSettingsAdvanced = ({\n  id,\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsAdvancedProps) => {\n  const { t } = useTranslation();\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const testLdap = async () => {\n    if (!(await form.trigger())) return;\n    try {\n      const settings = convertFormToSettings(form);\n      const ldapOids = await adminClient.realms.ldapServerCapabilities(\n        { realm },\n        { ...settings, componentId: id },\n      );\n      addAlert(t(\"testSuccess\"));\n      const passwordModifyOid = ldapOids.filter(\n        (id: { oid: string }) => id.oid === PASSWORD_MODIFY_OID,\n      );\n      form.setValue(\"config.usePasswordModifyExtendedOp\", [\n        (passwordModifyOid.length > 0).toString(),\n      ]);\n    } catch (error) {\n      addError(\"testError\", error);\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"advancedSettings\")}\n          description={t(\"ldapAdvancedSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"enableLdapv3Password\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"enableLdapv3PasswordHelp\")}\n              fieldLabelId=\"enableLdapv3Password\"\n            />\n          }\n          fieldId=\"kc-enable-ldapv3-password\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.usePasswordModifyExtendedOp\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-enable-ldapv3-password\"}\n                data-testid=\"ldapv3-password\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"enableLdapv3Password\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"validatePasswordPolicy\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"validatePasswordPolicyHelp\")}\n              fieldLabelId=\"validatePasswordPolicy\"\n            />\n          }\n          fieldId=\"kc-validate-password-policy\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.validatePasswordPolicy\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-validate-password-policy\"}\n                data-testid=\"password-policy\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"validatePasswordPolicy\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"trustEmail\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"trustEmailHelp\")}\n              fieldLabelId=\"trustEmail\"\n            />\n          }\n          fieldId=\"kc-trust-email\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.trustEmail\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-trust-email\"}\n                data-testid=\"trust-email\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"trustEmail\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup fieldId=\"query-extensions\">\n          <Button\n            variant=\"secondary\"\n            id=\"query-extensions\"\n            data-testid=\"query-extensions\"\n            onClick={testLdap}\n          >\n            {t(\"queryExtensions\")}\n          </Button>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\n\nexport type LdapSettingsGeneralProps = {\n  form: UseFormReturn<ComponentRepresentation>;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n  vendorEdit?: boolean;\n};\n\nexport const LdapSettingsGeneral = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n  vendorEdit = false,\n}: LdapSettingsGeneralProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    [],\n  );\n  const [isVendorDropdownOpen, setIsVendorDropdownOpen] = useState(false);\n\n  const setVendorDefaultValues = () => {\n    switch (form.getValues(\"config.vendor[0]\")) {\n      case \"ad\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"cn\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"objectGUID\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"userPrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"person, organizationalPerson, user\",\n        );\n        break;\n      case \"rhds\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"nsuniqueid\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krbPrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"tivoli\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"uniqueidentifier\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"edirectory\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"guid\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      case \"other\":\n        form.setValue(\"config.usernameLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.rdnLDAPAttribute[0]\", \"uid\");\n        form.setValue(\"config.uuidLDAPAttribute[0]\", \"entryUUID\");\n        form.setValue(\"config.krbPrincipalAttribute[0]\", \"krb5PrincipalName\");\n        form.setValue(\n          \"config.userObjectClasses[0]\",\n          \"inetOrgPerson, organizationalPerson\",\n        );\n        break;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"generalOptions\")}\n          description={t(\"ldapGeneralOptionsSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"uiDisplayNameHelp\")}\n              fieldLabelId=\"uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={form.formState.errors.name?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-id\"\n            defaultValue=\"ldap\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-provider-type\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-display-name\"\n            defaultValue=\"ldap\"\n            data-testid=\"ldap-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: `${t(\"validateName\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"vendor\")}\n          labelIcon={\n            <HelpItem helpText={t(\"vendorHelp\")} fieldLabelId=\"vendor\" />\n          }\n          fieldId=\"kc-vendor\"\n          isRequired\n        >\n          <Controller\n            name=\"config.vendor[0]\"\n            defaultValue=\"ad\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                isDisabled={!!vendorEdit}\n                toggleId=\"kc-vendor\"\n                required\n                onToggle={() => setIsVendorDropdownOpen(!isVendorDropdownOpen)}\n                isOpen={isVendorDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsVendorDropdownOpen(false);\n                  setVendorDefaultValues();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"selectVendor\")}\n              >\n                <SelectOption key={0} value=\"ad\" isPlaceholder>\n                  Active Directory\n                </SelectOption>\n                <SelectOption key={1} value=\"rhds\">\n                  Red Hat Directory Server\n                </SelectOption>\n                <SelectOption key={2} value=\"tivoli\">\n                  Tivoli\n                </SelectOption>\n                <SelectOption key={3} value=\"edirectory\">\n                  Novell eDirectory\n                </SelectOption>\n                <SelectOption key={4} value=\"other\">\n                  Other\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsKerberosIntegrationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsKerberosIntegration = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsKerberosIntegrationProps) => {\n  const { t } = useTranslation();\n\n  const allowKerberosAuth: [string] = useWatch({\n    control: form.control,\n    name: \"config.allowKerberosAuthentication\",\n    defaultValue: [\"false\"],\n  });\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"kerberosIntegration\")}\n          description={t(\"ldapKerberosSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"allowKerberosAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"allowKerberosAuthenticationHelp\")}\n              fieldLabelId=\"allowKerberosAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-kerberos-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowKerberosAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-allow-kerberos-authentication\"\n                data-testid=\"allow-kerberos-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"allowKerberosAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n\n        {allowKerberosAuth[0] === \"true\" && (\n          <>\n            <FormGroup\n              label={t(\"kerberosRealm\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"kerberosRealmHelp\")}\n                  fieldLabelId=\"kerberosRealm\"\n                />\n              }\n              fieldId=\"kc-kerberos-realm\"\n              isRequired\n              validated={\n                (form.formState.errors.config as any)?.kerberosRealm?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                (form.formState.errors.config as any)?.kerberosRealm?.[0]\n                  .message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-kerberos-realm\"\n                data-testid=\"kerberos-realm\"\n                validated={\n                  (form.formState.errors.config as any)?.kerberosRealm?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.kerberosRealm.0\", {\n                  required: {\n                    value: true,\n                    message: t(\"validateRealm\").toString(),\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"serverPrincipal\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"serverPrincipalHelp\")}\n                  fieldLabelId=\"serverPrincipal\"\n                />\n              }\n              fieldId=\"kc-server-principal\"\n              isRequired\n              validated={\n                (form.formState.errors.config as any)?.serverPrincipal?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                (form.formState.errors.config as any)?.serverPrincipal?.[0]\n                  .message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-server-principal\"\n                data-testid=\"kerberos-principal\"\n                validated={\n                  (form.formState.errors.config as any)?.serverPrincipal?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.serverPrincipal.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateServerPrincipal\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"keyTab\")}\n              labelIcon={\n                <HelpItem helpText={t(\"keyTabHelp\")} fieldLabelId=\"keyTab\" />\n              }\n              fieldId=\"kc-key-tab\"\n              isRequired\n              validated={\n                (form.formState.errors.config as any)?.keyTab?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                (form.formState.errors.config as any)?.keyTab?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                isRequired\n                id=\"kc-key-tab\"\n                data-testid=\"kerberos-keytab\"\n                validated={\n                  (form.formState.errors.config as any)?.keyTab?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.keyTab.0\", {\n                  required: {\n                    value: true,\n                    message: `${t(\"validateKeyTab\")}`,\n                  },\n                })}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"krbPrincipalAttribute\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"krbPrincipalAttributeHelp\")}\n                  fieldLabelId=\"krbPrincipalAttribute\"\n                />\n              }\n              fieldId=\"kc-krb-principal-attribute\"\n              validated={\n                (form.formState.errors.config as any)\n                  ?.krbPrincipalAttribute?.[0]\n                  ? \"error\"\n                  : \"default\"\n              }\n              helperTextInvalid={\n                (form.formState.errors.config as any)\n                  ?.krbPrincipalAttribute?.[0].message\n              }\n            >\n              <KeycloakTextInput\n                id=\"kc-krb-principal-attribute\"\n                data-testid=\"krb-principal-attribute\"\n                validated={\n                  (form.formState.errors.config as any)\n                    ?.krbPrincipalAttribute?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n                {...form.register(\"config.krbPrincipalAttribute.0\")}\n              />\n            </FormGroup>\n\n            <FormGroup\n              label={t(\"debug\")}\n              labelIcon={\n                <HelpItem helpText={t(\"debugHelp\")} fieldLabelId=\"debug\" />\n              }\n              fieldId=\"kc-debug\"\n              hasNoPaddingTop\n            >\n              {\" \"}\n              <Controller\n                name=\"config.debug\"\n                defaultValue={[\"false\"]}\n                control={form.control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"kc-debug\"\n                    data-testid=\"debug\"\n                    isDisabled={false}\n                    onChange={(value) => field.onChange([`${value}`])}\n                    isChecked={field.value[0] === \"true\"}\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    aria-label={t(\"debug\")}\n                  />\n                )}\n              ></Controller>\n            </FormGroup>\n          </>\n        )}\n        <FormGroup\n          label={t(\"useKerberosForPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"useKerberosForPasswordAuthenticationHelp\")}\n              fieldLabelId=\"useKerberosForPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-use-kerberos-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.useKerberosForPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-use-kerberos-password-authentication\"\n                data-testid=\"use-kerberos-pw-auth\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"useKerberosForPasswordAuthentication\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSearchingProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSearching = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSearchingProps) => {\n  const { t } = useTranslation();\n\n  const [isSearchScopeDropdownOpen, setIsSearchScopeDropdownOpen] =\n    useState(false);\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n  const [isReferralDropdownOpen, setIsReferralDropdownOpen] = useState(false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"ldapSearchingAndUpdatingSettings\")}\n          description={t(\"ldapSearchingAndUpdatingSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"editMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"editModeLdapHelp\")}\n              fieldLabelId=\"editMode\"\n            />\n          }\n          fieldId=\"kc-edit-mode\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.editMode?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.editMode?.[0].message\n          }\n        >\n          <Controller\n            name=\"config.editMode[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            rules={{\n              required: { value: true, message: t(\"validateEditMode\") },\n            }}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-edit-mode\"\n                required\n                onToggle={() =>\n                  setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                }\n                isOpen={isEditModeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setIsEditModeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"selectEditMode\")}\n                validated={\n                  (form.formState.errors.config as any)?.editMode?.[0]\n                    ? \"error\"\n                    : \"default\"\n                }\n              >\n                <SelectOption\n                  aria-label={t(\"emptySelection\")}\n                  value=\"\"\n                  isPlaceholder\n                />\n                <SelectOption\n                  aria-label={t(\"readOnlySelection\")}\n                  value=\"READ_ONLY\"\n                />\n                <SelectOption\n                  aria-label={t(\"writableSelection\")}\n                  value=\"WRITABLE\"\n                />\n                <SelectOption\n                  aria-label={t(\"unsyncedSelection\")}\n                  value=\"UNSYNCED\"\n                />\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usersDN\")}\n          labelIcon={\n            <HelpItem helpText={t(\"usersDNHelp\")} fieldLabelId=\"usersDn\" />\n          }\n          fieldId=\"kc-ui-users-dn\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.usersDn?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.usersDn?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"\"\n            id=\"kc-ui-users-dn\"\n            data-testid=\"ldap-users-dn\"\n            validated={\n              (form.formState.errors.config as any)?.usersDn?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.usersDn.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUsersDn\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"usernameLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"usernameLdapAttributeHelp\")}\n              fieldLabelId=\"usernameLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-username-ldap-attribute\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.usernameLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.usernameLDAPAttribute?.[0]\n              .message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-username-ldap-attribute\"\n            data-testid=\"ldap-username-attribute\"\n            validated={\n              (form.formState.errors.config as any)?.usernameLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.usernameLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUsernameLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"rdnLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"rdnLdapAttributeHelp\")}\n              fieldLabelId=\"rdnLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-rdn-ldap-attribute\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.rdnLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.rdnLDAPAttribute?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"cn\"\n            id=\"kc-rdn-ldap-attribute\"\n            data-testid=\"ldap-rdn-attribute\"\n            validated={\n              (form.formState.errors.config as any)?.rdnLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.rdnLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateRdnLdapAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"uuidLdapAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"uuidLdapAttributeHelp\")}\n              fieldLabelId=\"uuidLdapAttribute\"\n            />\n          }\n          fieldId=\"kc-uuid-ldap-attribute\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.uuidLDAPAttribute?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.uuidLDAPAttribute?.[0]\n              .message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"objectGUID\"\n            id=\"kc-uuid-ldap-attribute\"\n            data-testid=\"ldap-uuid-attribute\"\n            validated={\n              (form.formState.errors.config as any)?.uuidLDAPAttribute?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.uuidLDAPAttribute.0\", {\n              required: {\n                value: true,\n                message: `${t(\"validateUuidLDAPAttribute\")}`,\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userObjectClasses\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"userObjectClassesHelp\")}\n              fieldLabelId=\"userObjectClasses\"\n            />\n          }\n          fieldId=\"kc-user-object-classes\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.userObjectClasses?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.userObjectClasses?.[0]\n              .message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            defaultValue=\"person, organizationalPerson, user\"\n            id=\"kc-user-object-classes\"\n            data-testid=\"ldap-user-object-classes\"\n            validated={\n              (form.formState.errors.config as any)?.userObjectClasses?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.userObjectClasses.0\", {\n              required: {\n                value: true,\n                message: t(\"validateUserObjectClasses\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"userLdapFilter\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"userLdapFilterHelp\")}\n              fieldLabelId=\"userLdapFilter\"\n            />\n          }\n          fieldId=\"kc-user-ldap-filter\"\n          validated={\n            (form.formState.errors.config as any)?.customUserSearchFilter?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.customUserSearchFilter?.[0]\n              .message\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-user-ldap-filter\"\n            data-testid=\"user-ldap-filter\"\n            validated={\n              (form.formState.errors.config as any)?.customUserSearchFilter?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.customUserSearchFilter.0\", {\n              pattern: {\n                value: /(\\(.*\\))$/,\n                message: t(\"validateCustomUserSearchFilter\").toString(),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"searchScope\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"searchScopeHelp\")}\n              fieldLabelId=\"searchScope\"\n            />\n          }\n          fieldId=\"kc-search-scope\"\n        >\n          <Controller\n            name=\"config.searchScope[0]\"\n            defaultValue=\"\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-search-scope\"\n                required\n                onToggle={() =>\n                  setIsSearchScopeDropdownOpen(!isSearchScopeDropdownOpen)\n                }\n                isOpen={isSearchScopeDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsSearchScopeDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption key={0} value=\"1\" isPlaceholder>\n                  {t(\"oneLevel\")}\n                </SelectOption>\n                <SelectOption key={1} value=\"2\">\n                  {t(\"subtree\")}\n                </SelectOption>\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"readTimeout\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"readTimeoutHelp\")}\n              fieldLabelId=\"readTimeout\"\n            />\n          }\n          fieldId=\"kc-read-timeout\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-read-timeout\"\n            data-testid=\"ldap-read-timeout\"\n            {...form.register(\"config.readTimeout.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"pagination\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"paginationHelp\")}\n              fieldLabelId=\"pagination\"\n            />\n          }\n          fieldId=\"kc-ui-pagination\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.pagination\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-ui-pagination\"\n                data-testid=\"ui-pagination\"\n                isDisabled={false}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"pagination\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          label={t(\"referral\")}\n          labelIcon={\n            <HelpItem helpText={t(\"referralHelp\")} fieldLabelId=\"referral\" />\n          }\n          fieldId=\"kc-referral\"\n        >\n          <Controller\n            name=\"config.referral.0\"\n            defaultValue=\"\"\n            control={form.control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-referral\"\n                onToggle={() =>\n                  setIsReferralDropdownOpen(!isReferralDropdownOpen)\n                }\n                isOpen={isReferralDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setIsReferralDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n              >\n                <SelectOption value=\"ignore\" isPlaceholder />\n                <SelectOption value=\"follow\" />\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\n\nexport type LdapSettingsSynchronizationProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const LdapSettingsSynchronization = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: LdapSettingsSynchronizationProps) => {\n  const { t } = useTranslation();\n\n  const watchPeriodicSync = form.watch(\"config.periodicFullSync\", false);\n  const watchChangedSync = form.watch(\"config.periodicChangedUsersSync\", false);\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"synchronizationSettings\")}\n          description={t(\"ldapSynchronizationSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"importUsers\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importUsersHelp\")}\n              fieldLabelId=\"importUsers\"\n            />\n          }\n          fieldId=\"kc-import-users\"\n        >\n          <Controller\n            name=\"config.importEnabled\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-import-users\"\n                data-testid=\"import-users\"\n                name=\"importEnabled\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                isDisabled={false}\n                aria-label={t(\"importUsers\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"syncRegistrations\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"syncRegistrations\")}\n              fieldLabelId=\"syncRegistrations\"\n            />\n          }\n          fieldId=\"syncRegistrations\"\n        >\n          <Controller\n            name=\"config.syncRegistrations\"\n            defaultValue={[\"true\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"syncRegistrations\"\n                data-testid=\"syncRegistrations\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value[0] === \"true\"}\n                aria-label={t(\"syncRegistrations\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"batchSize\")}\n          labelIcon={\n            <HelpItem helpText={t(\"batchSizeHelp\")} fieldLabelId=\"batchSize\" />\n          }\n          fieldId=\"kc-batch-size\"\n        >\n          <KeycloakTextInput\n            type=\"number\"\n            min={0}\n            id=\"kc-batch-size\"\n            data-testid=\"batch-size\"\n            {...form.register(\"config.batchSizeForSync.0\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"periodicFullSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"periodicFullSyncHelp\")}\n              fieldLabelId=\"periodicFullSync\"\n            />\n          }\n          fieldId=\"kc-periodic-full-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicFullSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-full-sync\"\n                data-testid=\"periodic-full-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"periodicFullSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchPeriodicSync && (\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"fullSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"fullSyncPeriodHelp\")}\n                fieldLabelId=\"fullSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-full-sync-period\"\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={604800}\n              id=\"kc-full-sync-period\"\n              data-testid=\"full-sync-period\"\n              {...form.register(\"config.fullSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"periodicChangedUsersSync\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"periodicChangedUsersSyncHelp\")}\n              fieldLabelId=\"periodicChangedUsersSync\"\n            />\n          }\n          fieldId=\"kc-periodic-changed-users-sync\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.periodicChangedUsersSync\"\n            defaultValue={false}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-periodic-changed-users-sync\"\n                data-testid=\"periodic-changed-users-sync\"\n                isDisabled={false}\n                onChange={(value) => field.onChange(value)}\n                isChecked={field.value === true}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"periodicChangedUsersSync\")}\n              />\n            )}\n          ></Controller>\n        </FormGroup>\n        {watchChangedSync && (\n          <FormGroup\n            label={t(\"changedUsersSyncPeriod\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"changedUsersSyncHelp\")}\n                fieldLabelId=\"changedUsersSyncPeriod\"\n              />\n            }\n            fieldId=\"kc-changed-users-sync-period\"\n            hasNoPaddingTop\n          >\n            <KeycloakTextInput\n              type=\"number\"\n              min={-1}\n              defaultValue={86400}\n              id=\"kc-changed-users-sync-period\"\n              data-testid=\"changed-users-sync-period\"\n              {...form.register(\"config.changedSyncPeriod.0\")}\n            />\n          </FormGroup>\n        )}\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Button, Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ScrollForm } from \"ui-shared\";\n\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { LdapSettingsAdvanced } from \"./ldap/LdapSettingsAdvanced\";\nimport { LdapSettingsConnection } from \"./ldap/LdapSettingsConnection\";\nimport { LdapSettingsGeneral } from \"./ldap/LdapSettingsGeneral\";\nimport { LdapSettingsKerberosIntegration } from \"./ldap/LdapSettingsKerberosIntegration\";\nimport { LdapSettingsSearching } from \"./ldap/LdapSettingsSearching\";\nimport { LdapSettingsSynchronization } from \"./ldap/LdapSettingsSynchronization\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\n\nexport type LdapComponentRepresentation = ComponentRepresentation & {\n  config?: {\n    periodicChangedUsersSync?: boolean;\n    periodicFullSync?: boolean;\n  };\n};\n\nexport type UserFederationLdapFormProps = {\n  id?: string;\n  onSubmit: (formData: LdapComponentRepresentation) => void;\n};\n\nexport const UserFederationLdapForm = ({\n  id,\n  onSubmit,\n}: UserFederationLdapFormProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<LdapComponentRepresentation>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  return (\n    <>\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"generalOptions\"),\n            panel: <LdapSettingsGeneral form={form} vendorEdit={!!id} />,\n          },\n          {\n            title: t(\"connectionAndAuthenticationSettings\"),\n            panel: <LdapSettingsConnection form={form} id={id} />,\n          },\n          {\n            title: t(\"ldapSearchingAndUpdatingSettings\"),\n            panel: <LdapSettingsSearching form={form} />,\n          },\n          {\n            title: t(\"synchronizationSettings\"),\n            panel: <LdapSettingsSynchronization form={form} />,\n          },\n          {\n            title: t(\"kerberosIntegration\"),\n            panel: <LdapSettingsKerberosIntegration form={form} />,\n            isHidden: !isFeatureEnabled(Feature.Kerberos),\n          },\n          { title: t(\"cacheSettings\"), panel: <SettingsCache form={form} /> },\n          {\n            title: t(\"advancedSettings\"),\n            panel: <LdapSettingsAdvanced form={form} id={id} />,\n          },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(onSubmit)}>\n        <FixedButtonsGroup\n          name=\"ldap\"\n          isActive={form.formState.isDirty}\n          isSubmit\n        >\n          <Button\n            variant=\"link\"\n            onClick={() => navigate(toUserFederation({ realm }))}\n            data-testid=\"ldap-cancel\"\n          >\n            {t(\"cancel\")}\n          </Button>\n        </FixedButtonsGroup>\n      </Form>\n    </>\n  );\n};\n\nexport function serializeFormData(\n  formData: LdapComponentRepresentation,\n): LdapComponentRepresentation {\n  const { config } = formData;\n\n  if (config?.periodicChangedUsersSync !== undefined) {\n    if (config.periodicChangedUsersSync === false) {\n      config.changedSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicChangedUsersSync;\n  }\n\n  if (config?.periodicFullSync !== undefined) {\n    if (config.periodicFullSync === false) {\n      config.fullSyncPeriod = [\"-1\"];\n    }\n    delete config.periodicFullSync;\n  }\n\n  return formData;\n}\n"],"names":["testLdapProperties","convertFormToSettings","form","settings","key","value","get","LdapSettingsConnection","id","showSectionHeading","showSectionDescription","t","useTranslation","realm","useRealm","addAlert","addError","useAlerts","edit","testLdap","testType","adminClient","AlertVariant","error","isTruststoreSpiDropdownOpen","setIsTruststoreSpiDropdownOpen","useState","isBindTypeDropdownOpen","setIsBindTypeDropdownOpen","ldapBindType","useWatch","jsxs","Fragment","jsx","WizardSectionHeader","FormAccess","FormGroup","HelpItem","KeycloakTextInput","Controller","field","Switch","Select","_","SelectOption","Button","SelectVariant","isEqual","ValidatedOptions","PasswordInput","PASSWORD_MODIFY_OID","LdapSettingsAdvanced","ldapOids","passwordModifyOid","LdapSettingsGeneral","vendorEdit","useFetch","result","isVendorDropdownOpen","setIsVendorDropdownOpen","setVendorDefaultValues","LdapSettingsKerberosIntegration","allowKerberosAuth","LdapSettingsSearching","isSearchScopeDropdownOpen","setIsSearchScopeDropdownOpen","isEditModeDropdownOpen","setIsEditModeDropdownOpen","isReferralDropdownOpen","setIsReferralDropdownOpen","LdapSettingsSynchronization","watchPeriodicSync","watchChangedSync","UserFederationLdapForm","onSubmit","useFormContext","navigate","useNavigate","isFeatureEnabled","useIsFeatureEnabled","ScrollForm","Feature","SettingsCache","Form","FixedButtonsGroup","toUserFederation","serializeFormData","formData","config"],"mappings":"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"}