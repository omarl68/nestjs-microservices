{"version":3,"file":"RealmSettingsSection-ToDhfN3H.js","sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/flatten.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_flatRest.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/isPlainObject.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_parent.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseUnset.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_customOmitClone.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/omit.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniqWith.js","../../src/utils/useCurrentUser.ts","../../src/realm-settings/EmailTab.tsx","../../src/realm-settings/GeneralTab.tsx","../../src/realm-settings/localization/EffectiveMessageBundles.tsx","../../src/realm-settings/AddTranslationModal.tsx","../../src/realm-settings/localization/RealmOverrides.tsx","../../src/realm-settings/localization/LocalizationTab.tsx","../../src/realm-settings/LoginTab.tsx","../../src/realm-settings/PartialExport.tsx","../../src/realm-settings/PartialImport.tsx","../../src/realm-settings/PoliciesTab.tsx","../../src/realm-settings/ProfilesTab.tsx","../../src/realm-settings/SessionsTab.tsx","../../src/realm-settings/ThemesTab.tsx","../../src/realm-settings/TokensTab.tsx","../../src/realm-settings/DefaultGroupsTab.tsx","../../src/realm-settings/UserRegistration.tsx","../../src/realm-settings/event-config/EventsTypeTable.tsx","../../src/realm-settings/event-config/AddEventTypesDialog.tsx","../../src/realm-settings/event-config/EventConfigForm.tsx","../../src/realm-settings/event-config/EventListenersForm.tsx","../../src/realm-settings/event-config/EventsTab.tsx","../../src/realm-settings/keys/KeysListTab.tsx","../../src/realm-settings/keys/key-providers/KeyProviderModal.tsx","../../src/realm-settings/keys/key-providers/KeyProvidersPicker.tsx","../../src/realm-settings/keys/KeysProvidersTab.tsx","../../src/realm-settings/keys/KeysTab.tsx","../../src/realm-settings/security-defences/HelpLinkTextInput.tsx","../../src/realm-settings/security-defences/HeadersForm.tsx","../../src/realm-settings/security-defences/Time.tsx","../../src/realm-settings/security-defences/BruteForceDetection.tsx","../../src/realm-settings/security-defences/SecurityDefenses.tsx","../../src/realm-settings/user-profile/AttributesGroupTab.tsx","../../src/realm-settings/user-profile/AttributesTab.tsx","../../src/realm-settings/user-profile/JsonEditorTab.tsx","../../src/realm-settings/user-profile/UserProfileTab.tsx","../../src/realm-settings/RealmSettingsTabs.tsx","../../src/realm-settings/RealmSettingsSection.tsx"],"sourcesContent":["import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import flatten from './flatten.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nexport default flatRest;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","import baseGet from './_baseGet.js';\nimport baseSlice from './_baseSlice.js';\n\n/**\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n */\nfunction parent(object, path) {\n  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));\n}\n\nexport default parent;\n","import castPath from './_castPath.js';\nimport last from './last.js';\nimport parent from './_parent.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = castPath(path, object);\n  object = parent(object, path);\n  return object == null || delete object[toKey(last(path))];\n}\n\nexport default baseUnset;\n","import isPlainObject from './isPlainObject.js';\n\n/**\n * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain\n * objects.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {string} key The key of the property to inspect.\n * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.\n */\nfunction customOmitClone(value) {\n  return isPlainObject(value) ? undefined : value;\n}\n\nexport default customOmitClone;\n","import arrayMap from './_arrayMap.js';\nimport baseClone from './_baseClone.js';\nimport baseUnset from './_baseUnset.js';\nimport castPath from './_castPath.js';\nimport copyObject from './_copyObject.js';\nimport customOmitClone from './_customOmitClone.js';\nimport flatRest from './_flatRest.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * The opposite of `_.pick`; this method creates an object composed of the\n * own and inherited enumerable property paths of `object` that are not omitted.\n *\n * **Note:** This method is considerably slower than `_.pick`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to omit.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.omit(object, ['a', 'c']);\n * // => { 'b': '2' }\n */\nvar omit = flatRest(function(object, paths) {\n  var result = {};\n  if (object == null) {\n    return result;\n  }\n  var isDeep = false;\n  paths = arrayMap(paths, function(path) {\n    path = castPath(path, object);\n    isDeep || (isDeep = path.length > 1);\n    return path;\n  });\n  copyObject(object, getAllKeysIn(object), result);\n  if (isDeep) {\n    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);\n  }\n  var length = paths.length;\n  while (length--) {\n    baseUnset(result, paths[length]);\n  }\n  return result;\n});\n\nexport default omit;\n","import baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nexport default uniqWith;\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useState } from \"react\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { useFetch } from \"./useFetch\";\n\nexport function useCurrentUser() {\n  const { whoAmI } = useWhoAmI();\n  const [currentUser, setCurrentUser] = useState<UserRepresentation>();\n\n  const userId = whoAmI.getUserId();\n\n  useFetch(() => adminClient.users.findOne({ id: userId }), setCurrentUser, [\n    userId,\n  ]);\n\n  return currentUser;\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  ActionListItem,\n  Alert,\n  AlertActionLink,\n  AlertVariant,\n  Button,\n  Checkbox,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../components/password-input/PasswordInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport { emailRegexPattern } from \"../util\";\nimport { useCurrentUser } from \"../utils/useCurrentUser\";\nimport useToggle from \"../utils/useToggle\";\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsEmailTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"users\" | \"federatedUsers\">;\n\nexport const RealmSettingsEmailTab = ({\n  realm,\n  save,\n}: RealmSettingsEmailTabProps) => {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const currentUser = useCurrentUser();\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    reset: resetForm,\n    getValues,\n    formState: { errors },\n  } = useForm<FormFields>({ defaultValues: realm });\n\n  const reset = () => resetForm(realm);\n  const watchFromValue = watch(\"smtpServer.from\", \"\");\n  const watchHostValue = watch(\"smtpServer.host\", \"\");\n  const [isTesting, toggleTest] = useToggle();\n\n  const authenticationEnabled = useWatch({\n    control,\n    name: \"smtpServer.auth\",\n    defaultValue: \"\",\n  });\n\n  const testConnection = async () => {\n    const toNumber = (value: string) => Number(value);\n    const toBoolean = (value: string) => value === true.toString();\n    const valueMapper = new Map<string, (value: string) => unknown>([\n      [\"port\", toNumber],\n      [\"ssl\", toBoolean],\n      [\"starttls\", toBoolean],\n      [\"auth\", toBoolean],\n    ]);\n\n    const serverSettings = { ...getValues()[\"smtpServer\"] };\n\n    for (const [key, mapperFn] of valueMapper.entries()) {\n      serverSettings[key] = mapperFn(serverSettings[key]);\n    }\n\n    // For default value, back end is expecting null instead of 0\n    if (serverSettings.port === 0) serverSettings.port = null;\n\n    try {\n      toggleTest();\n      await adminClient.realms.testSMTPConnection(\n        { realm: realm.realm! },\n        serverSettings,\n      );\n      addAlert(t(\"testConnectionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"testConnectionError\", error);\n    }\n    toggleTest();\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"template\")} className=\"kc-email-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"from\")}\n            fieldId=\"kc-display-name\"\n            isRequired\n            validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-sender-email-address\"\n              data-testid=\"sender-email-address\"\n              placeholder=\"Sender email address\"\n              validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n              {...register(\"smtpServer.from\", {\n                pattern: emailRegexPattern,\n                required: true,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"fromDisplayName\")}\n            fieldId=\"kc-from-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"fromDisplayNameHelp\")}\n                fieldLabelId=\"authentication\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-from-display-name\"\n              data-testid=\"from-display-name\"\n              placeholder=\"Display name for Sender email address\"\n              {...register(\"smtpServer.fromDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyTo\")}\n            fieldId=\"kc-reply-to\"\n            validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-reply-to\"\n              placeholder=\"Reply to email address\"\n              validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n              {...register(\"smtpServer.replyTo\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyToDisplayName\")}\n            fieldId=\"kc-reply-to-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"replyToDisplayNameHelp\")}\n                fieldLabelId=\"replyToDisplayName\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-reply-to-display-name\"\n              placeholder='Display name for \"reply to\" email address'\n              {...register(\"smtpServer.replyToDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"envelopeFrom\")}\n            fieldId=\"kc-envelope-from\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"envelopeFromHelp\")}\n                fieldLabelId=\"envelopeFrom\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-envelope-from\"\n              placeholder=\"Sender envelope email address\"\n              {...register(\"smtpServer.envelopeFrom\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-email-connection\"\n        title={t(\"connectionAndAuthentication\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"host\")}\n            fieldId=\"kc-host\"\n            isRequired\n            validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              id=\"kc-host\"\n              placeholder=\"SMTP host\"\n              validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n              {...register(\"smtpServer.host\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"port\")} fieldId=\"kc-port\">\n            <KeycloakTextInput\n              id=\"kc-port\"\n              placeholder=\"SMTP port (defaults to 25)\"\n              {...register(\"smtpServer.port\")}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"encryption\")} fieldId=\"kc-html-display-name\">\n            <Controller\n              name=\"smtpServer.ssl\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-ssl\"\n                  data-testid=\"enable-ssl\"\n                  label={t(\"enableSSL\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n            <Controller\n              name=\"smtpServer.starttls\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-start-tls\"\n                  data-testid=\"enable-start-tls\"\n                  label={t(\"enableStartTLS\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authentication\")}\n            fieldId=\"kc-authentication\"\n          >\n            <Controller\n              name=\"smtpServer.auth\"\n              control={control}\n              defaultValue=\"\"\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-authentication-switch\"\n                  data-testid=\"email-authentication-switch\"\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    field.onChange(\"\" + value);\n                  }}\n                  aria-label={t(\"authentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {authenticationEnabled === \"true\" && (\n            <>\n              <FormGroup\n                label={t(\"username\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"required\")}\n              >\n                <KeycloakTextInput\n                  id=\"kc-username\"\n                  data-testid=\"username-input\"\n                  placeholder=\"Login username\"\n                  validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.user\", { required: true })}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"password\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"required\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"passwordHelp\")}\n                    fieldLabelId=\"password\"\n                  />\n                }\n              >\n                <PasswordInput\n                  id=\"kc-password\"\n                  data-testid=\"password-input\"\n                  aria-label={t(\"password\")}\n                  validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.password\", { required: true })}\n                />\n              </FormGroup>\n            </>\n          )}\n          {currentUser && (\n            <FormGroup id=\"descriptionTestConnection\">\n              {currentUser.email ? (\n                <Alert\n                  variant=\"info\"\n                  component=\"h2\"\n                  isInline\n                  title={t(\"testConnectionHint.withEmail\", {\n                    email: currentUser.email,\n                  })}\n                />\n              ) : (\n                <Alert\n                  variant=\"warning\"\n                  component=\"h2\"\n                  isInline\n                  title={t(\"testConnectionHint.withoutEmail\", {\n                    userName: currentUser.username,\n                  })}\n                  actionLinks={\n                    <AlertActionLink\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toUser({\n                            realm: realmName,\n                            id: currentUser.id!,\n                            tab: \"settings\",\n                          })}\n                        />\n                      )}\n                    >\n                      {t(\"testConnectionHint.withoutEmailAction\")}\n                    </AlertActionLink>\n                  }\n                />\n              )}\n            </FormGroup>\n          )}\n          <ActionGroup>\n            <ActionListItem>\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                data-testid=\"email-tab-save\"\n              >\n                {t(\"save\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"secondary\"\n                onClick={() => testConnection()}\n                data-testid=\"test-connection-button\"\n                isDisabled={\n                  !(emailRegexPattern.test(watchFromValue) && watchHostValue) ||\n                  !currentUser?.email\n                }\n                aria-describedby=\"descriptionTestConnection\"\n                isLoading={isTesting}\n                spinnerAriaValueText={t(\"testingConnection\")}\n              >\n                {t(\"testConnection\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"link\"\n                onClick={reset}\n                data-testid=\"email-tab-revert\"\n              >\n                {t(\"revert\")}\n              </Button>\n            </ActionListItem>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  ClipboardCopy,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { FormattedLink } from \"../components/external-link/FormattedLink\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeyValueInput } from \"../components/key-value-form/KeyValueInput\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  addTrailingSlash,\n  convertAttributeNameToForm,\n  convertToFormValues,\n} from \"../util\";\nimport {\n  UnmanagedAttributePolicy,\n  UserProfileConfig,\n} from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { UIRealmRepresentation } from \"./RealmSettingsTabs\";\n\ntype RealmSettingsGeneralTabProps = {\n  realm: UIRealmRepresentation;\n  save: (realm: UIRealmRepresentation) => void;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"groups\">;\n\nexport const RealmSettingsGeneralTab = ({\n  realm,\n  save,\n}: RealmSettingsGeneralTabProps) => {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const form = useForm<FormFields>();\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { isDirty, errors },\n  } = form;\n  const [open, setOpen] = useState(false);\n\n  const requireSslTypes = [\"all\", \"external\", \"none\"];\n\n  const [userProfileConfig, setUserProfileConfig] =\n    useState<UserProfileConfig>();\n  const unmanagedAttributePolicies = [\n    UnmanagedAttributePolicy.Disabled,\n    UnmanagedAttributePolicy.Enabled,\n    UnmanagedAttributePolicy.AdminView,\n    UnmanagedAttributePolicy.AdminEdit,\n  ];\n  const [isUnmanagedAttributeOpen, setIsUnmanagedAttributeOpen] =\n    useState(false);\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    if (realm.attributes?.[\"acr.loa.map\"]) {\n      const result = Object.entries(\n        JSON.parse(realm.attributes[\"acr.loa.map\"]),\n      ).flatMap(([key, value]) => ({ key, value }));\n      result.concat({ key: \"\", value: \"\" });\n      setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\") as any,\n        result,\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.users.getProfile({ realm: realmName }),\n    (config) => setUserProfileConfig(config),\n    [],\n  );\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit((data) => {\n          if (\n            UnmanagedAttributePolicy.Disabled ===\n            userProfileConfig?.unmanagedAttributePolicy\n          ) {\n            userProfileConfig.unmanagedAttributePolicy = undefined;\n          }\n          save({ ...data, upConfig: userProfileConfig });\n        })}\n      >\n        <FormGroup\n          label={t(\"realmId\")}\n          fieldId=\"kc-realm-id\"\n          isRequired\n          validated={errors.realm ? \"error\" : \"default\"}\n          helperTextInvalid={errors.realm?.message}\n        >\n          <Controller\n            name=\"realm\"\n            control={control}\n            rules={{\n              required: { value: true, message: t(\"required\") },\n            }}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <ClipboardCopy data-testid=\"realmName\" onChange={field.onChange}>\n                {field.value}\n              </ClipboardCopy>\n            )}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"displayName\")} fieldId=\"kc-display-name\">\n          <KeycloakTextInput\n            id=\"kc-display-name\"\n            {...register(\"displayName\")}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"htmlDisplayName\")} fieldId=\"kc-html-display-name\">\n          <KeycloakTextInput\n            id=\"kc-html-display-name\"\n            {...register(\"displayNameHtml\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"frontendUrl\")}\n          fieldId=\"kc-frontend-url\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"frontendUrlHelp\")}\n              fieldLabelId=\"frontendUrl\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            type=\"url\"\n            id=\"kc-frontend-url\"\n            {...register(convertAttributeNameToForm(\"attributes.frontendUrl\"))}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"requireSsl\")}\n          fieldId=\"kc-require-ssl\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"requireSslHelp\")}\n              fieldLabelId=\"requireSsl\"\n            />\n          }\n        >\n          <Controller\n            name=\"sslRequired\"\n            defaultValue=\"none\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-require-ssl\"\n                onToggle={() => setOpen(!open)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"requireSsl\")}\n                isOpen={open}\n              >\n                {requireSslTypes.map((sslType) => (\n                  <SelectOption\n                    selected={sslType === field.value}\n                    key={sslType}\n                    value={sslType}\n                  >\n                    {t(`sslType.${sslType}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"acrToLoAMapping\")}\n          fieldId=\"acrToLoAMapping\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"acrToLoAMappingHelp\")}\n              fieldLabelId=\"acrToLoAMapping\"\n            />\n          }\n        >\n          <FormProvider {...form}>\n            <KeyValueInput\n              label={t(\"acrToLoAMapping\")}\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormProvider>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"userManagedAccess\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"userManagedAccessHelp\")}\n              fieldLabelId=\"userManagedAccess\"\n            />\n          }\n          fieldId=\"kc-user-managed-access\"\n        >\n          <Controller\n            name=\"userManagedAccessAllowed\"\n            control={control}\n            defaultValue={false}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-user-managed-access\"\n                data-testid=\"user-managed-access-switch\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"userManagedAccess\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"unmanagedAttributes\")}\n          fieldId=\"kc-user-profile-unmanaged-attribute-policy\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"unmanagedAttributesHelpText\")}\n              fieldLabelId=\"unmanagedAttributes\"\n            />\n          }\n        >\n          <Select\n            toggleId=\"kc-user-profile-unmanaged-attribute-policy\"\n            onToggle={() =>\n              setIsUnmanagedAttributeOpen(!isUnmanagedAttributeOpen)\n            }\n            onSelect={(_, value) => {\n              if (userProfileConfig) {\n                userProfileConfig.unmanagedAttributePolicy =\n                  value as UnmanagedAttributePolicy;\n                setUserProfileConfig(userProfileConfig);\n              }\n              setIsUnmanagedAttributeOpen(false);\n            }}\n            selections={userProfileConfig?.unmanagedAttributePolicy}\n            variant={SelectVariant.single}\n            isOpen={isUnmanagedAttributeOpen}\n            aria-label={t(\"selectUnmanagedAttributePolicy\")}\n          >\n            {unmanagedAttributePolicies.map((policy) => (\n              <SelectOption key={policy} value={policy}>\n                {t(`unmanagedAttributePolicy.${policy}`)}\n              </SelectOption>\n            ))}\n          </Select>\n        </FormGroup>\n        <FormGroup\n          label={t(\"endpoints\")}\n          labelIcon={\n            <HelpItem helpText={t(\"endpointsHelp\")} fieldLabelId=\"endpoints\" />\n          }\n          fieldId=\"kc-endpoints\"\n        >\n          <Stack>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl,\n                )}realms/${realmName}/.well-known/openid-configuration`}\n                title={t(\"openIDEndpointConfiguration\")}\n              />\n            </StackItem>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl,\n                )}realms/${realmName}/protocol/saml/descriptor`}\n                title={t(\"samlIdentityProviderMetadata\")}\n              />\n            </StackItem>\n          </Stack>\n        </FormGroup>\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"general-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"general-tab-revert\"\n            variant=\"link\"\n            onClick={setupForm}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  Divider,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { pickBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../../i18n/i18n\";\nimport { localeToDisplayName } from \"../../util\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport DropdownPanel from \"../../components/dropdown-panel/DropdownPanel\";\n\ntype EffectiveMessageBundlesProps = {\n  defaultSupportedLocales: string[];\n  defaultLocales: string[];\n};\n\ntype EffectiveMessageBundlesSearchForm = {\n  theme: string;\n  themeType: string;\n  locale: string;\n  hasWords: string[];\n};\n\nconst defaultValues: EffectiveMessageBundlesSearchForm = {\n  theme: \"\",\n  themeType: \"\",\n  locale: \"\",\n  hasWords: [],\n};\n\nexport const EffectiveMessageBundles = ({\n  defaultSupportedLocales,\n  defaultLocales,\n}: EffectiveMessageBundlesProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const { whoAmI } = useWhoAmI();\n  const localeSort = useLocaleSort();\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [searchPerformed, setSearchPerformed] = useState(false);\n  const [selectThemesOpen, setSelectThemesOpen] = useState(false);\n  const [selectThemeTypeOpen, setSelectThemeTypeOpen] = useState(false);\n  const [selectLanguageOpen, setSelectLanguageOpen] = useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<EffectiveMessageBundlesSearchForm>\n  >({});\n  const [key, setKey] = useState(0);\n  const themes = serverInfo.themes;\n\n  const themeTypes = useMemo(() => {\n    if (!themes) {\n      return [];\n    }\n\n    return localeSort(Object.keys(themes), (key) => key);\n  }, [themes]);\n\n  const themeNames = useMemo(() => {\n    if (!themes) {\n      return [];\n    }\n\n    return localeSort(\n      Object.values(themes as Record<string, { name: string }[]>)\n        .flatMap((theme) => theme.map((item) => item.name))\n        .filter((value, index, self) => self.indexOf(value) === index),\n      (name) => name,\n    );\n  }, [themes]);\n\n  const combinedLocales = useMemo(() => {\n    return Array.from(new Set([...defaultLocales, ...defaultSupportedLocales]));\n  }, [defaultLocales, defaultSupportedLocales]);\n\n  const filterLabels: Record<keyof EffectiveMessageBundlesSearchForm, string> =\n    {\n      theme: t(\"theme\"),\n      themeType: t(\"themeType\"),\n      locale: t(\"language\"),\n      hasWords: t(\"hasWords\"),\n    };\n\n  const {\n    getValues,\n    reset,\n    formState: { isDirty, isValid },\n    control,\n  } = useForm<EffectiveMessageBundlesSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const loader = async () => {\n    try {\n      const filter = getValues();\n\n      const requiredKeys = [\"theme\", \"themeType\", \"locale\"];\n      const shouldReturnEmpty = requiredKeys.some(\n        (key) => !filter[key as keyof EffectiveMessageBundlesSearchForm],\n      );\n\n      if (shouldReturnEmpty) {\n        return [];\n      }\n\n      const messages = await adminClient.serverInfo.findEffectiveMessageBundles(\n        {\n          realm,\n          ...filter,\n          locale: filter.locale || DEFAULT_LOCALE,\n          source: true,\n        },\n      );\n\n      const filteredMessages =\n        filter.hasWords.length > 0\n          ? messages.filter((m) =>\n              filter.hasWords.some(\n                (f) => m.value.includes(f) || m.key.includes(f),\n              ),\n            )\n          : messages;\n\n      const sortedMessages = localeSort([...filteredMessages], mapByKey(\"key\"));\n\n      return sortedMessages;\n    } catch (error) {\n      return [];\n    }\n  };\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof EffectiveMessageBundlesSearchForm) {\n    const formValues: EffectiveMessageBundlesSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof EffectiveMessageBundlesSearchForm,\n    valueToRemove: string,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<EffectiveMessageBundlesSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const effectiveMessageBunldesSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <TextContent>\n            <Text\n              className=\"pf-u-mb-md pf-u-mt-0 pf-u-mr-md\"\n              component={TextVariants.p}\n            >\n              {t(\"effectiveMessageBundlesDescription\")}\n            </Text>\n          </TextContent>\n        </FlexItem>\n        <FlexItem>\n          <DropdownPanel\n            buttonText={t(\"searchForEffectiveMessageBundles\")}\n            setSearchDropdownOpen={setSearchDropdownOpen}\n            searchDropdownOpen={searchDropdownOpen}\n            marginRight=\"2.5rem\"\n            width=\"15vw\"\n          >\n            <Form\n              isHorizontal\n              className=\"pf-u-w-25vw\"\n              data-testid=\"effectiveMessageBundlesSearchForm\"\n              onSubmit={(e) => e.preventDefault()}\n            >\n              <FormGroup label={t(\"theme\")} fieldId=\"kc-theme\" isRequired>\n                <Controller\n                  name=\"theme\"\n                  control={control}\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      name=\"theme\"\n                      data-testid=\"effective_message_bundles-theme-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={setSelectThemesOpen}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectThemesOpen(false);\n                      }}\n                      onClear={(theme) => {\n                        theme.stopPropagation();\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectThemesOpen}\n                      aria-labelledby={t(\"theme\")}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          <Chip\n                            key={field.value}\n                            onClick={(theme) => {\n                              theme.stopPropagation();\n                              field.onChange(\"\");\n                            }}\n                          >\n                            {field.value}\n                          </Chip>\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"theme_placeholder\"\n                          value=\"Select theme\"\n                          label={t(\"selectTheme\")}\n                          className=\"kc__effective_message_bundles_search_theme__placeholder\"\n                          isDisabled\n                        />,\n                      ].concat(\n                        themeNames.map((option) => (\n                          <SelectOption key={option} value={option} />\n                        )),\n                      )}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"themeType\")}\n                fieldId=\"kc-themeType\"\n                isRequired\n              >\n                <Controller\n                  name=\"themeType\"\n                  control={control}\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      name=\"themeType\"\n                      data-testid=\"effective-message-bundles-feature-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={setSelectThemeTypeOpen}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectThemeTypeOpen(false);\n                      }}\n                      onClear={(themeType) => {\n                        themeType.stopPropagation();\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectThemeTypeOpen}\n                      aria-labelledby={t(\"themeType\")}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          <Chip\n                            key={field.value}\n                            onClick={(themeType) => {\n                              themeType.stopPropagation();\n                              field.onChange(\"\");\n                            }}\n                          >\n                            {field.value}\n                          </Chip>\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"themeType_placeholder\"\n                          value=\"Select theme type\"\n                          label={t(\"selectThemeType\")}\n                          className=\"pf-m-plain\"\n                          isDisabled\n                        />,\n                      ].concat(\n                        themeTypes.map((option) => (\n                          <SelectOption key={option} value={option} />\n                        )),\n                      )}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup label={t(\"language\")} fieldId=\"kc-language\" isRequired>\n                <Controller\n                  name=\"locale\"\n                  control={control}\n                  rules={{\n                    validate: (value) => (value || \"\").length > 0,\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      name=\"language\"\n                      data-testid=\"effective-message-bundles-language-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.single}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={setSelectLanguageOpen}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        field.onChange(selectedValue.toString());\n                        setSelectLanguageOpen(false);\n                      }}\n                      onClear={(language) => {\n                        language.stopPropagation();\n                        field.onChange(\"\");\n                      }}\n                      isOpen={selectLanguageOpen}\n                      aria-labelledby=\"language\"\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value ? (\n                            <Chip\n                              key={field.value}\n                              onClick={(language) => {\n                                language.stopPropagation();\n                                field.onChange(\"\");\n                              }}\n                            >\n                              {localeToDisplayName(\n                                field.value,\n                                whoAmI.getLocale(),\n                              )}\n                            </Chip>\n                          ) : null}\n                        </ChipGroup>\n                      }\n                    >\n                      {[\n                        <SelectOption\n                          key=\"language_placeholder\"\n                          value=\"Select language\"\n                          label={t(\"selectLanguage\")}\n                          className=\"pf-m-plain\"\n                          isDisabled\n                        />,\n                      ].concat(\n                        combinedLocales.map((option) => (\n                          <SelectOption key={option} value={option}>\n                            {localeToDisplayName(option, whoAmI.getLocale())}\n                          </SelectOption>\n                        )),\n                      )}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup label={t(\"hasWords\")} fieldId=\"kc-hasWords\">\n                <Controller\n                  name=\"hasWords\"\n                  control={control}\n                  render={({ field }) => (\n                    <div>\n                      <KeycloakTextInput\n                        id=\"kc-hasWords\"\n                        data-testid=\"effective-message-bundles-hasWords-searchField\"\n                        value={field.value.join(\" \")}\n                        onChange={(e) => {\n                          const target = e.target as HTMLInputElement;\n                          const input = target.value;\n\n                          if (input.trim().length === 0) {\n                            field.onChange([]);\n                          } else {\n                            const words = input\n                              .split(\" \")\n                              .map((word) => word.trim());\n                            field.onChange(words);\n                          }\n                        }}\n                      />\n                      <ChipGroup>\n                        {field.value.map((word, index) => (\n                          <Chip\n                            key={index}\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              const newWords = field.value.filter(\n                                (_, i) => i !== index,\n                              );\n                              field.onChange(newWords);\n                            }}\n                          >\n                            {word}\n                          </Chip>\n                        ))}\n                      </ChipGroup>\n                    </div>\n                  )}\n                />\n              </FormGroup>\n              <ActionGroup className=\"pf-u-mt-sm\">\n                <Button\n                  variant={\"primary\"}\n                  onClick={() => {\n                    setSearchPerformed(true);\n                    submitSearch();\n                  }}\n                  data-testid=\"search-effective-message-bundles-btn\"\n                  isDisabled={!isValid}\n                >\n                  {t(\"search\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  data-testid=\"reset-search-effective-message-bundles-btn\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"reset\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </DropdownPanel>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <>\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof EffectiveMessageBundlesSearchForm,\n                  string | string[],\n                ];\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>\n                        {key === \"locale\"\n                          ? localeToDisplayName(\n                              value,\n                              whoAmI.getLocale(),\n                            )?.toLowerCase()\n                          : value}\n                      </Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {entry}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  if (!searchPerformed) {\n    return (\n      <>\n        <div className=\"pf-u-py-lg pf-u-pl-md\">\n          {effectiveMessageBunldesSearchFormDisplay()}\n        </div>\n        <Divider />\n        <ListEmptyState\n          message={t(\"emptyEffectiveMessageBundles\")}\n          instructions={t(\"emptyEffectiveMessageBundlesInstructions\")}\n          isSearchVariant\n        />\n      </>\n    );\n  }\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={loader}\n      ariaLabelKey=\"effectiveMessageBundles\"\n      toolbarItem={effectiveMessageBunldesSearchFormDisplay()}\n      columns={[\n        {\n          name: \"key\",\n          displayKey: \"key\",\n        },\n        {\n          name: \"value\",\n          displayKey: \"value\",\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      }\n      isSearching={Object.keys(activeFilters).length > 0}\n    />\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype AddTranslationModalProps = {\n  id?: string;\n  form: UseFormReturn<TranslationForm>;\n  save: SubmitHandler<TranslationForm>;\n  handleModalToggle: () => void;\n};\n\nexport type TranslationForm = {\n  key: string;\n  value: string;\n  translation: KeyValueType;\n};\n\nexport const AddTranslationModal = ({\n  handleModalToggle,\n  save,\n  form: {\n    register,\n    handleSubmit,\n    formState: { errors },\n  },\n}: AddTranslationModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"AddTranslation\")}\n      isOpen\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"add-translation-confirm-button\"\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"translation-form\"\n        >\n          {t(\"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"translation-form\" isHorizontal onSubmit={handleSubmit(save)}>\n        <FormGroup\n          label={t(\"key\")}\n          name=\"key\"\n          fieldId=\"key-id\"\n          helperTextInvalid={t(\"required\")}\n          validated={\n            errors.key ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"key-input\"\n            autoFocus\n            id=\"key-id\"\n            validated={\n              errors.key ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"key\", { required: true })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"value\")}\n          name=\"add-value\"\n          fieldId=\"value-id\"\n          helperTextInvalid={t(\"required\")}\n          validated={\n            errors.value ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"value-input\"\n            id=\"value-id\"\n            validated={\n              errors.value ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"value\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Dropdown,\n  DropdownItem,\n  Form,\n  FormGroup,\n  KebabToggle,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  TextContent,\n  Text,\n  ToolbarItem,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  CheckIcon,\n  PencilAltIcon,\n  SearchIcon,\n  TimesIcon,\n} from \"@patternfly/react-icons\";\nimport {\n  ActionsColumn,\n  IRow,\n  IRowCell,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport RealmRepresentation from \"libs/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { cloneDeep, isEqual, uniqWith } from \"lodash-es\";\nimport { ChangeEvent, useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyValueType } from \"../../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../../i18n/i18n\";\nimport { localeToDisplayName } from \"../../util\";\nimport { AddTranslationModal } from \"../AddTranslationModal\";\n\ntype RealmOverridesProps = {\n  internationalizationEnabled: boolean;\n  watchSupportedLocales: string[];\n  realm: RealmRepresentation;\n};\n\ntype EditStatesType = { [key: number]: boolean };\n\nexport type TranslationForm = {\n  key: string;\n  value: string;\n  translation: KeyValueType;\n};\n\nexport enum RowEditAction {\n  Save = \"save\",\n  Cancel = \"cancel\",\n  Edit = \"edit\",\n  Delete = \"delete\",\n}\n\nexport const RealmOverrides = ({\n  internationalizationEnabled,\n  watchSupportedLocales,\n  realm,\n}: RealmOverridesProps) => {\n  const { t } = useTranslation();\n  const [addTranslationModalOpen, setAddTranslationModalOpen] = useState(false);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [translations, setTranslations] = useState<[string, string][]>([]);\n  const [selectMenuLocale, setSelectMenuLocale] = useState(DEFAULT_LOCALE);\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const { getValues, handleSubmit } = useForm();\n  const [selectMenuValueSelected, setSelectMenuValueSelected] = useState(false);\n  const [tableRows, setTableRows] = useState<IRow[]>([]);\n  const [tableKey, setTableKey] = useState(0);\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n  const translationForm = useForm<TranslationForm>({ mode: \"onChange\" });\n  const { addAlert, addError } = useAlerts();\n  const { realm: currentRealm } = useRealm();\n  const { whoAmI } = useWhoAmI();\n  const [selectedRowKeys, setSelectedRowKeys] = useState<string[]>([]);\n  const [areAllRowsSelected, setAreAllRowsSelected] = useState(false);\n  const [editStates, setEditStates] = useState<EditStatesType>({});\n  const [formValue, setFormValue] = useState(\"\");\n  const refreshTable = () => {\n    setTableKey(tableKey + 1);\n  };\n\n  useEffect(() => {\n    const fetchLocalizationTexts = async () => {\n      try {\n        let result = await adminClient.realms.getRealmLocalizationTexts({\n          first,\n          max,\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale ||\n            getValues(\"defaultLocale\") ||\n            whoAmI.getLocale(),\n        });\n\n        if (filter) {\n          const searchInTranslations = (idx: number) => {\n            return Object.entries(result).filter((i) =>\n              i[idx].includes(filter),\n            );\n          };\n\n          const filtered = uniqWith(\n            searchInTranslations(0).concat(searchInTranslations(1)),\n            isEqual,\n          );\n\n          result = Object.fromEntries(filtered);\n        }\n\n        return Object.entries(result).slice(first, first + max);\n      } catch (error) {\n        return [];\n      }\n    };\n\n    fetchLocalizationTexts().then((translations) => {\n      setTranslations(translations);\n\n      const updatedRows: IRow[] = translations.map(\n        (translation): IRow => ({\n          rowEditBtnAriaLabel: () =>\n            t(\"rowEditBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          rowSaveBtnAriaLabel: () =>\n            t(\"rowSaveBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          rowCancelBtnAriaLabel: () =>\n            t(\"rowCancelBtnAriaLabel\", {\n              translation: translation[1],\n            }),\n          cells: [\n            {\n              title: translation[0],\n              props: {\n                value: translation[0],\n              },\n            },\n            {\n              title: translation[1],\n              props: {\n                value: translation[1],\n              },\n            },\n          ],\n        }),\n      );\n\n      setTableRows(updatedRows);\n    });\n  }, [tableKey, first, max, filter]);\n\n  const handleModalToggle = () => {\n    setAddTranslationModalOpen(!addTranslationModalOpen);\n  };\n\n  const options = [\n    <SelectGroup label={t(\"defaultLocale\")} key=\"group1\">\n      <SelectOption key={DEFAULT_LOCALE} value={DEFAULT_LOCALE}>\n        {localeToDisplayName(DEFAULT_LOCALE, whoAmI.getDisplayName())}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key=\"divider\" />,\n    <SelectGroup label={t(\"supportedLocales\")} key=\"group2\">\n      {watchSupportedLocales.map((locale) => (\n        <SelectOption key={locale} value={locale}>\n          {localeToDisplayName(locale, whoAmI.getLocale())}\n        </SelectOption>\n      ))}\n    </SelectGroup>,\n  ];\n\n  const addKeyValue = async (pair: KeyValueType): Promise<void> => {\n    try {\n      await adminClient.realms.addLocalization(\n        {\n          realm: currentRealm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key: pair.key,\n        },\n        pair.value,\n      );\n\n      adminClient.setConfig({\n        realmName: currentRealm!,\n      });\n      refreshTable();\n      translationForm.setValue(\"key\", \"\");\n      translationForm.setValue(\"value\", \"\");\n      addAlert(t(\"addTranslationSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(t(\"addTranslationError\"), error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmTranslationTitle\",\n    messageKey: t(\"translationDeleteConfirmDialog\", {\n      count: selectedRowKeys.length,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onCancel: () => {\n      setSelectedRowKeys([]);\n      setAreAllRowsSelected(false);\n    },\n    onConfirm: async () => {\n      try {\n        for (const key of selectedRowKeys) {\n          await adminClient.realms.deleteRealmLocalizationTexts({\n            realm: currentRealm!,\n            selectedLocale: selectMenuLocale,\n            key: key,\n          });\n        }\n        setAreAllRowsSelected(false);\n        setSelectedRowKeys([]);\n        refreshTable();\n        addAlert(t(\"deleteAllTranslationsSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteAllTranslationsError\", error);\n      }\n    },\n  });\n\n  const handleRowSelect = (\n    event: ChangeEvent<HTMLInputElement>,\n    rowIndex: number,\n  ) => {\n    const selectedKey = (tableRows[rowIndex].cells?.[0] as IRowCell).props\n      .value;\n    if (event.target.checked) {\n      setSelectedRowKeys((prevSelected) => [...prevSelected, selectedKey]);\n    } else {\n      setSelectedRowKeys((prevSelected) =>\n        prevSelected.filter((key) => key !== selectedKey),\n      );\n    }\n\n    setAreAllRowsSelected(\n      tableRows.length ===\n        selectedRowKeys.length + (event.target.checked ? 1 : -1),\n    );\n  };\n\n  const toggleSelectAllRows = () => {\n    if (areAllRowsSelected) {\n      setSelectedRowKeys([]);\n    } else {\n      setSelectedRowKeys(\n        tableRows.map((row) => (row.cells?.[0] as IRowCell).props.value),\n      );\n    }\n    setAreAllRowsSelected(!areAllRowsSelected);\n  };\n\n  const isRowSelected = (key: any) => {\n    return selectedRowKeys.includes(key);\n  };\n\n  const onSubmit = async (inputValue: string, rowIndex: number) => {\n    const newRows = cloneDeep(tableRows);\n\n    const newRow = cloneDeep(newRows[rowIndex]);\n    (newRow.cells?.[1] as IRowCell).props.value = inputValue;\n    newRows[rowIndex] = newRow;\n\n    try {\n      const key = (newRow.cells?.[0] as IRowCell).props.value;\n      const value = (newRow.cells?.[1] as IRowCell).props.value;\n\n      await adminClient.realms.addLocalization(\n        {\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key,\n        },\n        value,\n      );\n\n      addAlert(t(\"updateTranslationSuccess\"), AlertVariant.success);\n      setTableRows(newRows);\n    } catch (error) {\n      addAlert(t(\"updateTranslationError\"), AlertVariant.danger);\n    }\n\n    setEditStates((prevEditStates) => ({\n      ...prevEditStates,\n      [rowIndex]: false,\n    }));\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addTranslationModalOpen && (\n        <AddTranslationModal\n          handleModalToggle={handleModalToggle}\n          save={(pair: any) => {\n            addKeyValue(pair);\n            handleModalToggle();\n          }}\n          form={translationForm}\n        />\n      )}\n      <TextContent>\n        <Text className=\"pf-u-mt-lg pf-u-ml-md\" component={TextVariants.p}>\n          {t(\"realmOverridesDescription\")}\n        </Text>\n      </TextContent>\n      <PaginatingTableToolbar\n        count={translations.length}\n        first={first}\n        max={max}\n        onNextClick={setFirst}\n        onPreviousClick={setFirst}\n        onPerPageSelect={(first, max) => {\n          setFirst(first);\n          setMax(max);\n        }}\n        inputGroupName={\"search\"}\n        inputGroupOnEnter={(search) => {\n          setFilter(search);\n          setFirst(0);\n          setMax(10);\n        }}\n        inputGroupPlaceholder={t(\"searchForTranslation\")}\n        toolbarItem={\n          <>\n            <Button\n              data-testid=\"add-translationBtn\"\n              onClick={() => {\n                setAddTranslationModalOpen(true);\n                setAreAllRowsSelected(false);\n                setSelectedRowKeys([]);\n              }}\n            >\n              {t(\"addTranslation\")}\n            </Button>\n            <ToolbarItem>\n              <Dropdown\n                toggle={\n                  <KebabToggle onToggle={() => setKebabOpen(!kebabOpen)} />\n                }\n                isOpen={kebabOpen}\n                isPlain\n                data-testid=\"toolbar-deleteBtn\"\n                dropdownItems={[\n                  <DropdownItem\n                    key=\"action\"\n                    component=\"button\"\n                    data-testid=\"delete-selected-TranslationBtn\"\n                    isDisabled={\n                      translations.length === 0 || selectedRowKeys.length === 0\n                    }\n                    onClick={() => {\n                      toggleDeleteDialog();\n                      setKebabOpen(false);\n                    }}\n                  >\n                    {t(\"delete\")}\n                  </DropdownItem>,\n                ]}\n              />\n            </ToolbarItem>\n          </>\n        }\n        searchTypeComponent={\n          <ToolbarItem>\n            <Select\n              width={180}\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-by-locale-select\"\n              variant={SelectVariant.single}\n              isDisabled={!internationalizationEnabled}\n              onToggle={(isExpanded) => setFilterDropdownOpen(isExpanded)}\n              onSelect={(_, value) => {\n                setSelectMenuLocale(value.toString());\n                setSelectMenuValueSelected(true);\n                refreshTable();\n                setFilterDropdownOpen(false);\n              }}\n              selections={\n                selectMenuValueSelected\n                  ? localeToDisplayName(selectMenuLocale, whoAmI.getLocale())\n                  : realm.defaultLocale !== \"\"\n                    ? localeToDisplayName(DEFAULT_LOCALE, whoAmI.getLocale())\n                    : t(\"placeholderText\")\n              }\n            >\n              {options}\n            </Select>\n          </ToolbarItem>\n        }\n      >\n        {translations.length === 0 && !filter && (\n          <ListEmptyState\n            hasIcon\n            message={t(\"noTranslations\")}\n            instructions={t(\"noTranslationsInstructions\")}\n            onPrimaryAction={handleModalToggle}\n          />\n        )}\n        {translations.length === 0 && filter && (\n          <ListEmptyState\n            hasIcon\n            icon={SearchIcon}\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noRealmOverridesSearchResultsInstructions\")}\n          />\n        )}\n        {translations.length !== 0 && (\n          <Table\n            aria-label={t(\"editableRowsTable\")}\n            data-testid=\"editable-rows-table\"\n          >\n            <Thead>\n              <Tr>\n                <Th className=\"pf-u-px-lg\">\n                  <input\n                    type=\"checkbox\"\n                    aria-label={t(\"selectAll\")}\n                    checked={areAllRowsSelected}\n                    onChange={toggleSelectAllRows}\n                    data-testid=\"selectAll\"\n                  />\n                </Th>\n                <Th className=\"pf-u-py-lg\">{t(\"key\")}</Th>\n                <Th className=\"pf-u-py-lg\">{t(\"value\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {tableRows.map((row, rowIndex) => (\n                <Tr key={(row.cells?.[0] as IRowCell).props.value}>\n                  <Td\n                    className=\"pf-u-px-lg\"\n                    select={{\n                      rowIndex,\n                      onSelect: (event) =>\n                        handleRowSelect(\n                          event as ChangeEvent<HTMLInputElement>,\n                          rowIndex,\n                        ),\n                      isSelected: isRowSelected(\n                        (row.cells?.[0] as IRowCell).props.value,\n                      ),\n                    }}\n                  />\n                  <Td className=\"pf-m-sm pf-u-px-sm\" dataLabel={t(\"key\")}>\n                    {(row.cells?.[0] as IRowCell).props.value}\n                  </Td>\n                  <Td\n                    className=\"pf-m-sm pf-u-px-sm\"\n                    dataLabel={t(\"value\")}\n                    key={rowIndex}\n                  >\n                    <Form\n                      isHorizontal\n                      className=\"kc-form-translationValue\"\n                      onSubmit={handleSubmit(() => {\n                        onSubmit(formValue, rowIndex);\n                      })}\n                    >\n                      <FormGroup\n                        fieldId=\"kc-translationValue\"\n                        className=\"pf-u-display-inline-block\"\n                      >\n                        {editStates[rowIndex] ? (\n                          <>\n                            <KeycloakTextInput\n                              aria-label={t(\"editTranslationValue\")}\n                              type=\"text\"\n                              className=\"pf-u-w-initial\"\n                              data-testid={`editTranslationValueInput-${rowIndex}`}\n                              value={formValue}\n                              onChange={(\n                                event: ChangeEvent<HTMLInputElement>,\n                              ) => {\n                                setFormValue(event.target.value);\n                              }}\n                              key={`edit-input-${rowIndex}`}\n                            />\n                            <Button\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationAcceptBtn-${rowIndex}`}\n                              type=\"submit\"\n                              aria-label={t(\"acceptBtn\")}\n                              icon={<CheckIcon />}\n                            />\n                            <Button\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationCancelBtn-${rowIndex}`}\n                              icon={<TimesIcon />}\n                              aria-label={t(\"cancelBtn\")}\n                              onClick={() => {\n                                setEditStates((prevEditStates) => ({\n                                  ...prevEditStates,\n                                  [rowIndex]: false,\n                                }));\n                              }}\n                            />\n                          </>\n                        ) : (\n                          <>\n                            <span>\n                              {(row.cells?.[1] as IRowCell).props.value}\n                            </span>\n                            <Button\n                              onClick={() => {\n                                const currentValue = (\n                                  tableRows[rowIndex].cells?.[1] as IRowCell\n                                ).props.value;\n                                setFormValue(currentValue);\n                                setEditStates((prevState) => ({\n                                  ...prevState,\n                                  [rowIndex]: true,\n                                }));\n                              }}\n                              key={`edit-button-${rowIndex}`}\n                              aria-label={t(\"editBtn\")}\n                              variant=\"link\"\n                              className=\"pf-m-plain\"\n                              data-testid={`editTranslationBtn-${rowIndex}`}\n                            >\n                              <PencilAltIcon />\n                            </Button>\n                          </>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  </Td>\n                  <Td isActionCell>\n                    <ActionsColumn\n                      items={[\n                        {\n                          title: t(\"delete\"),\n                          onClick: () => {\n                            setSelectedRowKeys([\n                              (row.cells?.[0] as IRowCell).props.value,\n                            ]);\n                            translations.length === 1 &&\n                              setAreAllRowsSelected(true);\n                            toggleDeleteDialog();\n                            setKebabOpen(false);\n                          },\n                        },\n                      ]}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        )}\n      </PaginatingTableToolbar>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Tab,\n  TabTitleText,\n  Tabs,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../../i18n/i18n\";\nimport { convertToFormValues, localeToDisplayName } from \"../../util\";\nimport { EffectiveMessageBundles } from \"./EffectiveMessageBundles\";\nimport { RealmOverrides } from \"./RealmOverrides\";\n\ntype LocalizationTabProps = {\n  save: (realm: RealmRepresentation) => void;\n  realm: RealmRepresentation;\n};\n\nexport const LocalizationTab = ({ save, realm }: LocalizationTabProps) => {\n  const { t } = useTranslation();\n  const { whoAmI } = useWhoAmI();\n\n  const [activeTab, setActiveTab] = useState(0);\n  const { setValue, control, handleSubmit, formState } = useForm();\n  const [supportedLocalesOpen, setSupportedLocalesOpen] = useState(false);\n  const [defaultLocaleOpen, setDefaultLocaleOpen] = useState(false);\n\n  const defaultSupportedLocales = realm.supportedLocales?.length\n    ? realm.supportedLocales\n    : [DEFAULT_LOCALE];\n\n  const themeTypes = useServerInfo().themes!;\n  const allLocales = useMemo(() => {\n    const locales = Object.values(themeTypes).flatMap((theme) =>\n      theme.flatMap(({ locales }) => (locales ? locales : [])),\n    );\n    return Array.from(new Set(locales));\n  }, [themeTypes]);\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setValue(\"supportedLocales\", defaultSupportedLocales);\n  };\n\n  useEffect(setupForm, []);\n\n  const watchSupportedLocales: string[] = useWatch({\n    control,\n    name: \"supportedLocales\",\n    defaultValue: defaultSupportedLocales,\n  });\n\n  const internationalizationEnabled = useWatch({\n    control,\n    name: \"internationalizationEnabled\",\n    defaultValue: realm.internationalizationEnabled,\n  });\n\n  const defaultLocales = useWatch({\n    name: \"defaultLocale\",\n    control,\n    defaultValue: realm.defaultLocale ? [realm.defaultLocale] : [],\n  });\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"locales\"\n        eventKey={0}\n        title={<TabTitleText>{t(\"locales\")}</TabTitleText>}\n        data-testid=\"rs-localization-locales-tab\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg pf-u-ml-md\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"internationalization\")}\n            fieldId=\"kc-internationalization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"internationalizationHelp\")}\n                fieldLabelId=\"internationalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"internationalizationEnabled\"\n              control={control}\n              defaultValue={realm.internationalizationEnabled}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-l-internationalization\"\n                  className=\"pf-u-mt-sm\"\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  data-testid={\n                    field.value\n                      ? \"internationalization-enabled\"\n                      : \"internationalization-disabled\"\n                  }\n                  onChange={field.onChange}\n                  aria-label={t(\"internationalization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {internationalizationEnabled && (\n            <>\n              <FormGroup\n                label={t(\"supportedLocales\")}\n                fieldId=\"kc-l-supported-locales\"\n              >\n                <Controller\n                  name=\"supportedLocales\"\n                  control={control}\n                  defaultValue={defaultSupportedLocales}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-l-supported-locales\"\n                      onToggle={(open) => {\n                        setSupportedLocalesOpen(open);\n                      }}\n                      onSelect={(_, v) => {\n                        const option = v as string;\n                        if (field.value.includes(option)) {\n                          field.onChange(\n                            field.value.filter(\n                              (item: string) => item !== option,\n                            ),\n                          );\n                        } else {\n                          field.onChange([...field.value, option]);\n                        }\n                      }}\n                      onClear={() => {\n                        field.onChange([]);\n                      }}\n                      selections={field.value}\n                      variant={SelectVariant.typeaheadMulti}\n                      aria-label={t(\"supportedLocales\")}\n                      isOpen={supportedLocalesOpen}\n                      placeholderText={t(\"selectLocales\")}\n                    >\n                      {allLocales.map((locale) => (\n                        <SelectOption\n                          selected={field.value.includes(locale)}\n                          key={locale}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale, whoAmI.getLocale())}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"defaultLocale\")}\n                fieldId=\"kc-l-default-locale\"\n              >\n                <Controller\n                  name=\"defaultLocale\"\n                  control={control}\n                  defaultValue={DEFAULT_LOCALE}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-default-locale\"\n                      onToggle={() => setDefaultLocaleOpen(!defaultLocaleOpen)}\n                      onSelect={(_, value) => {\n                        field.onChange(value as string);\n                        setDefaultLocaleOpen(false);\n                      }}\n                      selections={\n                        field.value\n                          ? localeToDisplayName(field.value, whoAmI.getLocale())\n                          : realm.defaultLocale !== \"\"\n                            ? localeToDisplayName(\n                                realm.defaultLocale || DEFAULT_LOCALE,\n                                whoAmI.getLocale(),\n                              )\n                            : t(\"placeholderText\")\n                      }\n                      variant={SelectVariant.single}\n                      aria-label={t(\"defaultLocale\")}\n                      isOpen={defaultLocaleOpen}\n                      placeholderText={t(\"placeholderText\")}\n                      data-testid=\"select-default-locale\"\n                    >\n                      {watchSupportedLocales.map((locale, idx) => (\n                        <SelectOption\n                          key={`default-locale-${idx}`}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale, whoAmI.getLocale())}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              isDisabled={!formState.isDirty}\n              type=\"submit\"\n              data-testid=\"localization-tab-save\"\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </Tab>\n      <Tab\n        id=\"realm-overrides\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"realmOverrides\")} </TabTitleText>}\n        data-testid=\"rs-localization-realm-overrides-tab\"\n      >\n        <RealmOverrides\n          internationalizationEnabled={internationalizationEnabled}\n          watchSupportedLocales={watchSupportedLocales}\n          realm={realm}\n        />\n      </Tab>\n      <Tab\n        id=\"effective-message-bundles\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"effectiveMessageBundles\")}</TabTitleText>}\n        data-testid=\"rs-localization-effective-message-bundles-tab\"\n      >\n        <EffectiveMessageBundles\n          defaultSupportedLocales={defaultSupportedLocales}\n          defaultLocales={defaultLocales}\n        />\n      </Tab>\n    </Tabs>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormGroup, PageSection, Switch } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype RealmSettingsLoginTabProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\ntype SwitchType = { [K in keyof RealmRepresentation]: boolean };\n\nexport const RealmSettingsLoginTab = ({\n  realm,\n  refresh,\n}: RealmSettingsLoginTabProps) => {\n  const { t } = useTranslation();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const updateSwitchValue = async (switches: SwitchType | SwitchType[]) => {\n    const name = Array.isArray(switches)\n      ? Object.keys(switches[0])[0]\n      : Object.keys(switches)[0];\n\n    try {\n      await adminClient.realms.update(\n        {\n          realm: realmName,\n        },\n        Array.isArray(switches)\n          ? switches.reduce((realm, s) => Object.assign(realm, s), realm)\n          : Object.assign(realm, switches),\n      );\n      addAlert(t(\"enableSwitchSuccess\", { switch: t(name) }));\n      refresh();\n    } catch (error) {\n      addError(t(\"enableSwitchError\"), error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={t(\"loginScreenCustomization\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationAllowed\")}\n            fieldId=\"kc-user-reg\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userRegistrationHelpText\")}\n                fieldLabelId=\"registrationAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-user-reg-switch\"\n              data-testid=\"user-reg-switch\"\n              value={realm.registrationAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ registrationAllowed: value });\n              }}\n              aria-label={t(\"registrationAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"resetPasswordAllowed\")}\n            fieldId=\"kc-forgot-pw\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"forgotPasswordHelpText\")}\n                fieldLabelId=\"resetPasswordAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-forgot-pw-switch\"\n              data-testid=\"forgot-pw-switch\"\n              name=\"resetPasswordAllowed\"\n              value={realm.resetPasswordAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.resetPasswordAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ resetPasswordAllowed: value });\n              }}\n              aria-label={t(\"resetPasswordAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"rememberMe\")}\n            fieldId=\"kc-remember-me\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"rememberMeHelpText\")}\n                fieldLabelId=\"rememberMe\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-remember-me-switch\"\n              data-testid=\"remember-me-switch\"\n              value={realm.rememberMe ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.rememberMe}\n              onChange={(value) => {\n                updateSwitchValue({ rememberMe: value });\n              }}\n              aria-label={t(\"rememberMe\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel className=\"kc-email-settings\" title={t(\"emailSettings\")}>\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationEmailAsUsername\")}\n            fieldId=\"kc-email-as-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailAsUsernameHelpText\")}\n                fieldLabelId=\"registrationEmailAsUsername\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-email-as-username-switch\"\n              data-testid=\"email-as-username-switch\"\n              value={realm.registrationEmailAsUsername ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationEmailAsUsername}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    registrationEmailAsUsername: value,\n                  },\n                  {\n                    duplicateEmailsAllowed: false,\n                  },\n                ]);\n              }}\n              aria-label={t(\"registrationEmailAsUsername\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginWithEmailAllowed\")}\n            fieldId=\"kc-login-with-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginWithEmailHelpText\")}\n                fieldLabelId=\"loginWithEmailAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-login-with-email-switch\"\n              data-testid=\"login-with-email-switch\"\n              value={realm.loginWithEmailAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.loginWithEmailAllowed}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    loginWithEmailAllowed: value,\n                  },\n                  { duplicateEmailsAllowed: false },\n                ]);\n              }}\n              aria-label={t(\"loginWithEmailAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"duplicateEmailsAllowed\")}\n            fieldId=\"kc-duplicate-emails\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"duplicateEmailsHelpText\")}\n                fieldLabelId=\"duplicateEmailsAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-duplicate-emails-switch\"\n              data-testid=\"duplicate-emails-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={\n                realm.duplicateEmailsAllowed ||\n                (realm.loginWithEmailAllowed &&\n                  realm.registrationEmailAsUsername)\n              }\n              onChange={(value) => {\n                updateSwitchValue({\n                  duplicateEmailsAllowed: value,\n                });\n              }}\n              isDisabled={\n                realm.loginWithEmailAllowed || realm.registrationEmailAsUsername\n              }\n              aria-label={t(\"duplicateEmailsAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"verifyEmail\")}\n            fieldId=\"kc-verify-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"verifyEmailHelpText\")}\n                fieldLabelId=\"verifyEmail\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-verify-email-switch\"\n              data-testid=\"verify-email-switch\"\n              name=\"verifyEmail\"\n              value={realm.verifyEmail ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.verifyEmail}\n              onChange={(value) => {\n                updateSwitchValue({ verifyEmail: value });\n              }}\n              aria-label={t(\"verifyEmail\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-user-info-settings\"\n        title={t(\"userInfoSettings\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"editUsernameAllowed\")}\n            fieldId=\"kc-edit-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"editUsernameHelp\")}\n                fieldLabelId=\"editUsernameAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-edit-username-switch\"\n              data-testid=\"edit-username-switch\"\n              value={realm.editUsernameAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.editUsernameAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ editUsernameAllowed: value });\n              }}\n              aria-label={t(\"editUsernameAllowed\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\n\nimport \"./partial-export.css\";\n\nexport type PartialExportDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const PartialExportDialog = ({\n  isOpen,\n  onClose,\n}: PartialExportDialogProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const [exportGroupsAndRoles, setExportGroupsAndRoles] = useState(false);\n  const [exportClients, setExportClients] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const showWarning = exportGroupsAndRoles || exportClients;\n\n  async function exportRealm() {\n    setIsExporting(true);\n\n    try {\n      const realmExport = await adminClient.realms.export({\n        realm,\n        exportClients,\n        exportGroupsAndRoles,\n      });\n\n      saveAs(\n        new Blob([prettyPrintJSON(realmExport)], {\n          type: \"application/json\",\n        }),\n        \"realm-export.json\",\n      );\n\n      addAlert(t(\"exportSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"exportFail\", error);\n    }\n\n    setIsExporting(false);\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"partialExport\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"export\"\n          data-testid=\"export-button\"\n          isDisabled={isExporting}\n          onClick={exportRealm}\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-button\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"partialExportHeaderText\")}</Text>\n      </TextContent>\n      <Form\n        isHorizontal\n        className=\"keycloak__realm-settings__partial-import_form\"\n      >\n        <FormGroup\n          label={t(\"includeGroupsAndRoles\")}\n          fieldId=\"include-groups-and-roles-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-groups-and-roles-check\"\n            data-testid=\"include-groups-and-roles-check\"\n            isChecked={exportGroupsAndRoles}\n            onChange={setExportGroupsAndRoles}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeGroupsAndRoles\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"includeClients\")}\n          fieldId=\"include-clients-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-clients-check\"\n            data-testid=\"include-clients-check\"\n            onChange={setExportClients}\n            isChecked={exportClients}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeClients\")}\n          />\n        </FormGroup>\n      </Form>\n\n      {showWarning && (\n        <Alert\n          data-testid=\"warning-message\"\n          variant=\"warning\"\n          component=\"p\"\n          title={t(\"exportWarningTitle\")}\n          isInline\n        >\n          {t(\"exportWarningDescription\")}\n        </Alert>\n      )}\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type {\n  PartialImportRealmRepresentation,\n  PartialImportResponse,\n  PartialImportResult,\n} from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  Label,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport {\n  ChangeEvent,\n  FormEvent,\n  MouseEvent as ReactMouseEvent,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { JsonFileUpload } from \"../components/json-file-upload/JsonFileUpload\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nexport type PartialImportProps = {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\n// An imported JSON file can either be an array of realm objects\n// or a single realm object.\ntype ImportedMultiRealm = RealmRepresentation | RealmRepresentation[];\n\ntype NonRoleResource = \"users\" | \"clients\" | \"groups\" | \"identityProviders\";\ntype RoleResource = \"realmRoles\" | \"clientRoles\";\ntype Resource = NonRoleResource | RoleResource;\n\ntype CollisionOption = \"FAIL\" | \"SKIP\" | \"OVERWRITE\";\n\ntype ResourceChecked = { [k in Resource]: boolean };\n\nconst INITIAL_RESOURCES: Readonly<ResourceChecked> = {\n  users: false,\n  clients: false,\n  groups: false,\n  identityProviders: false,\n  realmRoles: false,\n  clientRoles: false,\n};\n\nexport const PartialImportDialog = (props: PartialImportProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const [importedFile, setImportedFile] = useState<ImportedMultiRealm>();\n  const isFileSelected = !!importedFile;\n  const [isRealmSelectOpen, setIsRealmSelectOpen] = useState(false);\n  const [isCollisionSelectOpen, setIsCollisionSelectOpen] = useState(false);\n  const [importInProgress, setImportInProgress] = useState(false);\n  const [collisionOption, setCollisionOption] =\n    useState<CollisionOption>(\"FAIL\");\n  const [targetRealm, setTargetRealm] = useState<RealmRepresentation>({});\n  const [importResponse, setImportResponse] = useState<PartialImportResponse>();\n  const { addError } = useAlerts();\n\n  const [resourcesToImport, setResourcesToImport] = useState(INITIAL_RESOURCES);\n  const isAnyResourceChecked = Object.values(resourcesToImport).some(\n    (checked) => checked,\n  );\n\n  const resetResourcesToImport = () => {\n    setResourcesToImport(INITIAL_RESOURCES);\n  };\n\n  const resetInputState = () => {\n    setImportedFile(undefined);\n    setTargetRealm({});\n    setCollisionOption(\"FAIL\");\n    resetResourcesToImport();\n  };\n\n  // when dialog opens or closes, clear state\n  useEffect(() => {\n    setImportInProgress(false);\n    setImportResponse(undefined);\n    resetInputState();\n  }, [props.open]);\n\n  const handleFileChange = (value: ImportedMultiRealm) => {\n    resetInputState();\n    setImportedFile(value);\n\n    if (!Array.isArray(value)) {\n      setTargetRealm(value);\n    } else if (value.length > 0) {\n      setTargetRealm(value[0]);\n    }\n  };\n\n  const handleRealmSelect = (realm: string | SelectOptionObject) => {\n    setTargetRealm(realm as RealmRepresentation);\n    setIsRealmSelectOpen(false);\n    resetResourcesToImport();\n  };\n\n  const handleResourceCheckBox = (\n    checked: boolean,\n    event: FormEvent<HTMLInputElement>,\n  ) => {\n    const resource = event.currentTarget.name as Resource;\n\n    setResourcesToImport({\n      ...resourcesToImport,\n      [resource]: checked,\n    });\n  };\n\n  const realmSelectOptions = (realms: RealmRepresentation[]) =>\n    realms.map((realm) => (\n      <SelectOption\n        key={realm.id}\n        value={realm}\n        data-testid={realm.id + \"-select-option\"}\n      >\n        {realm.realm || realm.id}\n      </SelectOption>\n    ));\n\n  const handleCollisionSelect = (\n    event: ChangeEvent<Element> | ReactMouseEvent<Element, MouseEvent>,\n    option: string | SelectOptionObject,\n  ) => {\n    setCollisionOption(option as CollisionOption);\n    setIsCollisionSelectOpen(false);\n  };\n\n  const collisionOptions = () => {\n    return [\n      <SelectOption key=\"fail\" value=\"FAIL\">\n        {t(\"FAIL\")}\n      </SelectOption>,\n      <SelectOption key=\"skip\" value=\"SKIP\">\n        {t(\"SKIP\")}\n      </SelectOption>,\n      <SelectOption key=\"overwrite\" value=\"OVERWRITE\">\n        {t(\"OVERWRITE\")}\n      </SelectOption>,\n    ];\n  };\n\n  const targetHasResources = () => {\n    return (\n      targetHasResource(\"users\") ||\n      targetHasResource(\"groups\") ||\n      targetHasResource(\"clients\") ||\n      targetHasResource(\"identityProviders\") ||\n      targetHasRealmRoles() ||\n      targetHasClientRoles()\n    );\n  };\n\n  const targetHasResource = (resource: NonRoleResource) => {\n    const value = targetRealm[resource];\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasRealmRoles = () => {\n    const value = targetRealm.roles?.realm;\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasClientRoles = () => {\n    const value = targetRealm.roles?.client;\n    return value !== undefined && Object.keys(value).length > 0;\n  };\n\n  const itemCount = (resource: Resource) => {\n    if (!isFileSelected) return 0;\n\n    if (resource === \"realmRoles\") {\n      return targetRealm.roles?.realm?.length ?? 0;\n    }\n\n    if (resource === \"clientRoles\") {\n      return targetHasClientRoles()\n        ? clientRolesCount(targetRealm.roles!.client!)\n        : 0;\n    }\n\n    return targetRealm[resource]?.length ?? 0;\n  };\n\n  const clientRolesCount = (\n    clientRoles: Record<string, RoleRepresentation[]>,\n  ) =>\n    Object.values(clientRoles).reduce((total, role) => total + role.length, 0);\n\n  const resourceDataListItem = (\n    resource: Resource,\n    resourceDisplayName: string,\n  ) => {\n    return (\n      <DataListItem aria-labelledby={`${resource}-list-item`}>\n        <DataListItemRow>\n          <DataListItemCells\n            dataListCells={[\n              <DataListCell key={resource}>\n                <Checkbox\n                  id={`${resource}-checkbox`}\n                  label={`${itemCount(resource)} ${resourceDisplayName}`}\n                  aria-labelledby={`${resource}-checkbox`}\n                  name={resource}\n                  isChecked={resourcesToImport[resource]}\n                  onChange={handleResourceCheckBox}\n                  data-testid={resource + \"-checkbox\"}\n                />\n              </DataListCell>,\n            ]}\n          />\n        </DataListItemRow>\n      </DataListItem>\n    );\n  };\n\n  const jsonForImport = () => {\n    const jsonToImport: PartialImportRealmRepresentation = {\n      ifResourceExists: collisionOption,\n      id: targetRealm.id,\n      realm: targetRealm.realm,\n    };\n\n    if (resourcesToImport[\"users\"]) jsonToImport.users = targetRealm.users;\n    if (resourcesToImport[\"groups\"]) jsonToImport.groups = targetRealm.groups;\n    if (resourcesToImport[\"identityProviders\"])\n      jsonToImport.identityProviders = targetRealm.identityProviders;\n    if (resourcesToImport[\"clients\"])\n      jsonToImport.clients = targetRealm.clients;\n    if (resourcesToImport[\"realmRoles\"] || resourcesToImport[\"clientRoles\"]) {\n      jsonToImport.roles = targetRealm.roles;\n      if (!resourcesToImport[\"realmRoles\"]) delete jsonToImport.roles?.realm;\n      if (!resourcesToImport[\"clientRoles\"]) delete jsonToImport.roles?.client;\n    }\n    return jsonToImport;\n  };\n\n  async function doImport() {\n    if (importInProgress) return;\n\n    setImportInProgress(true);\n\n    try {\n      const importResults = await adminClient.realms.partialImport({\n        realm,\n        rep: jsonForImport(),\n      });\n      setImportResponse(importResults);\n    } catch (error) {\n      addError(\"importFail\", error);\n    }\n\n    setImportInProgress(false);\n  }\n\n  const importModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-import\"\n            data-testid=\"import-button\"\n            key=\"import\"\n            isDisabled={!isAnyResourceChecked}\n            onClick={() => {\n              doImport();\n            }}\n          >\n            {t(\"import\")}\n          </Button>,\n          <Button\n            id=\"modal-cancel\"\n            data-testid=\"cancel-button\"\n            key=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>{t(\"partialImportHeaderText\")}</Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <JsonFileUpload\n              id=\"partial-import-file\"\n              allowEditingUploadedText\n              onChange={handleFileChange}\n            />\n          </StackItem>\n\n          {isFileSelected && targetHasResources() && (\n            <>\n              <StackItem>\n                <Divider />\n              </StackItem>\n              {Array.isArray(importedFile) && importedFile.length > 1 && (\n                <StackItem>\n                  <Text>{t(\"selectRealm\")}:</Text>\n                  <Select\n                    toggleId=\"realm-selector\"\n                    isOpen={isRealmSelectOpen}\n                    typeAheadAriaLabel={t(\"realmSelector\")}\n                    aria-label={\"realmSelector\"}\n                    onToggle={() => setIsRealmSelectOpen(!isRealmSelectOpen)}\n                    onSelect={(_, value) => handleRealmSelect(value)}\n                    placeholderText={targetRealm.realm || targetRealm.id}\n                  >\n                    {realmSelectOptions(importedFile)}\n                  </Select>\n                </StackItem>\n              )}\n              <StackItem>\n                <Text>{t(\"chooseResources\")}:</Text>\n                <DataList aria-label={t(\"resourcesToImport\")} isCompact>\n                  {targetHasResource(\"users\") &&\n                    resourceDataListItem(\"users\", t(\"users\"))}\n                  {targetHasResource(\"groups\") &&\n                    resourceDataListItem(\"groups\", t(\"groups\"))}\n                  {targetHasResource(\"clients\") &&\n                    resourceDataListItem(\"clients\", t(\"clients\"))}\n                  {targetHasResource(\"identityProviders\") &&\n                    resourceDataListItem(\n                      \"identityProviders\",\n                      t(\"identityProviders\"),\n                    )}\n                  {targetHasRealmRoles() &&\n                    resourceDataListItem(\"realmRoles\", t(\"realmRoles\"))}\n                  {targetHasClientRoles() &&\n                    resourceDataListItem(\"clientRoles\", t(\"clientRoles\"))}\n                </DataList>\n              </StackItem>\n              <StackItem>\n                <Text>{t(\"selectIfResourceExists\")}:</Text>\n                <Select\n                  isOpen={isCollisionSelectOpen}\n                  direction=\"up\"\n                  onToggle={() => {\n                    setIsCollisionSelectOpen(!isCollisionSelectOpen);\n                  }}\n                  onSelect={handleCollisionSelect}\n                  placeholderText={t(collisionOption)}\n                >\n                  {collisionOptions()}\n                </Select>\n              </StackItem>\n            </>\n          )}\n        </Stack>\n      </Modal>\n    );\n  };\n\n  const importCompleteMessage = () => {\n    return `${t(\"importAdded\", {\n      count: importResponse?.added,\n    })}  ${t(\"importSkipped\", {\n      count: importResponse?.skipped,\n    })} ${t(\"importOverwritten\", {\n      count: importResponse?.overwritten,\n    })}`;\n  };\n\n  const loader = async (first = 0, max = 15) => {\n    if (!importResponse) {\n      return [];\n    }\n\n    const last = Math.min(first + max, importResponse.results.length);\n\n    return importResponse.results.slice(first, last);\n  };\n\n  const ActionLabel = (importRecord: PartialImportResult) => {\n    switch (importRecord.action) {\n      case \"ADDED\":\n        return (\n          <Label key={importRecord.id} color=\"green\">\n            {t(\"added\")}\n          </Label>\n        );\n      case \"SKIPPED\":\n        return (\n          <Label key={importRecord.id} color=\"orange\">\n            {t(\"skipped\")}\n          </Label>\n        );\n      case \"OVERWRITTEN\":\n        return (\n          <Label key={importRecord.id} color=\"purple\">\n            {t(\"overwritten\")}\n          </Label>\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  const TypeRenderer = (importRecord: PartialImportResult) => {\n    const typeMap = new Map([\n      [\"CLIENT\", t(\"clients\")],\n      [\"REALM_ROLE\", t(\"realmRoles\")],\n      [\"USER\", t(\"users\")],\n      [\"CLIENT_ROLE\", t(\"clientRoles\")],\n      [\"IDP\", t(\"identityProviders\")],\n      [\"GROUP\", t(\"groups\")],\n    ]);\n\n    return <span>{typeMap.get(importRecord.resourceType)}</span>;\n  };\n\n  const importCompletedModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-close\"\n            data-testid=\"close-button\"\n            key=\"close\"\n            variant={ButtonVariant.primary}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"close\")}\n          </Button>,\n        ]}\n      >\n        <Alert\n          variant=\"success\"\n          component=\"p\"\n          isInline\n          title={importCompleteMessage()}\n        />\n        <KeycloakDataTable\n          loader={loader}\n          isPaginated\n          ariaLabelKey=\"partialImport\"\n          columns={[\n            {\n              name: \"action\",\n              displayKey: \"action\",\n              cellRenderer: ActionLabel,\n            },\n            {\n              name: \"resourceType\",\n              displayKey: \"type\",\n              cellRenderer: TypeRenderer,\n            },\n            {\n              name: \"resourceName\",\n              displayKey: \"name\",\n            },\n            {\n              name: \"id\",\n              displayKey: \"id\",\n            },\n          ]}\n        />\n      </Modal>\n    );\n  };\n\n  if (!importResponse) {\n    return importModal();\n  }\n\n  return importCompletedModal();\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  PageSection,\n  Radio,\n  Switch,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { toAddClientPolicy } from \"./routes/AddClientPolicy\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\n\nimport \"./realm-settings-section.css\";\n\nexport const PoliciesTab = () => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const [show, setShow] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ClientPolicyRepresentation>();\n  const [key, setKey] = useState(0);\n  const [code, setCode] = useState<string>();\n  const [tablePolicies, setTablePolicies] =\n    useState<ClientPolicyRepresentation[]>();\n  const refresh = () => setKey(key + 1);\n\n  const form = useForm<Record<string, boolean>>({ mode: \"onChange\" });\n\n  useFetch(\n    () => adminClient.clientPolicies.listPolicies(),\n    (policies) => {\n      setPolicies(policies.policies),\n        setTablePolicies(policies.policies || []),\n        setCode(prettyPrintJSON(policies.policies));\n    },\n    [key],\n  );\n\n  const loader = async () => policies ?? [];\n\n  const saveStatus = async () => {\n    const switchValues = form.getValues();\n\n    const updatedPolicies = policies?.map<ClientPolicyRepresentation>(\n      (policy) => {\n        const enabled = switchValues[policy.name!];\n\n        return {\n          ...policy,\n          enabled,\n        };\n      },\n    );\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      navigate(toClientPolicies({ realm, tab: \"policies\" }));\n      addAlert(t(\"updateClientPolicySuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateClientPolicyError\", error);\n    }\n  };\n\n  const ClientPolicyDetailLink = ({ name }: ClientPolicyRepresentation) => (\n    <Link to={toEditClientPolicy({ realm, policyName: name! })}>{name}</Link>\n  );\n\n  const SwitchRenderer = ({\n    clientPolicy,\n  }: {\n    clientPolicy: ClientPolicyRepresentation;\n  }) => {\n    const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n      titleKey: \"disablePolicyConfirmTitle\",\n      messageKey: \"disablePolicyConfirm\",\n      continueButtonLabel: \"disable\",\n      onConfirm: () => {\n        form.setValue(clientPolicy.name!, false);\n        saveStatus();\n      },\n    });\n\n    return (\n      <>\n        <DisableConfirm />\n        <Controller\n          name={clientPolicy.name!}\n          data-testid={`${clientPolicy.name!}-switch`}\n          defaultValue={clientPolicy.enabled}\n          control={form.control}\n          render={({ field }) => (\n            <Switch\n              label={t(\"enabled\")}\n              labelOff={t(\"disabled\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                  saveStatus();\n                }\n              }}\n              aria-label={clientPolicy.name!}\n            />\n          )}\n        />\n      </>\n    );\n  };\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientPolicyRepresentation[] = JSON.parse(code);\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: obj,\n        });\n        addAlert(t(\"updateClientPoliciesSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"updateClientPoliciesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n      addError(\"updateClientPoliciesError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: selectedPolicy?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies?.filter(\n        (policy) => policy.name !== selectedPolicy?.name,\n      );\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(t(\"deleteClientPolicyError\"), error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-policies-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"policiesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"policiesView\"\n              onChange={() => setShow(false)}\n              label={t(\"policiesConfigTypes.formView\")}\n              id=\"formView-policiesView\"\n              data-testid=\"formView-policiesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"policiesView\"\n              onChange={() => setShow(true)}\n              label={t(\"policiesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-policiesView\"\n              data-testid=\"jsonEditor-policiesView\"\n              className=\"kc-editor-radio-btn\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={policies.length}\n          emptyState={\n            <ListEmptyState\n              message={t(\"noClientPolicies\")}\n              instructions={t(\"noClientPoliciesInstructions\")}\n              primaryActionText={t(\"createClientPolicy\")}\n              onPrimaryAction={() => navigate(toAddClientPolicy({ realm }))}\n            />\n          }\n          ariaLabelKey=\"clientPolicies\"\n          searchPlaceholderKey=\"clientPolicySearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createPolicy\"\n                component={(props) => (\n                  <Link {...props} to={toAddClientPolicy({ realm })} />\n                )}\n                data-testid=\"createPolicy\"\n              >\n                {t(\"createClientPolicy\")}\n              </Button>\n            </ToolbarItem>\n          }\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (item) => {\n                toggleDeleteDialog();\n                setSelectedPolicy(item);\n              },\n            } as Action<ClientPolicyRepresentation>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientPolicyDetailLink,\n            },\n            {\n              name: \"enabled\",\n              displayKey: \"status\",\n              cellRenderer: (clientPolicy) => (\n                <SwitchRenderer clientPolicy={clientPolicy} />\n              ),\n            },\n            {\n              name: \"description\",\n            },\n          ]}\n        />\n      ) : (\n        <>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={setCode}\n            />\n          </div>\n          <div className=\"pf-u-mt-md\">\n            <Button\n              variant={ButtonVariant.primary}\n              className=\"pf-u-mr-md pf-u-ml-lg\"\n              data-testid=\"jsonEditor-policies-saveBtn\"\n              onClick={save}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant={ButtonVariant.link}\n              data-testid=\"jsonEditor-reloadBtn\"\n              onClick={() => {\n                setCode(prettyPrintJSON(tablePolicies));\n              }}\n            >\n              {t(\"reload\")}\n            </Button>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n","import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Radio,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { omit } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { toAddClientProfile } from \"./routes/AddClientProfile\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nexport default function ProfilesTab() {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n  const [globalProfiles, setGlobalProfiles] =\n    useState<ClientProfileRepresentation[]>();\n  const [selectedProfile, setSelectedProfile] = useState<ClientProfile>();\n  const [show, setShow] = useState(false);\n  const [code, setCode] = useState<string>();\n  const [key, setKey] = useState(0);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      setGlobalProfiles(allProfiles.globalProfiles);\n\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        }),\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      const allClientProfiles = globalProfiles?.concat(profiles ?? []);\n      setTableProfiles(allClientProfiles || []);\n      setCode(JSON.stringify(allClientProfiles, null, 2));\n    },\n    [key],\n  );\n\n  const loader = async () => tableProfiles ?? [];\n\n  const normalizeProfile = (\n    profile: ClientProfile,\n  ): ClientProfileRepresentation => omit(profile, \"global\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientProfileConfirm\", {\n      profileName: selectedProfile?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedProfiles = tableProfiles\n        ?.filter(\n          (profile) =>\n            profile.name !== selectedProfile?.name && !profile.global,\n        )\n        .map<ClientProfileRepresentation>((profile) =>\n          normalizeProfile(profile),\n        );\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: updatedProfiles,\n          globalProfiles,\n        });\n        addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(t(\"deleteClientError\"), error);\n      }\n    },\n  });\n\n  const cellFormatter = (row: ClientProfile) => (\n    <Link\n      to={toClientProfile({\n        realm,\n        profileName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name} {row.global && <Label color=\"blue\">{t(\"global\")}</Label>}\n    </Link>\n  );\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientProfile[] = JSON.parse(code);\n      const changedProfiles = obj\n        .filter((profile) => !profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      const changedGlobalProfiles = obj\n        .filter((profile) => profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: changedProfiles,\n          globalProfiles: changedGlobalProfiles,\n        });\n        addAlert(t(\"updateClientProfilesSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(\"updateClientProfilesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n    }\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-profiles-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"profilesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"profilesView\"\n              onChange={() => setShow(false)}\n              label={t(\"profilesConfigTypes.formView\")}\n              id=\"formView-profilesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n              data-testid=\"formView-profilesView\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"profilesView\"\n              onChange={() => setShow(true)}\n              label={t(\"profilesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-profilesView\"\n              className=\"kc-editor-radio-btn\"\n              data-testid=\"jsonEditor-profilesView\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={tableProfiles.length}\n          ariaLabelKey=\"profiles\"\n          searchPlaceholderKey=\"clientProfileSearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createProfile\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAddClientProfile({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid=\"createProfile\"\n              >\n                {t(\"createClientProfile\")}\n              </Button>\n            </ToolbarItem>\n          }\n          isRowDisabled={(value) => value.global}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (profile) => {\n                setSelectedProfile(profile);\n                toggleDeleteDialog();\n              },\n            } as Action<ClientProfile>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: t(\"name\"),\n              cellRenderer: cellFormatter,\n            },\n            {\n              name: \"description\",\n              displayKey: t(\"clientProfileDescription\"),\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyClientProfiles\")}\n              instructions={t(\"emptyClientProfilesInstructions\")}\n            />\n          }\n        />\n      ) : (\n        <FormGroup fieldId={\"jsonEditor\"}>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={(value) => {\n                setCode(value ?? \"\");\n              }}\n            />\n          </div>\n          <ActionGroup>\n            <div className=\"pf-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-u-mr-md pf-u-ml-lg\"\n                onClick={save}\n                data-testid=\"jsonEditor-saveBtn\"\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setCode(prettyPrintJSON(tableProfiles));\n                }}\n                data-testid=\"jsonEditor-reloadBtn\"\n              >\n                {t(\"reload\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormGroup>\n      )}\n    </>\n  );\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { TimeSelector } from \"../components/time-selector/TimeSelector\";\nimport { convertToFormValues } from \"../util\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsSessionsTab = ({\n  realm,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n\n  const { setValue, control, handleSubmit, formState } =\n    useForm<RealmRepresentation>();\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n  });\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        title={t(\"SSOSessionSettings\")}\n        className=\"kc-sso-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"SSOSessionIdle\")}\n            fieldId=\"SSOSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdle\")}\n                fieldLabelId=\"SSOSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeout\"\n              defaultValue={realm.ssoSessionIdleTimeout}\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle\"\n                  data-testid=\"sso-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMax\")}\n            fieldId=\"SSOSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMax\")}\n                fieldLabelId=\"SSOSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max\"\n                  data-testid=\"sso-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionIdleRememberMe\")}\n            fieldId=\"SSOSessionIdleRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdleRememberMe\")}\n                fieldLabelId=\"SSOSessionIdleRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeoutRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle-remember-me\"\n                  data-testid=\"sso-session-idle-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMaxRememberMe\")}\n            fieldId=\"SSOSessionMaxRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMaxRememberMe\")}\n                fieldLabelId=\"SSOSessionMaxRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespanRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max-remember-me\"\n                  data-testid=\"sso-session-max-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"clientSessionSettings\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"clientSessionIdle\")}\n            fieldId=\"clientSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionIdleHelp\")}\n                fieldLabelId=\"clientSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-idle\"\n                  data-testid=\"client-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"clientSessionMax\")}\n            fieldId=\"clientSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionMaxHelp\")}\n                fieldLabelId=\"clientSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-max\"\n                  data-testid=\"client-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"offlineSessionSettings\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"offlineSessionIdle\")}\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionIdleHelp\")}\n                fieldLabelId=\"offlineSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-offline-session-idle\"\n                  data-testid=\"offline-session-idle-input\"\n                  aria-label=\"offline-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"offlineSessionMaxLimited\")}\n            fieldId=\"kc-offlineSessionMaxLimited\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionMaxLimitedHelp\")}\n                fieldLabelId=\"offlineSessionMaxLimited\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionMaxLifespanEnabled\"\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-offline-session-max\"\n                  data-testid=\"offline-session-max-switch\"\n                  aria-label={t(\"offlineSessionMaxLimited\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"loginSettings\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"loginTimeout\")}\n            id=\"kc-login-timeout-label\"\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginTimeoutHelp\")}\n                fieldLabelId=\"loginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanLogin\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-timeout\"\n                  data-testid=\"login-timeout-input\"\n                  aria-label=\"login-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginActionTimeout\")}\n            fieldId=\"loginActionTimeout\"\n            id=\"login-action-timeout-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginActionTimeoutHelp\")}\n                fieldLabelId=\"loginActionTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanUserAction\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-action-timeout\"\n                  data-testid=\"login-action-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"sessions-tab-save\"\n              isDisabled={!formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { convertToFormValues } from \"../util\";\n\ntype RealmSettingsThemesTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsThemesTab = ({\n  realm,\n  save,\n}: RealmSettingsThemesTabProps) => {\n  const { t } = useTranslation();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const [accountThemeOpen, setAccountThemeOpen] = useState(false);\n  const [adminUIThemeOpen, setAdminUIThemeOpen] = useState(false);\n  const [emailThemeOpen, setEmailThemeOpen] = useState(false);\n\n  const { control, handleSubmit, setValue } = useForm<RealmRepresentation>();\n  const themeTypes = useServerInfo().themes!;\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"loginTheme\")}\n          fieldId=\"kc-login-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"loginThemeHelp\")}\n              fieldLabelId=\"loginTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"loginTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-login-theme\"\n                onToggle={() => setLoginThemeOpen(!loginThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setLoginThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={loginThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-login-theme\"\n                aria-label={t(\"selectLoginTheme\")}\n              >\n                {themeTypes.login.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`login-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"accountTheme\")}\n          fieldId=\"kc-account-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"accountThemeHelp\")}\n              fieldLabelId=\"accountTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"accountTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-account-theme\"\n                onToggle={() => setAccountThemeOpen(!accountThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAccountThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"selectAccountTheme\")}\n                isOpen={accountThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-account-theme\"\n              >\n                {themeTypes.account\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`account-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(`${theme.name}`)}\n                    </SelectOption>\n                  ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"adminTheme\")}\n          fieldId=\"kc-admin-ui-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"adminThemeHelp\")}\n              fieldLabelId=\"adminTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"adminTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-admin-ui-theme\"\n                onToggle={() => setAdminUIThemeOpen(!adminUIThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAdminUIThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={adminUIThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-admin-theme\"\n                aria-label=\"selectAdminTheme\"\n              >\n                {themeTypes.admin\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`admin-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(`${theme.name}`)}\n                    </SelectOption>\n                  ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"emailTheme\")}\n          fieldId=\"kc-email-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"emailThemeHelp\")}\n              fieldLabelId=\"emailTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"emailTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-email-theme\"\n                onToggle={() => setEmailThemeOpen(!emailThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setEmailThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={emailThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-email-theme\"\n                aria-label={t(\"selectEmailTheme\")}\n              >\n                {themeTypes.email.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`email-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button variant=\"primary\" type=\"submit\" data-testid=\"themes-tab-save\">\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport {\n  TimeSelector,\n  toHumanFormat,\n} from \"../components/time-selector/TimeSelector\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { beerify, convertToFormValues, sortProviders } from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n  reset?: () => void;\n};\n\nexport const RealmSettingsTokensTab = ({\n  realm,\n  reset,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const { whoAmI } = useWhoAmI();\n\n  const [defaultSigAlgDrpdwnIsOpen, setDefaultSigAlgDrpdwnOpen] =\n    useState(false);\n\n  const defaultSigAlgOptions = sortProviders(\n    serverInfo.providers![\"signature\"].providers,\n  );\n\n  const form = useForm<RealmRepresentation>();\n  const { setValue, control } = form;\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n    defaultValue: realm.offlineSessionMaxLifespanEnabled,\n  });\n\n  const ssoSessionIdleTimeout = useWatch({\n    control,\n    name: \"ssoSessionIdleTimeout\",\n    defaultValue: 36000,\n  });\n\n  const revokeRefreshToken = useWatch({\n    control,\n    name: \"revokeRefreshToken\",\n    defaultValue: false,\n  });\n\n  useEffect(() => {\n    convertToFormValues(realm, setValue);\n  }, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"general\")} className=\"kc-sso-session-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"defaultSigAlg\")}\n            fieldId=\"kc-default-signature-algorithm\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultSigAlgHelp\")}\n                fieldLabelId=\"algorithm\"\n              />\n            }\n          >\n            <Controller\n              name=\"defaultSignatureAlgorithm\"\n              defaultValue={\"RS256\"}\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-default-sig-alg\"\n                  onToggle={() =>\n                    setDefaultSigAlgDrpdwnOpen(!defaultSigAlgDrpdwnIsOpen)\n                  }\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setDefaultSigAlgDrpdwnOpen(false);\n                  }}\n                  selections={[field.value?.toString()]}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"defaultSigAlg\")}\n                  isOpen={defaultSigAlgDrpdwnIsOpen}\n                  data-testid=\"select-default-sig-alg\"\n                >\n                  {defaultSigAlgOptions!.map((p, idx) => (\n                    <SelectOption\n                      selected={p === field.value}\n                      key={`default-sig-alg-${idx}`}\n                      value={p}\n                    ></SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          {isFeatureEnabled(Feature.DeviceFlow) && (\n            <>\n              <FormGroup\n                label={t(\"oAuthDeviceCodeLifespan\")}\n                fieldId=\"oAuthDeviceCodeLifespan\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDeviceCodeLifespanHelp\")}\n                    fieldLabelId=\"oAuthDeviceCodeLifespan\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DeviceCodeLifespan\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <TimeSelector\n                      id=\"oAuthDeviceCodeLifespan\"\n                      data-testid=\"oAuthDeviceCodeLifespan\"\n                      value={field.value || 0}\n                      onChange={field.onChange}\n                      units={[\"minute\", \"hour\", \"day\"]}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"oAuthDevicePollingInterval\")}\n                fieldId=\"oAuthDevicePollingInterval\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDevicePollingIntervalHelp\")}\n                    fieldLabelId=\"oAuthDevicePollingInterval\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DevicePollingInterval\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <NumberInput\n                      id=\"oAuthDevicePollingInterval\"\n                      value={field.value}\n                      min={0}\n                      onPlus={() => field.onChange(field.value || 0 + 1)}\n                      onMinus={() => field.onChange(field.value || 0 - 1)}\n                      onChange={(event) => {\n                        const newValue = Number(event.currentTarget.value);\n                        field.onChange(!isNaN(newValue) ? newValue : 0);\n                      }}\n                      placeholder={t(\"oAuthDevicePollingInterval\")}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"shortVerificationUri\")}\n                fieldId=\"shortVerificationUri\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"shortVerificationUriTooltipHelp\")}\n                    fieldLabelId=\"shortVerificationUri\"\n                  />\n                }\n              >\n                <KeycloakTextInput\n                  id=\"shortVerificationUri\"\n                  placeholder={t(\"shortVerificationUri\")}\n                  {...form.register(\"attributes.shortVerificationUri\")}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"refreshTokens\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"revokeRefreshToken\")}\n            fieldId=\"kc-revoke-refresh-token\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"revokeRefreshTokenHelp\")}\n                fieldLabelId=\"revokeRefreshToken\"\n              />\n            }\n          >\n            <Controller\n              name=\"revokeRefreshToken\"\n              control={form.control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-revoke-refresh-token\"\n                  data-testid=\"revoke-refresh-token-switch\"\n                  aria-label={t(\"revokeRefreshToken\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {revokeRefreshToken && (\n            <FormGroup\n              label={t(\"refreshTokenMaxReuse\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"refreshTokenMaxReuseHelp\")}\n                  fieldLabelId=\"refreshTokenMaxReuse\"\n                />\n              }\n              fieldId=\"refreshTokenMaxReuse\"\n            >\n              <Controller\n                name=\"refreshTokenMaxReuse\"\n                defaultValue={0}\n                control={form.control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"refreshTokenMaxReuseMs\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value! + 1)}\n                    onMinus={() => field.onChange(field.value! - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"accessTokens\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"accessTokenLifespan\")}\n            fieldId=\"accessTokenLifespan\"\n            helperText={t(\"recommendedSsoTimeout\", {\n              time: toHumanFormat(ssoSessionIdleTimeout!, whoAmI.getLocale()),\n            })}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanHelp\")}\n                fieldLabelId=\"accessTokenLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  validated={\n                    field.value! > ssoSessionIdleTimeout!\n                      ? \"warning\"\n                      : \"default\"\n                  }\n                  className=\"kc-access-token-lifespan\"\n                  data-testid=\"access-token-lifespan-input\"\n                  aria-label=\"access-token-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"accessTokenLifespanImplicitFlow\")}\n            fieldId=\"accessTokenLifespanImplicitFlow\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanImplicitFlow\")}\n                fieldLabelId=\"accessTokenLifespanImplicitFlow\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespanForImplicitFlow\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-access-token-lifespan-implicit\"\n                  data-testid=\"access-token-lifespan-implicit-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"clientLoginTimeout\")}\n            fieldId=\"clientLoginTimeout\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientLoginTimeoutHelp\")}\n                fieldLabelId=\"clientLoginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-login-timeout\"\n                  data-testid=\"client-login-timeout-input\"\n                  aria-label=\"client-login-timeout\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={form.control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"actionTokens\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"userInitiatedActionLifespan\")}\n            id=\"kc-user-initiated-action-lifespan\"\n            fieldId=\"userInitiatedActionLifespan\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"userInitiatedActionLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByUserLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-user-initiated-action-lifespan\"\n                  data-testid=\"user-initiated-action-lifespan\"\n                  aria-label=\"user-initiated-action-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultAdminInitiated\")}\n            fieldId=\"defaultAdminInitiated\"\n            id=\"default-admin-initiated-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultAdminInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"defaultAdminInitiated\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByAdminLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-default-admin-initiated\"\n                  data-testid=\"default-admin-initated-input\"\n                  aria-label=\"default-admin-initated-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <Text\n            className=\"kc-override-action-tokens-subtitle\"\n            component={TextVariants.h1}\n          >\n            {t(\"overrideActionTokens\")}\n          </Text>\n          <FormGroup\n            label={t(\"emailVerification\")}\n            fieldId=\"emailVerification\"\n            id=\"email-verification\"\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.verify-email\",\n              )}`}\n              defaultValue=\"\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-email-verification\"\n                  data-testid=\"email-verification-input\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value.toString())}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"idpAccountEmailVerification\")}\n            fieldId=\"idpAccountEmailVerification\"\n            id=\"idp-acct-label\"\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.idp-verify-account-via-email\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-idp-email-verification\"\n                  data-testid=\"idp-email-verification-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"forgotPassword\")}\n            fieldId=\"forgotPassword\"\n            id=\"forgot-password-label\"\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.reset-credentials\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-forgot-pw\"\n                  data-testid=\"forgot-pw-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"executeActions\")}\n            fieldId=\"executeActions\"\n            id=\"execute-actions\"\n          >\n            <Controller\n              name={`attributes.${beerify(\n                \"actionTokenGeneratedByUserLifespan.execute-actions\",\n              )}`}\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-execute-actions\"\n                  data-testid=\"execute-actions-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"tokens-tab-save\"\n              isDisabled={!form.formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={reset}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Popover,\n  Text,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUserFederation } from \"../user-federation/routes/UserFederation\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useToggle from \"../utils/useToggle\";\n\nexport const DefaultsGroupsTab = () => {\n  const { t } = useTranslation();\n\n  const [isKebabOpen, toggleKebab] = useToggle();\n  const [isGroupPickerOpen, toggleGroupPicker] = useToggle();\n  const [defaultGroups, setDefaultGroups] = useState<GroupRepresentation[]>();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [key, setKey] = useState(0);\n  const [load, setLoad] = useState(0);\n  const reload = () => setLoad(load + 1);\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { enabled } = useHelp();\n\n  useFetch(\n    () => adminClient.realms.getDefaultGroups({ realm }),\n    (groups) => {\n      setDefaultGroups(groups);\n      setKey(key + 1);\n    },\n    [load],\n  );\n\n  const loader = () => Promise.resolve(defaultGroups!);\n\n  const removeGroup = async () => {\n    try {\n      await Promise.all(\n        selectedRows.map((group) =>\n          adminClient.realms.removeDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"groupRemove\", { count: selectedRows.length }),\n        AlertVariant.success,\n      );\n      setSelectedRows([]);\n    } catch (error) {\n      addError(\"groupRemoveError\", error);\n    }\n    reload();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]) => {\n    try {\n      await Promise.all(\n        groups.map((group) =>\n          adminClient.realms.addDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"defaultGroupAdded\", { count: groups.length }),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"defaultGroupAddedError\", error);\n    }\n    reload();\n  };\n\n  const [toggleRemoveDialog, RemoveDialog] = useConfirmDialog({\n    titleKey: t(\"removeConfirmTitle\", { count: selectedRows.length }),\n    messageKey: t(\"removeConfirm\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: removeGroup,\n  });\n\n  if (!defaultGroups) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <RemoveDialog />\n      {isGroupPickerOpen && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"addDefaultGroups\",\n            ok: \"add\",\n          }}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            toggleGroupPicker();\n          }}\n          onClose={toggleGroupPicker}\n        />\n      )}\n      {enabled && (\n        <Popover\n          bodyContent={\n            <Trans i18nKey=\"defaultGroupsHelp\">\n              {\" \"}\n              <Link to={toUserFederation({ realm })} />.\n            </Trans>\n          }\n        >\n          <TextContent\n            className=\"keycloak__section_intro__help\"\n            style={{\n              paddingLeft: \"var(--pf-c-page__main-section--PaddingLeft)\",\n            }}\n          >\n            <Text>\n              <QuestionCircleIcon /> {t(\"whatIsDefaultGroups\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n      <KeycloakDataTable\n        key={key}\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        loader={loader}\n        ariaLabelKey=\"defaultGroups\"\n        searchPlaceholderKey=\"searchForGroups\"\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Button\n                data-testid=\"openCreateGroupModal\"\n                variant=\"primary\"\n                onClick={toggleGroupPicker}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                toggle={\n                  <KebabToggle\n                    onToggle={toggleKebab}\n                    isDisabled={selectedRows!.length === 0}\n                  />\n                }\n                isOpen={isKebabOpen}\n                isPlain\n                dropdownItems={[\n                  <DropdownItem\n                    key=\"action\"\n                    component=\"button\"\n                    onClick={() => {\n                      toggleRemoveDialog();\n                      toggleKebab();\n                    }}\n                  >\n                    {t(\"remove\")}\n                  </DropdownItem>,\n                ]}\n              />\n            </ToolbarItem>\n          </>\n        }\n        actions={[\n          {\n            title: t(\"remove\"),\n            onRowClick: (group) => {\n              setSelectedRows([group]);\n              toggleRemoveDialog();\n              return Promise.resolve(false);\n            },\n          } as Action<GroupRepresentation>,\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groupName\",\n          },\n          {\n            name: \"path\",\n            displayKey: \"path\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noDefaultGroups\")}\n            instructions={\n              <Trans i18nKey=\"noDefaultGroupsInstructions\">\n                {\" \"}\n                <Link\n                  className=\"pf-u-font-weight-light\"\n                  to={toUserFederation({ realm })}\n                />\n                Add groups...\n              </Trans>\n            }\n            primaryActionText={t(\"addGroups\")}\n            onPrimaryAction={toggleGroupPicker}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { DefaultsGroupsTab } from \"./DefaultGroupsTab\";\n\nexport const UserRegistration = () => {\n  const { t } = useTranslation();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [activeTab, setActiveTab] = useState(10);\n  const [key, setKey] = useState(0);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    [],\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    const compositeArray = composites;\n\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: realm.defaultRole!.id!, realm: realmName },\n        compositeArray,\n      );\n      setKey(key + 1);\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addAssociatedRolesError\", error);\n    }\n  };\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        key={key}\n        id=\"roles\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"defaultRoles\")}</TabTitleText>}\n        data-testid=\"default-roles-tab\"\n      >\n        <RoleMapping\n          name={realm.defaultRole!.name!}\n          id={realm.defaultRole!.id!}\n          type=\"roles\"\n          isManager\n          save={(rows) => addComposites(rows.map((r) => r.role))}\n        />\n      </Tab>\n      <Tab\n        id=\"groups\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"defaultGroups\")}</TabTitleText>}\n        data-testid=\"default-groups-tab\"\n      >\n        <DefaultsGroupsTab />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Button, ToolbarItem } from \"@patternfly/react-core\";\n\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\n\nexport type EventType = {\n  id: string;\n};\n\ntype EventsTypeTableProps = {\n  ariaLabelKey?: string;\n  eventTypes: string[];\n  addTypes?: () => void;\n  onSelect?: (value: EventType[]) => void;\n  onDelete?: (value: EventType) => void;\n};\n\nexport function EventsTypeTable({\n  ariaLabelKey = \"userEventsRegistered\",\n  eventTypes,\n  addTypes,\n  onSelect,\n  onDelete,\n}: EventsTypeTableProps) {\n  const { t } = useTranslation();\n\n  const data = eventTypes.map((type) => ({\n    id: type,\n    name: t(`eventTypes.${type}.name`),\n    description: t(`eventTypes.${type}.description`),\n  }));\n  return (\n    <KeycloakDataTable\n      ariaLabelKey={ariaLabelKey}\n      searchPlaceholderKey=\"searchEventType\"\n      loader={data}\n      onSelect={onSelect ? onSelect : undefined}\n      canSelectAll={!!onSelect}\n      toolbarItem={\n        addTypes && (\n          <ToolbarItem>\n            <Button id=\"addTypes\" onClick={addTypes} data-testid=\"addTypes\">\n              {t(\"addSavedTypes\")}\n            </Button>\n          </ToolbarItem>\n        )\n      }\n      actions={\n        !onDelete\n          ? []\n          : [\n              {\n                title: t(\"remove\"),\n                onRowClick: onDelete,\n              } as Action<EventType>,\n            ]\n      }\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"eventType\",\n        },\n        {\n          name: \"description\",\n          displayKey: \"description\",\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"emptyEvents\")}\n          instructions={t(\"emptyEventsInstructions\")}\n        />\n      }\n    />\n  );\n}\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\n\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype AddEventTypesDialogProps = {\n  onConfirm: (selected: EventType[]) => void;\n  onClose: () => void;\n  configured: string[];\n};\n\nexport const AddEventTypesDialog = ({\n  onConfirm,\n  onClose,\n  configured,\n}: AddEventTypesDialogProps) => {\n  const { t } = useTranslation();\n  const { enums } = useServerInfo();\n\n  const [selectedTypes, setSelectedTypes] = useState<EventType[]>([]);\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"addTypes\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"addEventTypeConfirm\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onConfirm(selectedTypes)}\n        >\n          {t(\"add\")}\n        </Button>,\n        <Button\n          data-testid=\"moveCancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <EventsTypeTable\n        ariaLabelKey=\"addTypes\"\n        onSelect={(selected) => setSelectedTypes(selected)}\n        eventTypes={enums![\"eventType\"].filter(\n          (type) => !configured.includes(type),\n        )}\n      />\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  FormGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport type EventsType = \"admin\" | \"user\";\n\ntype EventConfigFormProps = {\n  type: EventsType;\n  form: UseFormReturn;\n  reset: () => void;\n  clear: () => void;\n};\n\nexport const EventConfigForm = ({\n  type,\n  form,\n  reset,\n  clear,\n}: EventConfigFormProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    watch,\n    setValue,\n    formState: { isDirty },\n  } = form;\n  const eventKey = type === \"admin\" ? \"adminEventsEnabled\" : \"eventsEnabled\";\n  const eventsEnabled: boolean = watch(eventKey);\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"events-disable-title\",\n    messageKey: \"events-disable-confirm\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: () => setValue(eventKey, false, { shouldDirty: true }),\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"saveEvents\")}\n        fieldId={eventKey}\n        labelIcon={\n          <HelpItem\n            helpText={t(`save-${type}-eventsHelp`)}\n            fieldLabelId=\"saveEvents\"\n          />\n        }\n      >\n        <Controller\n          name={eventKey}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              data-testid={eventKey}\n              id={`${eventKey}-switch`}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                }\n              }}\n              aria-label={t(\"saveEvents\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {eventsEnabled && (\n        <>\n          {type === \"admin\" && (\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"includeRepresentation\")}\n              fieldId=\"includeRepresentation\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"includeRepresentationHelp\")}\n                  fieldLabelId=\"includeRepresentation\"\n                />\n              }\n            >\n              <Controller\n                name=\"adminEventsDetailsEnabled\"\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"includeRepresentation\"\n                    id=\"includeRepresentation\"\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    isChecked={field.value}\n                    onChange={field.onChange}\n                    aria-label={t(\"includeRepresentation\")}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"expiration\")}\n            fieldId=\"expiration\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"expirationHelp\")}\n                fieldLabelId=\"expiration\"\n              />\n            }\n          >\n            <Controller\n              name={\n                type === \"user\" ? \"eventsExpiration\" : \"adminEventsExpiration\"\n              }\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          id={`save-${type}`}\n          data-testid={`save-${type}`}\n          isDisabled={!isDirty}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n      <Divider />\n      <FormGroup\n        label={type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        fieldId={`clear-${type}-events`}\n        labelIcon={\n          <HelpItem\n            helpText={t(`${type}-clearEventsHelp`)}\n            fieldLabelId={`clear-${type}-events`}\n          />\n        }\n      >\n        <Button\n          variant=\"danger\"\n          id={`clear-${type}-events`}\n          data-testid={`clear-${type}-events`}\n          onClick={() => clear()}\n        >\n          {type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        </Button>\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype EventListenersFormProps = {\n  form: UseFormReturn;\n  reset: () => void;\n};\n\nexport const EventListenersForm = ({\n  form,\n  reset,\n}: EventListenersFormProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const [selectEventListenerOpen, setSelectEventListenerOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const eventListeners = serverInfo.providers?.eventsListener.providers;\n\n  return (\n    <>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"eventListeners\")}\n        fieldId={\"kc-eventListeners\"}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"eventListenersHelpTextHelp\")}\n            fieldLabelId=\"eventListeners\"\n          />\n        }\n      >\n        <Controller\n          name=\"eventsListeners\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              name=\"eventsListeners\"\n              className=\"kc_eventListeners_select\"\n              data-testid=\"eventListeners-select\"\n              chipGroupProps={{\n                numChips: 3,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              variant={SelectVariant.typeaheadMulti}\n              typeAheadAriaLabel=\"Select\"\n              onToggle={(isOpen) => setSelectEventListenerOpen(isOpen)}\n              selections={field.value}\n              onSelect={(_, selectedValue) => {\n                const option = selectedValue.toString();\n                const changedValue = field.value.includes(option)\n                  ? field.value.filter((item: string) => item !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }}\n              onClear={(operation) => {\n                operation.stopPropagation();\n                field.onChange([]);\n              }}\n              isOpen={selectEventListenerOpen}\n              aria-label={\"selectEventsListeners\"}\n            >\n              {Object.keys(eventListeners!).map((event) => (\n                <SelectOption key={event} value={event} />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          data-testid={\"saveEventListenerBtn\"}\n          isDisabled={!isDirty}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          data-testid={\"revertEventListenerBtn\"}\n          onClick={reset}\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </>\n  );\n};\n","import type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertToFormValues } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { AddEventTypesDialog } from \"./AddEventTypesDialog\";\nimport { EventConfigForm, EventsType } from \"./EventConfigForm\";\nimport { EventListenersForm } from \"./EventListenersForm\";\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\n\ntype EventsTabProps = {\n  realm: RealmRepresentation;\n};\n\ntype EventsConfigForm = RealmEventsConfigRepresentation & {\n  adminEventsExpiration?: number;\n};\n\nexport const EventsTab = ({ realm }: EventsTabProps) => {\n  const { t } = useTranslation();\n  const form = useForm<EventsConfigForm>();\n  const { setValue, handleSubmit } = form;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [tableKey, setTableKey] = useState(0);\n  const reload = () => setTableKey(new Date().getTime());\n\n  const [activeTab, setActiveTab] = useState(\"event\");\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [type, setType] = useState<EventsType>();\n  const [addEventType, setAddEventType] = useState(false);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const setupForm = (eventConfig?: EventsConfigForm) => {\n    setEvents(eventConfig);\n    convertToFormValues(eventConfig || {}, setValue);\n  };\n\n  const clear = async (type: EventsType) => {\n    setType(type);\n    toggleDeleteDialog();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteEvents\",\n    messageKey: \"deleteEventsConfirm\",\n    continueButtonLabel: \"clear\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        switch (type) {\n          case \"admin\":\n            await adminClient.realms.clearAdminEvents({ realm: realmName });\n            break;\n          case \"user\":\n            await adminClient.realms.clearEvents({ realm: realmName });\n            break;\n        }\n        addAlert(t(`${type}-events-cleared`), AlertVariant.success);\n      } catch (error) {\n        addError(`${type}-events-cleared-error`, error);\n      }\n    },\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm: realmName }),\n    (eventConfig) => {\n      setupForm({\n        ...eventConfig,\n        adminEventsExpiration: realm.attributes?.adminEventsExpiration,\n      });\n      reload();\n    },\n    [key],\n  );\n\n  const save = async (config: EventsConfigForm) => {\n    const updatedEventListener = !isEqual(\n      events?.eventsListeners,\n      config.eventsListeners,\n    );\n\n    const { adminEventsExpiration, ...eventConfig } = config;\n    if (realm.attributes?.adminEventsExpiration !== adminEventsExpiration) {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          ...realm,\n          attributes: { ...(realm.attributes || {}), adminEventsExpiration },\n        },\n      );\n    }\n\n    try {\n      await adminClient.realms.updateConfigEvents(\n        { realm: realmName },\n        eventConfig,\n      );\n      setupForm({ ...events, ...eventConfig, adminEventsExpiration });\n      addAlert(\n        updatedEventListener\n          ? t(\"saveEventListenersSuccess\")\n          : t(\"eventConfigSuccessfully\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\n        updatedEventListener\n          ? t(\"saveEventListenersError\")\n          : t(\"eventConfigError\"),\n        error,\n      );\n    }\n  };\n\n  const addEventTypes = async (eventTypes: EventType[]) => {\n    const eventsTypes = eventTypes.map((type) => type.id);\n    const enabledEvents = events!.enabledEventTypes?.concat(eventsTypes);\n    await addEvents(enabledEvents);\n  };\n\n  const addEvents = async (events: string[] = []) => {\n    const eventConfig = { ...form.getValues(), enabledEventTypes: events };\n    await save(eventConfig);\n    setAddEventType(false);\n    refresh();\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addEventType && (\n        <AddEventTypesDialog\n          onConfirm={(eventTypes) => addEventTypes(eventTypes)}\n          configured={events?.enabledEventTypes || []}\n          onClose={() => setAddEventType(false)}\n        />\n      )}\n      <Tabs\n        activeKey={activeTab}\n        onSelect={(_, key) => setActiveTab(key as string)}\n      >\n        <Tab\n          eventKey=\"event\"\n          title={<TabTitleText>{t(\"eventListeners\")}</TabTitleText>}\n          data-testid=\"rs-event-listeners-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventListenersForm form={form} reset={() => setupForm(events)} />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"user\"\n          title={<TabTitleText>{t(\"userEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"user\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"user\")}\n              />\n            </FormAccess>\n          </PageSection>\n          <PageSection>\n            <EventsTypeTable\n              key={tableKey}\n              addTypes={() => setAddEventType(true)}\n              eventTypes={events?.enabledEventTypes || []}\n              onDelete={(value) => {\n                const enabledEventTypes = events?.enabledEventTypes?.filter(\n                  (e) => e !== value.id,\n                );\n                addEvents(enabledEventTypes);\n                setEvents({ ...events, enabledEventTypes });\n              }}\n            />\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"admin\"\n          title={<TabTitleText>{t(\"adminEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-admin-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"admin\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"admin\")}\n              />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toKeysTab } from \"../routes/KeysTab\";\n\nimport \"../realm-settings-section.css\";\n\nimport useFormatDate from \"../../utils/useFormatDate\";\n\nconst FILTER_OPTIONS = [\"ACTIVE\", \"PASSIVE\", \"DISABLED\"] as const;\ntype FilterType = (typeof FILTER_OPTIONS)[number];\n\ntype KeyData = KeyMetadataRepresentation & {\n  provider?: string;\n};\n\ntype KeysListTabProps = {\n  realmComponents: ComponentRepresentation[];\n};\n\ntype SelectFilterProps = {\n  onFilter: (filter: FilterType) => void;\n};\n\nconst SelectFilter = ({ onFilter }: SelectFilterProps) => {\n  const { t } = useTranslation();\n  const [filterType, setFilterType] = useState<FilterType>(FILTER_OPTIONS[0]);\n\n  const [filterDropdownOpen, toggleFilter] = useToggle();\n  return (\n    <Select\n      width={300}\n      data-testid=\"filter-type-select\"\n      isOpen={filterDropdownOpen}\n      className=\"kc-filter-type-select\"\n      variant={SelectVariant.single}\n      onToggle={toggleFilter}\n      toggleIcon={<FilterIcon />}\n      onSelect={(_, value) => {\n        const filter =\n          FILTER_OPTIONS.find((o) => o === value.toString()) ||\n          FILTER_OPTIONS[0];\n        setFilterType(filter);\n        onFilter(filter);\n        toggleFilter();\n      }}\n      selections={filterType}\n      aria-label={t(\"selectFilterType\")}\n    >\n      {FILTER_OPTIONS.map((option) => (\n        <SelectOption\n          key={option}\n          data-testid={`${option}-option`}\n          value={option}\n        >\n          {t(`keysFilter.${option}`)}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\nexport const KeysListTab = ({ realmComponents }: KeysListTabProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const formatDate = useFormatDate();\n\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [certificate, setCertificate] = useState(\"\");\n\n  const { realm } = useRealm();\n\n  const [keyData, setKeyData] = useState<KeyData[]>();\n  const [filteredKeyData, setFilteredKeyData] = useState<KeyData[]>();\n\n  useFetch(\n    async () => {\n      const keysMetaData = await adminClient.realms.getKeys({ realm });\n      return keysMetaData.keys?.map((key) => {\n        const provider = realmComponents.find(\n          (component: ComponentRepresentation) =>\n            component.id === key.providerId,\n        );\n        return { ...key, provider: provider?.name } as KeyData;\n      })!;\n    },\n    setKeyData,\n    [],\n  );\n\n  const [togglePublicKeyDialog, PublicKeyDialog] = useConfirmDialog({\n    titleKey: t(\"publicKeys\").slice(0, -1),\n    messageKey: publicKey,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  const [toggleCertificateDialog, CertificateDialog] = useConfirmDialog({\n    titleKey: t(\"certificate\"),\n    messageKey: certificate,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  if (!keyData) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n      <PublicKeyDialog />\n      <CertificateDialog />\n      <KeycloakDataTable\n        isNotCompact\n        className=\"kc-keys-list\"\n        loader={filteredKeyData || keyData}\n        ariaLabelKey=\"keysList\"\n        searchPlaceholderKey=\"searchKey\"\n        searchTypeComponent={\n          <SelectFilter\n            onFilter={(filterType) =>\n              setFilteredKeyData(\n                filterType !== FILTER_OPTIONS[0]\n                  ? keyData!.filter(({ status }) => status === filterType)\n                  : undefined,\n              )\n            }\n          />\n        }\n        canSelectAll\n        columns={[\n          {\n            name: \"algorithm\",\n            displayKey: \"algorithm\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(15)],\n          },\n          {\n            name: \"type\",\n            displayKey: \"type\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"kid\",\n            displayKey: \"kid\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"use\",\n            displayKey: \"use\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"provider\",\n            displayKey: \"provider\",\n            cellRenderer: ({ provider }: KeyData) => provider || \"\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"validTo\",\n            displayKey: \"validTo\",\n            cellRenderer: ({ validTo }: KeyData) =>\n              validTo ? formatDate(new Date(validTo)) : \"\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"publicKeys\",\n            displayKey: \"publicKeys\",\n            cellRenderer: ({ type, publicKey, certificate }: KeyData) => {\n              if (type === \"EC\") {\n                return (\n                  <Button\n                    onClick={() => {\n                      togglePublicKeyDialog();\n                      setPublicKey(publicKey!);\n                    }}\n                    variant=\"secondary\"\n                    id=\"kc-public-key\"\n                  >\n                    {t(\"publicKeys\").slice(0, -1)}\n                  </Button>\n                );\n              } else if (type === \"RSA\") {\n                return (\n                  <div className=\"button-wrapper\">\n                    <Button\n                      onClick={() => {\n                        togglePublicKeyDialog();\n                        setPublicKey(publicKey!);\n                      }}\n                      variant=\"secondary\"\n                      id={publicKey}\n                    >\n                      {t(\"publicKeys\").slice(0, -1)}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        toggleCertificateDialog();\n                        setCertificate(certificate!);\n                      }}\n                      variant=\"secondary\"\n                      id={certificate}\n                      className=\"kc-certificate\"\n                    >\n                      {t(\"certificate\")}\n                    </Button>\n                  </div>\n                );\n              } else if (type === \"OKP\") {\n                return (\n                  <Button\n                    onClick={() => {\n                      togglePublicKeyDialog();\n                      setPublicKey(publicKey!);\n                    }}\n                    variant=\"secondary\"\n                    id=\"kc-public-key\"\n                  >\n                    {t(\"publicKeys\").slice(0, -1)}\n                  </Button>\n                );\n              } else return \"\";\n            },\n            cellFormatters: [],\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        isSearching={!!filteredKeyData}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noKeys\")}\n            instructions={t(\"noKeysDescription\")}\n            primaryActionText={t(\"addProvider\")}\n            onPrimaryAction={() =>\n              navigate(toKeysTab({ realm, tab: \"providers\" }))\n            }\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { KeyProviderForm } from \"./KeyProviderForm\";\nimport type { ProviderType } from \"../../routes/KeyProvider\";\n\nimport style from \"./key-provider-modal.module.css\";\n\ntype KeyProviderModalProps = {\n  providerType: ProviderType;\n  onClose: () => void;\n};\n\nexport const KeyProviderModal = ({\n  providerType,\n  onClose,\n}: KeyProviderModalProps) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      className={style.dialog}\n      variant={ModalVariant.medium}\n      title={t(\"addProvider\")}\n      isOpen\n      onClose={onClose}\n    >\n      <KeyProviderForm providerType={providerType} onClose={onClose} />\n    </Modal>\n  );\n};\n","import {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../../util\";\n\ntype KeyProvidersPickerProps = {\n  onConfirm: (provider: string) => void;\n  onClose: () => void;\n};\n\nexport const KeyProvidersPicker = ({\n  onConfirm,\n  onClose,\n}: KeyProvidersPickerProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n  return (\n    <Modal variant=\"medium\" title={t(\"addProvider\")} isOpen onClose={onClose}>\n      <DataList\n        onSelectDataListItem={(id) => {\n          onConfirm(id);\n        }}\n        aria-label={t(\"addPredefinedMappers\")}\n        isCompact\n      >\n        {keyProviderComponentTypes.map((provider) => (\n          <DataListItem\n            aria-label={provider.id}\n            key={provider.id}\n            id={provider.id}\n          >\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell\n                    key={`name-${provider.id}`}\n                    data-testid={`option-${provider.id}`}\n                  >\n                    {provider.id}\n                  </DataListCell>,\n                  <DataListCell width={2} key={`helpText-${provider.helpText}`}>\n                    {provider.helpText}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        ))}\n      </DataList>\n    </Modal>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { ProviderType, toKeyProvider } from \"../routes/KeyProvider\";\nimport { KeyProviderModal } from \"./key-providers/KeyProviderModal\";\nimport { KeyProvidersPicker } from \"./key-providers/KeyProvidersPicker\";\n\nimport \"../realm-settings-section.css\";\n\ntype ComponentData = KeyMetadataRepresentation & {\n  id?: string;\n  providerDescription?: string;\n  name?: string;\n  toggleHidden?: boolean;\n  config?: any;\n  parentId?: string;\n};\n\ntype KeysProvidersTabProps = {\n  realmComponents: ComponentRepresentation[];\n  refresh: () => void;\n};\n\nexport const KeysProvidersTab = ({\n  realmComponents,\n  refresh,\n}: KeysProvidersTabProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [searchVal, setSearchVal] = useState(\"\");\n  const [filteredComponents, setFilteredComponents] = useState<ComponentData[]>(\n    [],\n  );\n\n  const [isCreateModalOpen, handleModalToggle] = useToggle();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n\n  const [providerOpen, toggleProviderOpen] = useToggle();\n  const [defaultUIDisplayName, setDefaultUIDisplayName] =\n    useState<ProviderType>();\n\n  const [selectedComponent, setSelectedComponent] =\n    useState<ComponentRepresentation>();\n\n  const components = useMemo(\n    () =>\n      realmComponents.map((component) => {\n        const provider = keyProviderComponentTypes.find(\n          (componentType: ComponentTypeRepresentation) =>\n            component.providerId === componentType.id,\n        );\n\n        return {\n          ...component,\n          providerDescription: provider?.helpText,\n        };\n      }),\n    [realmComponents],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteProviderTitle\",\n    messageKey: t(\"deleteProviderConfirm\", {\n      provider: selectedComponent?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: selectedComponent!.id!,\n          realm: realm,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteProviderSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteProviderError\", error);\n      }\n    },\n  });\n\n  const onSearch = () => {\n    if (searchVal !== \"\") {\n      setSearchVal(searchVal);\n      const filteredComponents = components.filter(\n        (component) =>\n          component.name?.includes(searchVal) ||\n          component.providerId?.includes(searchVal),\n      );\n      setFilteredComponents(filteredComponents);\n    } else {\n      setSearchVal(\"\");\n      setFilteredComponents(components);\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onSearch();\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setSearchVal(value);\n  };\n\n  return (\n    <>\n      {providerOpen && (\n        <KeyProvidersPicker\n          onClose={() => toggleProviderOpen()}\n          onConfirm={(provider) => {\n            handleModalToggle();\n            setDefaultUIDisplayName(provider as ProviderType);\n            toggleProviderOpen();\n          }}\n        />\n      )}\n      {isCreateModalOpen && defaultUIDisplayName && (\n        <KeyProviderModal\n          providerType={defaultUIDisplayName}\n          onClose={() => {\n            handleModalToggle();\n            refresh();\n          }}\n        />\n      )}\n      <DeleteConfirm />\n      <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n        <Toolbar>\n          <ToolbarGroup className=\"providers-toolbar\">\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  data-testid=\"provider-search-input\"\n                  type=\"search\"\n                  aria-label={t(\"search\")}\n                  placeholder={t(\"search\")}\n                  onChange={handleInputChange}\n                  onKeyDown={handleKeyDown}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"search\")}\n                  onClick={onSearch}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                data-testid=\"addProviderDropdown\"\n                className=\"add-provider-dropdown\"\n                onClick={() => toggleProviderOpen()}\n              >\n                {t(\"addProvider\")}\n              </Button>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <DraggableTable\n          variant=\"compact\"\n          className=\"kc-draggable-table\"\n          keyField=\"id\"\n          data={\n            filteredComponents.length === 0 ? components : filteredComponents\n          }\n          onDragFinish={async (_, itemOrder) => {\n            const updateAll = components.map((component: ComponentData) => {\n              const componentToSave = { ...component };\n              delete componentToSave.providerDescription;\n\n              return adminClient.components.update(\n                { id: component.id! },\n                {\n                  ...componentToSave,\n                  config: {\n                    priority: [\n                      (\n                        itemOrder.length -\n                        itemOrder.indexOf(component.id!) +\n                        100\n                      ).toString(),\n                    ],\n                  },\n                },\n              );\n            });\n\n            try {\n              await Promise.all(updateAll);\n              refresh();\n              addAlert(t(\"saveProviderListSuccess\"), AlertVariant.success);\n            } catch (error) {\n              addError(\"saveProviderError\", error);\n            }\n          }}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: \"name\",\n              cellRenderer: (component) => (\n                <Link\n                  key={component.name}\n                  data-testid=\"provider-name-link\"\n                  to={toKeyProvider({\n                    realm,\n                    id: component.id!,\n                    providerType: component.providerId as ProviderType,\n                  })}\n                >\n                  {component.name}\n                </Link>\n              ),\n            },\n            {\n              name: \"providerId\",\n              displayKey: \"provider\",\n            },\n            {\n              name: \"providerDescription\",\n              displayKey: \"providerDescription\",\n            },\n          ]}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onClick: (_key, _idx, component) => {\n                setSelectedComponent(component as ComponentRepresentation);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Tab, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { KeySubTab, toKeysTab } from \"../routes/KeysTab\";\nimport { KeysListTab } from \"./KeysListTab\";\nimport { KeysProvidersTab } from \"./KeysProvidersTab\";\n\nconst sortByPriority = (components: ComponentRepresentation[]) => {\n  const sortedComponents = [...components].sort((a, b) => {\n    const priorityA = Number(a.config?.priority);\n    const priorityB = Number(b.config?.priority);\n\n    return (\n      (!isNaN(priorityB) ? priorityB : 0) - (!isNaN(priorityA) ? priorityA : 0)\n    );\n  });\n\n  return sortedComponents;\n};\n\nexport const KeysTab = () => {\n  const { t } = useTranslation();\n\n  const { realm: realmName } = useRealm();\n\n  const [realmComponents, setRealmComponents] =\n    useState<ComponentRepresentation[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n  };\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        type: KEY_PROVIDER_TYPE,\n        realm: realmName,\n      }),\n    (components) => setRealmComponents(sortByPriority(components)),\n    [key],\n  );\n\n  const useTab = (tab: KeySubTab) =>\n    useRoutableTab(toKeysTab({ realm: realmName, tab }));\n\n  const listTab = useTab(\"list\");\n  const providersTab = useTab(\"providers\");\n\n  if (!realmComponents) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <RoutableTabs\n      mountOnEnter\n      unmountOnExit\n      defaultLocation={toKeysTab({ realm: realmName, tab: \"list\" })}\n    >\n      <Tab\n        id=\"keysList\"\n        data-testid=\"rs-keys-list-tab\"\n        aria-label=\"keys-list-subtab\"\n        title={<TabTitleText>{t(\"keysList\")}</TabTitleText>}\n        {...listTab}\n      >\n        <KeysListTab realmComponents={realmComponents} />\n      </Tab>\n      <Tab\n        id=\"providers\"\n        data-testid=\"rs-providers-tab\"\n        aria-label=\"rs-providers-tab\"\n        title={<TabTitleText>{t(\"providers\")}</TabTitleText>}\n        {...providersTab}\n      >\n        <KeysProvidersTab realmComponents={realmComponents} refresh={refresh} />\n      </Tab>\n    </RoutableTabs>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype HelpLinkTextInputProps = {\n  fieldName: string;\n  url: string;\n};\n\nexport const HelpLinkTextInput = ({\n  fieldName,\n  url,\n}: HelpLinkTextInputProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n  const name = fieldName.substr(fieldName.indexOf(\".\") + 1);\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={\n        <HelpItem\n          helpText={\n            <Trans i18nKey={`${name}Help`}>\n              Default value prevents pages from being included\n              <FormattedLink href={url} title={t(\"learnMore\")} />\n            </Trans>\n          }\n          fieldLabelId={name}\n        />\n      }\n    >\n      <KeycloakTextInput id={name} {...register(fieldName)} />\n    </FormGroup>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpLinkTextInput } from \"./HelpLinkTextInput\";\nimport { convertToFormValues } from \"../../util\";\n\nimport \"./security-defences.css\";\n\ntype HeadersFormProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const HeadersForm = ({ realm, save }: HeadersFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"keycloak__security-defences__form\"\n        onSubmit={handleSubmit(save)}\n      >\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xFrameOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicyReportOnly\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xContentTypeOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xRobotsTag\"\n          url=\"https://developers.google.com/search/docs/advanced/robots/robots_meta_tag\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xXSSProtection\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.strictTransportSecurity\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.referrerPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\n        />\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"headers-form-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { CSSProperties } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport const Time = ({\n  name,\n  style,\n}: {\n  name: string;\n  style?: CSSProperties;\n}) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n  return (\n    <FormGroup\n      style={style}\n      label={t(name)}\n      fieldId={name}\n      labelIcon={<HelpItem helpText={t(`${name}Help`)} fieldLabelId={name} />}\n      validated={\n        errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"required\")}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        rules={{ required: true }}\n        render={({ field }) => (\n          <TimeSelector\n            data-testid={name}\n            value={field.value}\n            onChange={field.onChange}\n            validated={\n              errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertToFormValues } from \"../../util\";\nimport { Time } from \"./Time\";\n\ntype BruteForceDetectionProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const BruteForceDetection = ({\n  realm,\n  save,\n}: BruteForceDetectionProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    handleSubmit,\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const [isBruteForceModeOpen, setIsBruteForceModeOpen] = useState(false);\n  const [isBruteForceModeUpdated, setIsBruteForceModeUpdated] = useState(false);\n\n  enum BruteForceMode {\n    Disabled = \"Disabled\",\n    PermanentLockout = \"PermanentLockout\",\n    TemporaryLockout = \"TemporaryLockout\",\n    PermanentAfterTemporaryLockout = \"PermanentAfterTemporaryLockout\",\n  }\n\n  const bruteForceModes = [\n    BruteForceMode.Disabled,\n    BruteForceMode.PermanentLockout,\n    BruteForceMode.TemporaryLockout,\n    BruteForceMode.PermanentAfterTemporaryLockout,\n  ];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setIsBruteForceModeUpdated(false);\n  };\n  useEffect(setupForm, []);\n\n  const bruteForceMode = (() => {\n    if (!form.getValues(\"bruteForceProtected\")) {\n      return BruteForceMode.Disabled;\n    }\n    if (!form.getValues(\"permanentLockout\")) {\n      return BruteForceMode.TemporaryLockout;\n    }\n    return form.getValues(\"maxTemporaryLockouts\") == 0\n      ? BruteForceMode.PermanentLockout\n      : BruteForceMode.PermanentAfterTemporaryLockout;\n  })();\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"bruteForceMode\")}\n          fieldId=\"kc-brute-force-mode\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"bruteForceModeHelpText\")}\n              fieldLabelId=\"bruteForceMode\"\n            />\n          }\n        >\n          <Select\n            toggleId=\"kc-brute-force-mode\"\n            onToggle={() => setIsBruteForceModeOpen(!isBruteForceModeOpen)}\n            onSelect={(_, value) => {\n              switch (value as BruteForceMode) {\n                case BruteForceMode.Disabled:\n                  form.setValue(\"bruteForceProtected\", false);\n                  form.setValue(\"permanentLockout\", false);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.TemporaryLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", false);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.PermanentLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", true);\n                  form.setValue(\"maxTemporaryLockouts\", 0);\n                  break;\n                case BruteForceMode.PermanentAfterTemporaryLockout:\n                  form.setValue(\"bruteForceProtected\", true);\n                  form.setValue(\"permanentLockout\", true);\n                  form.setValue(\"maxTemporaryLockouts\", 1);\n                  break;\n              }\n              setIsBruteForceModeUpdated(true);\n              setIsBruteForceModeOpen(false);\n            }}\n            selections={bruteForceMode}\n            variant={SelectVariant.single}\n            isOpen={isBruteForceModeOpen}\n            data-testid=\"select-brute-force-mode\"\n            aria-label={t(\"selectUnmanagedAttributePolicy\")}\n          >\n            {bruteForceModes.map((mode) => (\n              <SelectOption key={mode} value={mode}>\n                {t(`bruteForceMode.${mode}`)}\n              </SelectOption>\n            ))}\n          </Select>\n        </FormGroup>\n        {bruteForceMode !== BruteForceMode.Disabled && (\n          <>\n            <FormGroup\n              label={t(\"failureFactor\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"failureFactorHelp\")}\n                  fieldLabelId=\"failureFactor\"\n                />\n              }\n              fieldId=\"failureFactor\"\n            >\n              <Controller\n                name=\"failureFactor\"\n                defaultValue={0}\n                control={control}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"failureFactor\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n\n            {bruteForceMode ===\n              BruteForceMode.PermanentAfterTemporaryLockout && (\n              <FormGroup\n                label={t(\"maxTemporaryLockouts\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"maxTemporaryLockoutsHelp\")}\n                    fieldLabelId=\"maxTemporaryLockouts\"\n                  />\n                }\n                fieldId=\"maxTemporaryLockouts\"\n                hasNoPaddingTop\n              >\n                <Controller\n                  name=\"maxTemporaryLockouts\"\n                  defaultValue={0}\n                  control={control}\n                  render={({ field }) => (\n                    <NumberInput\n                      type=\"text\"\n                      id=\"maxTemporaryLockouts\"\n                      value={field.value}\n                      onPlus={() => field.onChange(field.value + 1)}\n                      onMinus={() => field.onChange(field.value - 1)}\n                      onChange={(event) =>\n                        field.onChange(\n                          Number((event.target as HTMLInputElement).value),\n                        )\n                      }\n                      aria-label={t(\"maxTemporaryLockouts\")}\n                    />\n                  )}\n                />\n              </FormGroup>\n            )}\n\n            {(bruteForceMode === BruteForceMode.TemporaryLockout ||\n              bruteForceMode ===\n                BruteForceMode.PermanentAfterTemporaryLockout) && (\n              <>\n                <Time name=\"waitIncrementSeconds\" />\n                <Time name=\"maxFailureWaitSeconds\" />\n                <Time name=\"maxDeltaTimeSeconds\" />\n              </>\n            )}\n\n            <FormGroup\n              label={t(\"quickLoginCheckMilliSeconds\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"quickLoginCheckMilliSecondsHelp\")}\n                  fieldLabelId=\"quickLoginCheckMilliSeconds\"\n                />\n              }\n              fieldId=\"quickLoginCheckMilliSeconds\"\n            >\n              <Controller\n                name=\"quickLoginCheckMilliSeconds\"\n                defaultValue={0}\n                control={control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"quickLoginCheckMilliSeconds\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n\n            <Time name=\"minimumQuickLoginWaitSeconds\" />\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"brute-force-tab-save\"\n            isDisabled={!isDirty && !isBruteForceModeUpdated}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { HeadersForm } from \"./HeadersForm\";\nimport { BruteForceDetection } from \"./BruteForceDetection\";\n\ntype SecurityDefensesProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const SecurityDefenses = ({ realm, save }: SecurityDefensesProps) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(10);\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"headers\"\n        eventKey={10}\n        data-testid=\"security-defenses-headers-tab\"\n        title={<TabTitleText>{t(\"headers\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <HeadersForm realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n      <Tab\n        id=\"bruteForce\"\n        eventKey={20}\n        data-testid=\"security-defenses-brute-force-tab\"\n        title={<TabTitleText>{t(\"bruteForceDetection\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <BruteForceDetection realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n    </Tabs>\n  );\n};\n","import type { UserProfileGroup } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toEditAttributesGroup } from \"../routes/EditAttributesGroup\";\nimport { toNewAttributesGroup } from \"../routes/NewAttributesGroup\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const AttributesGroupTab = () => {\n  const { config, save } = useUserProfile();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const [groupToDelete, setGroupToDelete] = useState<UserProfileGroup>();\n\n  // Refresh data in table when config changes.\n  useEffect(() => setKey((value) => value + 1), [config]);\n\n  async function loader() {\n    return config?.groups ?? [];\n  }\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteDialogTitle\",\n    children: (\n      <Trans i18nKey=\"deleteDialogDescription\">\n        {\" \"}\n        <strong>{{ group: groupToDelete?.name }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm() {\n      const groups = (config?.groups ?? []).filter(\n        (group) => group !== groupToDelete,\n      );\n\n      save(\n        { ...config, groups },\n        {\n          successMessageKey: \"deleteSuccess\",\n          errorMessageKey: \"deleteAttributeGroupError\",\n        },\n      );\n    },\n  });\n\n  function deleteAttributeGroup(group: UserProfileGroup) {\n    setGroupToDelete(group);\n    toggleDeleteDialog();\n  }\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"tableTitle\"\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              component={(props) => (\n                <Link\n                  data-testid=\"create-attributes-groups-action\"\n                  {...props}\n                  to={toNewAttributesGroup({ realm })}\n                />\n              )}\n            >\n              {t(\"createGroupText\")}\n            </Button>\n          </ToolbarItem>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"columnName\",\n            cellRenderer: (group) => (\n              <Link to={toEditAttributesGroup({ realm, name: group.name! })}>\n                {group.name}\n              </Link>\n            ),\n          },\n          {\n            name: \"displayHeader\",\n            displayKey: \"columnDisplayName\",\n          },\n          {\n            name: \"displayDescription\",\n            displayKey: \"columnDisplayDescription\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: deleteAttributeGroup,\n          } as Action<UserProfileGroup>,\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyStateMessage\")}\n            instructions={t(\"emptyStateInstructions\")}\n            primaryActionText={t(\"createGroupText\")}\n            onPrimaryAction={() => navigate(toNewAttributesGroup({ realm }))}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toAddAttribute } from \"../routes/AddAttribute\";\nimport { toAttribute } from \"../routes/Attribute\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nconst RESTRICTED_ATTRIBUTES = [\"username\", \"email\"];\n\ntype movedAttributeType = UserProfileAttribute;\n\nexport const AttributesTab = () => {\n  const { config, save } = useUserProfile();\n  const { realm: realmName } = useRealm();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [filter, setFilter] = useState(\"allGroups\");\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n  const [data, setData] = useState(config?.attributes);\n  const [attributeToDelete, setAttributeToDelete] = useState(\"\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteAttributeConfirmTitle\"),\n    messageKey: t(\"deleteAttributeConfirm\", {\n      attributeName: attributeToDelete,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      if (!config?.attributes) return;\n\n      const updatedAttributes = config.attributes.filter(\n        (attribute) => attribute.name !== attributeToDelete,\n      );\n\n      save(\n        { ...config, attributes: updatedAttributes!, groups: config.groups },\n        {\n          successMessageKey: \"deleteAttributeSuccess\",\n          errorMessageKey: \"deleteAttributeError\",\n        },\n      );\n      setAttributeToDelete(\"\");\n    },\n  });\n\n  if (!config) {\n    return <KeycloakSpinner />;\n  }\n\n  const attributes = config.attributes ?? [];\n  const groups = config.groups ?? [];\n\n  const executeMove = async (\n    attribute: UserProfileAttribute,\n    newIndex: number,\n  ) => {\n    const fromIndex = attributes.findIndex((attr) => {\n      return attr.name === attribute.name;\n    });\n\n    let movedAttribute: movedAttributeType = {};\n    movedAttribute = attributes[fromIndex];\n    attributes.splice(fromIndex, 1);\n    attributes.splice(newIndex, 0, movedAttribute);\n\n    save(\n      { attributes, groups },\n      {\n        successMessageKey: \"updatedUserProfileSuccess\",\n        errorMessageKey: \"updatedUserProfileError\",\n      },\n    );\n  };\n\n  const cellFormatter = (row: UserProfileAttribute) => (\n    <Link\n      to={toAttribute({\n        realm: realmName,\n        attributeName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name}\n    </Link>\n  );\n\n  return (\n    <>\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <Select\n              width={200}\n              data-testid=\"filter-select\"\n              isOpen={isFilterTypeDropdownOpen}\n              variant={SelectVariant.single}\n              onToggle={toggleIsFilterTypeDropdownOpen}\n              toggleIcon={<FilterIcon />}\n              onSelect={(_, value) => {\n                const filter = value.toString();\n                setFilter(filter);\n                setData(\n                  filter === \"allGroups\"\n                    ? attributes\n                    : attributes.filter((attr) => attr.group === filter),\n                );\n                toggleIsFilterTypeDropdownOpen();\n              }}\n              selections={filter === \"allGroups\" ? t(filter) : filter}\n            >\n              {[\n                <SelectOption\n                  key=\"allGroups\"\n                  data-testid=\"all-groups\"\n                  value=\"allGroups\"\n                >\n                  {t(\"allGroups\")}\n                </SelectOption>,\n                ...uniqBy(\n                  attributes.filter((attr) => !!attr.group),\n                  \"group\",\n                ).map((attr) => (\n                  <SelectOption\n                    key={attr.group}\n                    data-testid={`${attr.group}-option`}\n                    value={attr.group}\n                  />\n                )),\n              ]}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem className=\"kc-toolbar-attributesTab\">\n            <Button\n              data-testid=\"createAttributeBtn\"\n              variant=\"primary\"\n              component={(props) => (\n                <Link {...props} to={toAddAttribute({ realm: realmName })} />\n              )}\n            >\n              {t(\"createAttribute\")}\n            </Button>\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n      <DeleteConfirm />\n      <DraggableTable\n        keyField=\"name\"\n        onDragFinish={async (nameDragged, items) => {\n          const keys = attributes.map((e) => e.name);\n          const newIndex = items.indexOf(nameDragged);\n          const oldIndex = keys.indexOf(nameDragged);\n          const dragged = attributes[oldIndex];\n          if (!dragged.name) return;\n\n          executeMove(dragged, newIndex);\n        }}\n        actions={[\n          {\n            title: t(\"edit\"),\n            onClick: (_key, _idx, component) => {\n              navigate(\n                toAttribute({\n                  realm: realmName,\n                  attributeName: component.name,\n                }),\n              );\n            },\n          },\n          {\n            title: t(\"delete\"),\n            isActionable: ({ name }) => !RESTRICTED_ATTRIBUTES.includes(name!),\n            isDisabled: RESTRICTED_ATTRIBUTES.includes(name!),\n            onClick: (_key, _idx, component) => {\n              setAttributeToDelete(component.name);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: t(\"attributeName\"),\n            cellRenderer: cellFormatter,\n          },\n          {\n            name: \"displayName\",\n            displayKey: t(\"attributeDisplayName\"),\n          },\n          {\n            name: \"group\",\n            displayKey: t(\"attributeGroup\"),\n          },\n        ]}\n        data={data ?? attributes}\n      />\n    </>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { ActionGroup, Button, Form, PageSection } from \"@patternfly/react-core\";\nimport type { editor } from \"monaco-editor\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const JsonEditorTab = () => {\n  const { config, save, isSaving } = useUserProfile();\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n\n  useEffect(() => resetCode(), [config, editor]);\n\n  function resetCode() {\n    editor?.setValue(config ? prettyPrintJSON(config) : \"\");\n  }\n\n  async function handleSave() {\n    const value = editor?.getValue();\n\n    if (!value) {\n      return;\n    }\n\n    try {\n      await save(JSON.parse(value));\n    } catch (error) {\n      addError(\"invalidJsonError\", error);\n      return;\n    }\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <CodeEditor\n        language={Language.json}\n        height=\"30rem\"\n        onEditorDidMount={(editor) => setEditor(editor)}\n        isLanguageLabelVisible\n      />\n      <Form>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            onClick={handleSave}\n            isDisabled={isSaving}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={resetCode} isDisabled={isSaving}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import { Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  toUserProfile,\n  UserProfileTab as IUserProfileTab,\n} from \"../routes/UserProfile\";\nimport { AttributesGroupTab } from \"./AttributesGroupTab\";\nimport { AttributesTab } from \"./AttributesTab\";\nimport { JsonEditorTab } from \"./JsonEditorTab\";\nimport { UserProfileProvider } from \"./UserProfileContext\";\n\nexport const UserProfileTab = () => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n\n  const useTab = (tab: IUserProfileTab) =>\n    useRoutableTab(toUserProfile({ realm, tab }));\n\n  const attributesTab = useTab(\"attributes\");\n  const attributesGroupTab = useTab(\"attributes-group\");\n  const jsonEditorTab = useTab(\"json-editor\");\n\n  return (\n    <UserProfileProvider>\n      <RoutableTabs\n        defaultLocation={toUserProfile({ realm, tab: \"attributes\" })}\n        mountOnEnter\n      >\n        <Tab\n          title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n          data-testid=\"attributesTab\"\n          {...attributesTab}\n        >\n          <AttributesTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"attributesGroup\")}</TabTitleText>}\n          data-testid=\"attributesGroupTab\"\n          {...attributesGroupTab}\n        >\n          <AttributesGroupTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"jsonEditor\")}</TabTitleText>}\n          data-testid=\"jsonEditorTab\"\n          {...jsonEditorTab}\n        >\n          <JsonEditorTab />\n        </Tab>\n      </RoutableTabs>\n    </UserProfileProvider>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  DropdownSeparator,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAccess } from \"../context/access/Access\";\n\nimport { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport { UserProfileConfig } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealms } from \"../context/RealmsContext\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toDashboard } from \"../dashboard/routes/Dashboard\";\nimport environment from \"../environment\";\nimport helpUrls from \"../help-urls\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport { joinPath } from \"../utils/joinPath\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { RealmSettingsEmailTab } from \"./EmailTab\";\nimport { RealmSettingsGeneralTab } from \"./GeneralTab\";\nimport { LocalizationTab } from \"./localization/LocalizationTab\";\nimport { RealmSettingsLoginTab } from \"./LoginTab\";\nimport { PartialExportDialog } from \"./PartialExport\";\nimport { PartialImportDialog } from \"./PartialImport\";\nimport { PoliciesTab } from \"./PoliciesTab\";\nimport ProfilesTab from \"./ProfilesTab\";\nimport { RealmSettingsSessionsTab } from \"./SessionsTab\";\nimport { RealmSettingsThemesTab } from \"./ThemesTab\";\nimport { RealmSettingsTokensTab } from \"./TokensTab\";\nimport { UserRegistration } from \"./UserRegistration\";\nimport { EventsTab } from \"./event-config/EventsTab\";\nimport { KeysTab } from \"./keys/KeysTab\";\nimport { ClientPoliciesTab, toClientPolicies } from \"./routes/ClientPolicies\";\nimport { RealmSettingsTab, toRealmSettings } from \"./routes/RealmSettings\";\nimport { SecurityDefenses } from \"./security-defences/SecurityDefenses\";\nimport { UserProfileTab } from \"./user-profile/UserProfileTab\";\n\nexport interface UIRealmRepresentation extends RealmRepresentation {\n  upConfig?: UserProfileConfig;\n}\n\ntype RealmSettingsHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  realmName: string;\n  refresh: () => void;\n};\n\nconst RealmSettingsHeader = ({\n  save,\n  onChange,\n  value,\n  realmName,\n  refresh,\n}: RealmSettingsHeaderProps) => {\n  const { t } = useTranslation();\n  const { refresh: refreshRealms } = useRealms();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const [partialImportOpen, setPartialImportOpen] = useState(false);\n  const [partialExportOpen, setPartialExportOpen] = useState(false);\n\n  const { hasAccess } = useAccess();\n  const canManageRealm = hasAccess(\"manage-realm\");\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmTitle\",\n    messageKey: \"disableConfirmRealm\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmTitle\",\n    messageKey: \"deleteConfirmRealmSetting\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.del({ realm: realmName });\n        addAlert(t(\"deletedSuccessRealmSetting\"), AlertVariant.success);\n        await refreshRealms();\n        navigate(toDashboard({ realm: environment.masterRealm }));\n        refresh();\n      } catch (error) {\n        addError(\"deleteErrorRealmSetting\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <DeleteConfirm />\n      <PartialImportDialog\n        open={partialImportOpen}\n        toggleDialog={() => setPartialImportOpen(!partialImportOpen)}\n      />\n      <PartialExportDialog\n        isOpen={partialExportOpen}\n        onClose={() => setPartialExportOpen(false)}\n      />\n      <ViewHeader\n        titleKey={realmName}\n        subKey=\"realmSettingsExplain\"\n        helpUrl={helpUrls.realmSettingsUrl}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"import\"\n            data-testid=\"openPartialImportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => {\n              setPartialImportOpen(true);\n            }}\n          >\n            {t(\"partialImport\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"export\"\n            data-testid=\"openPartialExportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => setPartialExportOpen(true)}\n          >\n            {t(\"partialExport\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!canManageRealm}\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        isReadOnly={!canManageRealm}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\ntype RealmSettingsTabsProps = {\n  realm: UIRealmRepresentation;\n  refresh: () => void;\n};\n\nexport const RealmSettingsTabs = ({\n  realm,\n  refresh,\n}: RealmSettingsTabsProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { refresh: refreshRealms } = useRealms();\n  const navigate = useNavigate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const { control, setValue, getValues } = useForm({\n    mode: \"onChange\",\n  });\n  const [key, setKey] = useState(0);\n\n  const refreshHeader = () => {\n    setKey(key + 1);\n  };\n\n  const setupForm = (r: RealmRepresentation = realm) => {\n    convertToFormValues(r, setValue);\n  };\n\n  useEffect(setupForm, [setValue, realm]);\n\n  const save = async (r: UIRealmRepresentation) => {\n    r = convertFormValuesToObject(r);\n    if (\n      r.attributes?.[\"acr.loa.map\"] &&\n      typeof r.attributes[\"acr.loa.map\"] !== \"string\"\n    ) {\n      r.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (r.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const savedRealm: UIRealmRepresentation = {\n        ...realm,\n        ...r,\n        id: r.realm,\n      };\n\n      // For the default value, null is expected instead of an empty string.\n      if (savedRealm.smtpServer?.port === \"\") {\n        savedRealm.smtpServer = { ...savedRealm.smtpServer, port: null };\n      }\n      const response = await fetchWithError(\n        joinPath(adminClient.baseUrl, `admin/realms/${realmName}/ui-ext`),\n        {\n          method: \"PUT\",\n          body: JSON.stringify(savedRealm),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthorizationHeaders(await adminClient.getAccessToken()),\n          },\n        },\n      );\n      if (!response.ok) throw new Error(response.statusText);\n      addAlert(t(\"realmSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realmSaveError\", error);\n    }\n\n    const isRealmRenamed = realmName !== (r.realm || realm.realm);\n    if (isRealmRenamed) {\n      await refreshRealms();\n      navigate(toRealmSettings({ realm: r.realm!, tab: \"general\" }));\n    }\n    refresh();\n  };\n\n  const useTab = (tab: RealmSettingsTab) =>\n    useRoutableTab(toRealmSettings({ realm: realmName, tab }));\n\n  const generalTab = useTab(\"general\");\n  const loginTab = useTab(\"login\");\n  const emailTab = useTab(\"email\");\n  const themesTab = useTab(\"themes\");\n  const keysTab = useTab(\"keys\");\n  const eventsTab = useTab(\"events\");\n  const localizationTab = useTab(\"localization\");\n  const securityDefensesTab = useTab(\"security-defenses\");\n  const sessionsTab = useTab(\"sessions\");\n  const tokensTab = useTab(\"tokens\");\n  const clientPoliciesTab = useTab(\"client-policies\");\n  const userProfileTab = useTab(\"user-profile\");\n  const userRegistrationTab = useTab(\"user-registration\");\n\n  const useClientPoliciesTab = (tab: ClientPoliciesTab) =>\n    useRoutableTab(\n      toClientPolicies({\n        realm: realmName,\n        tab,\n      }),\n    );\n\n  const clientPoliciesProfilesTab = useClientPoliciesTab(\"profiles\");\n  const clientPoliciesPoliciesTab = useClientPoliciesTab(\"policies\");\n\n  return (\n    <>\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={control}\n        render={({ field }) => (\n          <RealmSettingsHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realmName}\n            refresh={refreshHeader}\n            save={() => save(getValues())}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          mountOnEnter\n          aria-label=\"realm-settings-tabs\"\n          defaultLocation={toRealmSettings({\n            realm: realmName,\n            tab: \"general\",\n          })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"general\")}</TabTitleText>}\n            data-testid=\"rs-general-tab\"\n            {...generalTab}\n          >\n            <RealmSettingsGeneralTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"login\")}</TabTitleText>}\n            data-testid=\"rs-login-tab\"\n            {...loginTab}\n          >\n            <RealmSettingsLoginTab refresh={refresh} realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"email\")}</TabTitleText>}\n            data-testid=\"rs-email-tab\"\n            {...emailTab}\n          >\n            <RealmSettingsEmailTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"themes\")}</TabTitleText>}\n            data-testid=\"rs-themes-tab\"\n            {...themesTab}\n          >\n            <RealmSettingsThemesTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n            data-testid=\"rs-keys-tab\"\n            {...keysTab}\n          >\n            <KeysTab />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n            data-testid=\"rs-realm-events-tab\"\n            {...eventsTab}\n          >\n            <EventsTab realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"localization\")}</TabTitleText>}\n            data-testid=\"rs-localization-tab\"\n            {...localizationTab}\n          >\n            <LocalizationTab key={key} save={save} realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"securityDefences\")}</TabTitleText>}\n            data-testid=\"rs-security-defenses-tab\"\n            {...securityDefensesTab}\n          >\n            <SecurityDefenses realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n            data-testid=\"rs-sessions-tab\"\n            {...sessionsTab}\n          >\n            <RealmSettingsSessionsTab key={key} realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"tokens\")}</TabTitleText>}\n            data-testid=\"rs-tokens-tab\"\n            {...tokensTab}\n          >\n            <RealmSettingsTokensTab save={save} realm={realm} />\n          </Tab>\n          {isFeatureEnabled(Feature.ClientPolicies) && (\n            <Tab\n              title={<TabTitleText>{t(\"clientPolicies\")}</TabTitleText>}\n              data-testid=\"rs-clientPolicies-tab\"\n              {...clientPoliciesTab}\n            >\n              <RoutableTabs\n                mountOnEnter\n                defaultLocation={toClientPolicies({\n                  realm: realmName,\n                  tab: \"profiles\",\n                })}\n              >\n                <Tab\n                  id=\"profiles\"\n                  data-testid=\"rs-policies-clientProfiles-tab\"\n                  aria-label={t(\"clientProfilesSubTab\")}\n                  title={<TabTitleText>{t(\"profiles\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesProfilesHelpText\")} />\n                  }\n                  {...clientPoliciesProfilesTab}\n                >\n                  <ProfilesTab />\n                </Tab>\n                <Tab\n                  id=\"policies\"\n                  data-testid=\"rs-policies-clientPolicies-tab\"\n                  aria-label={t(\"clientPoliciesSubTab\")}\n                  {...clientPoliciesPoliciesTab}\n                  title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesPoliciesHelpText\")} />\n                  }\n                >\n                  <PoliciesTab />\n                </Tab>\n              </RoutableTabs>\n            </Tab>\n          )}\n          <Tab\n            title={<TabTitleText>{t(\"userProfile\")}</TabTitleText>}\n            data-testid=\"rs-user-profile-tab\"\n            {...userProfileTab}\n          >\n            <UserProfileTab />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"userRegistration\")}</TabTitleText>}\n            data-testid=\"rs-userRegistration-tab\"\n            {...userRegistrationTab}\n          >\n            <UserRegistration />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useState } from \"react\";\n\nimport { adminClient } from \"../admin-client\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { RealmSettingsTabs } from \"./RealmSettingsTabs\";\nimport type { RealmSettingsParams } from \"./routes/RealmSettings\";\n\nexport default function RealmSettingsSection() {\n  const { realm: realmName } = useParams<RealmSettingsParams>();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(key + 1);\n    setRealm(undefined);\n  };\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n  return <RealmSettingsTabs realm={realm} refresh={refresh} />;\n}\n"],"names":["flatten","array","length","baseFlatten","flatRest","func","setToString","overRest","objectTag","funcProto","objectProto","funcToString","hasOwnProperty","objectCtorString","isPlainObject","value","isObjectLike","baseGetTag","proto","getPrototype","Ctor","parent","object","path","baseGet","baseSlice","baseUnset","castPath","toKey","last","customOmitClone","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","omit","paths","result","isDeep","arrayMap","copyObject","getAllKeysIn","baseClone","uniqWith","comparator","baseUniq","useCurrentUser","whoAmI","useWhoAmI","currentUser","setCurrentUser","useState","userId","useFetch","adminClient","RealmSettingsEmailTab","realm","save","useTranslation","realmName","useRealm","addAlert","addError","useAlerts","register","control","handleSubmit","watch","resetForm","getValues","errors","useForm","reset","watchFromValue","watchHostValue","isTesting","toggleTest","useToggle","authenticationEnabled","useWatch","testConnection","toNumber","toBoolean","valueMapper","serverSettings","key","mapperFn","AlertVariant","error","jsxs","PageSection","jsx","FormPanel","FormAccess","FormGroup","KeycloakTextInput","emailRegexPattern","HelpItem","Controller","field","Checkbox","Switch","Fragment","PasswordInput","Alert","AlertActionLink","props","Link","toUser","ActionGroup","ActionListItem","Button","RealmSettingsGeneralTab","form","setValue","isDirty","open","setOpen","requireSslTypes","userProfileConfig","setUserProfileConfig","unmanagedAttributePolicies","UnmanagedAttributePolicy","isUnmanagedAttributeOpen","setIsUnmanagedAttributeOpen","setupForm","convertToFormValues","convertAttributeNameToForm","config","useEffect","data","ClipboardCopy","Select","_","SelectVariant","sslType","SelectOption","FormProvider","KeyValueInput","policy","Stack","StackItem","FormattedLink","addTrailingSlash","defaultValues","EffectiveMessageBundles","defaultSupportedLocales","defaultLocales","serverInfo","useServerInfo","localeSort","useLocaleSort","searchDropdownOpen","setSearchDropdownOpen","searchPerformed","setSearchPerformed","selectThemesOpen","setSelectThemesOpen","selectThemeTypeOpen","setSelectThemeTypeOpen","selectLanguageOpen","setSelectLanguageOpen","activeFilters","setActiveFilters","setKey","themes","themeTypes","useMemo","themeNames","theme","item","index","self","name","combinedLocales","filterLabels","isValid","loader","filter","messages","DEFAULT_LOCALE","filteredMessages","m","f","mapByKey","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","pickBy","effectiveMessageBunldesSearchFormDisplay","Flex","FlexItem","TextContent","Text","TextVariants","DropdownPanel","Form","e","selectedValue","ChipGroup","Chip","option","themeType","language","localeToDisplayName","input","words","word","newWords","i","entry","KeycloakDataTable","ListEmptyState","Divider","AddTranslationModal","handleModalToggle","t","Modal","ModalVariant","ButtonVariant","ValidatedOptions","RealmOverrides","internationalizationEnabled","watchSupportedLocales","addTranslationModalOpen","setAddTranslationModalOpen","filterDropdownOpen","setFilterDropdownOpen","translations","setTranslations","selectMenuLocale","setSelectMenuLocale","kebabOpen","setKebabOpen","selectMenuValueSelected","setSelectMenuValueSelected","tableRows","setTableRows","tableKey","setTableKey","max","setMax","first","setFirst","setFilter","translationForm","currentRealm","selectedRowKeys","setSelectedRowKeys","areAllRowsSelected","setAreAllRowsSelected","editStates","setEditStates","formValue","setFormValue","refreshTable","searchInTranslations","idx","filtered","isEqual","updatedRows","translation","options","SelectGroup","locale","addKeyValue","pair","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","handleRowSelect","event","rowIndex","selectedKey","prevSelected","toggleSelectAllRows","row","isRowSelected","onSubmit","inputValue","newRows","cloneDeep","newRow","prevEditStates","PaginatingTableToolbar","search","ToolbarItem","Dropdown","KebabToggle","DropdownItem","isExpanded","SearchIcon","Table","Thead","Tr","Th","Tbody","Td","CheckIcon","TimesIcon","currentValue","prevState","PencilAltIcon","ActionsColumn","LocalizationTab","activeTab","setActiveTab","formState","supportedLocalesOpen","setSupportedLocalesOpen","defaultLocaleOpen","setDefaultLocaleOpen","allLocales","locales","Tabs","Tab","TabTitleText","v","RealmSettingsLoginTab","refresh","updateSwitchValue","switches","s","PartialExportDialog","isOpen","onClose","exportGroupsAndRoles","setExportGroupsAndRoles","exportClients","setExportClients","isExporting","setIsExporting","showWarning","exportRealm","realmExport","saveAs","prettyPrintJSON","INITIAL_RESOURCES","PartialImportDialog","importedFile","setImportedFile","isFileSelected","isRealmSelectOpen","setIsRealmSelectOpen","isCollisionSelectOpen","setIsCollisionSelectOpen","importInProgress","setImportInProgress","collisionOption","setCollisionOption","targetRealm","setTargetRealm","importResponse","setImportResponse","resourcesToImport","setResourcesToImport","isAnyResourceChecked","checked","resetResourcesToImport","resetInputState","handleFileChange","handleRealmSelect","handleResourceCheckBox","resource","realmSelectOptions","realms","handleCollisionSelect","collisionOptions","targetHasResources","targetHasResource","targetHasRealmRoles","targetHasClientRoles","itemCount","clientRolesCount","clientRoles","total","role","resourceDataListItem","resourceDisplayName","DataListItem","DataListItemRow","DataListItemCells","DataListCell","jsonForImport","jsonToImport","doImport","importResults","importModal","JsonFileUpload","DataList","importCompleteMessage","ActionLabel","importRecord","Label","TypeRenderer","typeMap","importCompletedModal","PoliciesTab","navigate","useNavigate","show","setShow","policies","setPolicies","selectedPolicy","setSelectedPolicy","code","setCode","tablePolicies","setTablePolicies","saveStatus","switchValues","updatedPolicies","enabled","toClientPolicies","ClientPolicyDetailLink","toEditClientPolicy","SwitchRenderer","clientPolicy","toggleDisableDialog","DisableConfirm","obj","Title","Radio","CodeEditor","Language","toAddClientPolicy","KeycloakSpinner","ProfilesTab","tableProfiles","setTableProfiles","globalProfiles","setGlobalProfiles","selectedProfile","setSelectedProfile","allProfiles","profiles","allClientProfiles","normalizeProfile","profile","updatedProfiles","cellFormatter","toClientProfile","changedProfiles","changedGlobalProfiles","toAddClientProfile","RealmSettingsSessionsTab","offlineSessionMaxEnabled","TimeSelector","RealmSettingsThemesTab","loginThemeOpen","setLoginThemeOpen","accountThemeOpen","setAccountThemeOpen","adminUIThemeOpen","setAdminUIThemeOpen","emailThemeOpen","setEmailThemeOpen","RealmSettingsTokensTab","isFeatureEnabled","useIsFeatureEnabled","defaultSigAlgDrpdwnIsOpen","setDefaultSigAlgDrpdwnOpen","defaultSigAlgOptions","sortProviders","ssoSessionIdleTimeout","revokeRefreshToken","p","Feature","NumberInput","newValue","toHumanFormat","beerify","DefaultsGroupsTab","isKebabOpen","toggleKebab","isGroupPickerOpen","toggleGroupPicker","defaultGroups","setDefaultGroups","selectedRows","setSelectedRows","load","setLoad","reload","useHelp","groups","removeGroup","group","addGroups","toggleRemoveDialog","RemoveDialog","GroupPickerDialog","Popover","Trans","toUserFederation","QuestionCircleIcon","rows","UserRegistration","setRealm","addComposites","composites","compositeArray","RoleMapping","r","EventsTypeTable","ariaLabelKey","eventTypes","addTypes","onSelect","onDelete","type","AddEventTypesDialog","onConfirm","configured","enums","selectedTypes","setSelectedTypes","selected","EventConfigForm","clear","eventKey","eventsEnabled","EventListenersForm","selectEventListenerOpen","setSelectEventListenerOpen","eventListeners","changedValue","operation","EventsTab","events","setEvents","setType","addEventType","setAddEventType","eventConfig","updatedEventListener","adminEventsExpiration","addEventTypes","eventsTypes","enabledEvents","addEvents","enabledEventTypes","FILTER_OPTIONS","SelectFilter","onFilter","filterType","setFilterType","toggleFilter","FilterIcon","o","KeysListTab","realmComponents","formatDate","useFormatDate","publicKey","setPublicKey","certificate","setCertificate","keyData","setKeyData","filteredKeyData","setFilteredKeyData","provider","component","togglePublicKeyDialog","PublicKeyDialog","toggleCertificateDialog","CertificateDialog","status","emptyFormatter","cellWidth","validTo","toKeysTab","KeyProviderModal","providerType","style","KeyProviderForm","KeyProvidersPicker","keyProviderComponentTypes","KEY_PROVIDER_TYPE","id","KeysProvidersTab","searchVal","setSearchVal","filteredComponents","setFilteredComponents","isCreateModalOpen","providerOpen","toggleProviderOpen","defaultUIDisplayName","setDefaultUIDisplayName","selectedComponent","setSelectedComponent","components","componentType","onSearch","handleKeyDown","handleInputChange","Toolbar","ToolbarGroup","InputGroup","TextInput","DraggableTable","itemOrder","updateAll","componentToSave","toKeyProvider","_key","_idx","sortByPriority","a","b","priorityA","priorityB","KeysTab","setRealmComponents","useTab","tab","useRoutableTab","listTab","providersTab","RoutableTabs","HelpLinkTextInput","fieldName","url","useFormContext","HeadersForm","Time","BruteForceDetection","isBruteForceModeOpen","setIsBruteForceModeOpen","isBruteForceModeUpdated","setIsBruteForceModeUpdated","BruteForceMode","bruteForceModes","bruteForceMode","mode","SecurityDefenses","AttributesGroupTab","useUserProfile","groupToDelete","setGroupToDelete","deleteAttributeGroup","toNewAttributesGroup","toEditAttributesGroup","RESTRICTED_ATTRIBUTES","AttributesTab","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","setData","attributeToDelete","setAttributeToDelete","updatedAttributes","attribute","attributes","executeMove","newIndex","fromIndex","attr","movedAttribute","toAttribute","ToolbarContent","uniqBy","toAddAttribute","nameDragged","items","keys","oldIndex","dragged","JsonEditorTab","isSaving","editor","setEditor","resetCode","handleSave","UserProfileTab","toUserProfile","attributesTab","attributesGroupTab","jsonEditorTab","UserProfileProvider","RealmSettingsHeader","onChange","refreshRealms","useRealms","partialImportOpen","setPartialImportOpen","partialExportOpen","setPartialExportOpen","hasAccess","useAccess","canManageRealm","toDashboard","environment","ViewHeader","helpUrls","DropdownSeparator","RealmSettingsTabs","refreshHeader","convertFormValuesToObject","savedRealm","response","fetchWithError","joinPath","getAuthorizationHeaders","toRealmSettings","generalTab","loginTab","emailTab","themesTab","keysTab","eventsTab","localizationTab","securityDefensesTab","sessionsTab","tokensTab","clientPoliciesTab","userProfileTab","userRegistrationTab","useClientPoliciesTab","clientPoliciesProfilesTab","clientPoliciesPoliciesTab","Tooltip","RealmSettingsSection","useParams"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}