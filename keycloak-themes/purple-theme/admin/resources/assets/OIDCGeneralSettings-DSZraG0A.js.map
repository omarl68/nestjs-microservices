{"version":3,"file":"OIDCGeneralSettings-DSZraG0A.js","sources":["../../src/identity-providers/add/DiscoverySettings.tsx","../../src/identity-providers/add/OIDCAuthentication.tsx","../../src/identity-providers/add/OIDCGeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  ExpandableSection,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormGroupField } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nimport \"./discovery-settings.css\";\n\nconst PKCE_METHODS = [\"plain\", \"S256\"] as const;\n\ntype DiscoverySettingsProps = {\n  readOnly: boolean;\n};\n\nconst Fields = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation();\n  const [pkceMethodOpen, setPkceMethodOpen] = useState(false);\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  const validateSignature = useWatch({\n    control,\n    name: \"config.validateSignature\",\n  });\n  const useJwks = useWatch({\n    control,\n    name: \"config.useJwksUrl\",\n  });\n  const isPkceEnabled = useWatch({\n    control,\n    name: \"config.pkceEnabled\",\n  });\n\n  return (\n    <div className=\"pf-c-form pf-m-horizontal\">\n      <FormGroup\n        label={t(\"authorizationUrl\")}\n        fieldId=\"kc-authorization-url\"\n        isRequired\n        validated={\n          errors.config?.authorizationUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          data-testid=\"authorizationUrl\"\n          id=\"kc-authorization-url\"\n          validated={\n            errors.config?.authorizationUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.authorizationUrl\", { required: true })}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"tokenUrl\")}\n        fieldId=\"tokenUrl\"\n        isRequired\n        validated={\n          errors.config?.tokenUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          id=\"tokenUrl\"\n          data-testid=\"tokenUrl\"\n          validated={\n            errors.config?.tokenUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.tokenUrl\", { required: true })}\n        />\n      </FormGroup>\n      <TextField\n        field=\"config.logoutUrl\"\n        label=\"logoutUrl\"\n        isReadOnly={readOnly}\n      />\n      <TextField\n        field=\"config.userInfoUrl\"\n        label=\"userInfoUrl\"\n        isReadOnly={readOnly}\n      />\n      <TextField field=\"config.issuer\" label=\"issuer\" isReadOnly={readOnly} />\n      <SwitchField\n        field=\"config.validateSignature\"\n        label=\"validateSignature\"\n        isReadOnly={readOnly}\n      />\n      {validateSignature === \"true\" && (\n        <>\n          <SwitchField\n            field=\"config.useJwksUrl\"\n            label=\"useJwksUrl\"\n            data-testid=\"useJwksUrl\"\n            isReadOnly={readOnly}\n          />\n          {useJwks === \"true\" ? (\n            <TextField\n              field=\"config.jwksUrl\"\n              label=\"jwksUrl\"\n              isReadOnly={readOnly}\n            />\n          ) : (\n            <>\n              <FormGroupField label=\"validatingPublicKey\">\n                <KeycloakTextArea\n                  data-testid=\"validatingPublicKey\"\n                  aria-label={t(\"validatingPublicKey\")}\n                  {...register(\"config.publicKeySignatureVerifier\")}\n                />\n              </FormGroupField>\n              <TextField\n                field=\"config.publicKeySignatureVerifierKeyId\"\n                label=\"validatingPublicKeyId\"\n                isReadOnly={readOnly}\n              />\n            </>\n          )}\n        </>\n      )}\n      <SwitchField\n        field=\"config.pkceEnabled\"\n        label=\"pkceEnabled\"\n        isReadOnly={readOnly}\n      />\n      {isPkceEnabled === \"true\" && (\n        <FormGroup\n          className=\"pf-u-pb-3xl\"\n          label={t(\"pkceMethod\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"pkceMethodHelp\")}\n              fieldLabelId=\"pkceMethod\"\n            />\n          }\n          fieldId=\"pkceMethod\"\n        >\n          <Controller\n            name=\"config.pkceMethod\"\n            defaultValue={PKCE_METHODS[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"pkceMethod\"\n                required\n                direction=\"down\"\n                onToggle={() => setPkceMethodOpen(!pkceMethodOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setPkceMethodOpen(false);\n                }}\n                selections={t(`${field.value}`)}\n                variant={SelectVariant.single}\n                aria-label={t(\"pkceMethod\")}\n                isOpen={pkceMethodOpen}\n              >\n                {PKCE_METHODS.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  >\n                    {t(`${option}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n    </div>\n  );\n};\n\nexport const DiscoverySettings = ({ readOnly }: DiscoverySettingsProps) => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <>\n      {readOnly && (\n        <ExpandableSection\n          className=\"keycloak__discovery-settings__metadata\"\n          toggleText={isExpanded ? t(\"hideMetaData\") : t(\"showMetaData\")}\n          onToggle={() => setIsExpanded(!isExpanded)}\n          isExpanded={isExpanded}\n        >\n          <Fields readOnly={readOnly} />\n        </ExpandableSection>\n      )}\n      {!readOnly && <Fields readOnly={readOnly} />}\n    </>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { ClientIdSecret } from \"../component/ClientIdSecret\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { sortProviders } from \"../../util\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { TextField } from \"../component/TextField\";\n\nconst clientAuthentications = [\n  \"client_secret_post\",\n  \"client_secret_basic\",\n  \"client_secret_jwt\",\n  \"private_key_jwt\",\n];\n\nexport const OIDCAuthentication = ({ create = true }: { create?: boolean }) => {\n  const providers = useServerInfo().providers!.clientSignature.providers;\n  const { t } = useTranslation();\n\n  const { control } = useFormContext();\n  const [openClientAuth, setOpenClientAuth] = useState(false);\n  const [openClientAuthSigAlg, setOpenClientAuthSigAlg] = useState(false);\n\n  const clientAuthMethod = useWatch({\n    control: control,\n    name: \"config.clientAuthMethod\",\n  });\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"clientAuthentication\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clientAuthenticationHelp\")}\n            fieldLabelId=\"clientAuthentication\"\n          />\n        }\n        fieldId=\"clientAuthentication\"\n      >\n        <Controller\n          name=\"config.clientAuthMethod\"\n          defaultValue={clientAuthentications[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"clientAuthentication\"\n              required\n              onToggle={() => setOpenClientAuth(!openClientAuth)}\n              onSelect={(_, value) => {\n                field.onChange(value as string);\n                setOpenClientAuth(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"clientAuthentication\")}\n              isOpen={openClientAuth}\n            >\n              {clientAuthentications.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                >\n                  {t(`clientAuthentications.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ClientIdSecret\n        secretRequired={clientAuthMethod !== \"private_key_jwt\"}\n        create={create}\n      />\n      <FormGroup\n        label={t(\"clientAssertionSigningAlg\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clientAssertionSigningAlgHelp\")}\n            fieldLabelId=\"clientAssertionSigningAlg\"\n          />\n        }\n        fieldId=\"clientAssertionSigningAlg\"\n      >\n        <Controller\n          name=\"config.clientAssertionSigningAlg\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              maxHeight={200}\n              toggleId=\"clientAssertionSigningAlg\"\n              onToggle={() => setOpenClientAuthSigAlg(!openClientAuthSigAlg)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setOpenClientAuthSigAlg(false);\n              }}\n              selections={field.value || t(\"algorithmNotSpecified\")}\n              variant={SelectVariant.single}\n              aria-label={t(\"selectClientAssertionSigningAlg\")}\n              isOpen={openClientAuthSigAlg}\n            >\n              {[\n                <SelectOption selected={field.value === \"\"} key=\"\" value=\"\">\n                  {t(\"algorithmNotSpecified\")}\n                </SelectOption>,\n                ...sortProviders(providers).map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  />\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {(clientAuthMethod === \"private_key_jwt\" ||\n        clientAuthMethod === \"client_secret_jwt\") && (\n        <TextField\n          field=\"config.clientAssertionAudience\"\n          label=\"clientAssertionAudience\"\n        />\n      )}\n      {clientAuthMethod === \"private_key_jwt\" && (\n        <SwitchField\n          field=\"config.jwtX509HeadersEnabled\"\n          label=\"jwtX509HeadersEnabled\"\n        />\n      )}\n    </>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { useWatch, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams } from \"react-router-dom\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\nimport { RedirectUrl } from \"../component/RedirectUrl\";\nimport { TextField } from \"../component/TextField\";\nimport type { IdentityProviderParams } from \"../routes/IdentityProvider\";\n\nexport const OIDCGeneralSettings = () => {\n  const { t } = useTranslation();\n  const { tab } = useParams<IdentityProviderParams>();\n\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const alias = useWatch({ control, name: \"alias\" });\n\n  return (\n    <>\n      <RedirectUrl id={alias} />\n\n      <FormGroup\n        label={t(\"alias\")}\n        labelIcon={<HelpItem helpText={t(\"aliasHelp\")} fieldLabelId=\"alias\" />}\n        fieldId=\"alias\"\n        isRequired\n        validated={\n          errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          isReadOnly={tab === \"settings\"}\n          isRequired\n          id=\"alias\"\n          data-testid=\"alias\"\n          validated={\n            errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"alias\", { required: true })}\n        />\n      </FormGroup>\n\n      <TextField field=\"displayName\" label=\"displayName\" />\n      <DisplayOrder />\n    </>\n  );\n};\n"],"names":["PKCE_METHODS","Fields","readOnly","t","useTranslation","pkceMethodOpen","setPkceMethodOpen","useState","register","control","errors","useFormContext","validateSignature","useWatch","useJwks","isPkceEnabled","jsxs","jsx","FormGroup","ValidatedOptions","KeycloakTextInput","TextField","SwitchField","Fragment","FormGroupField","KeycloakTextArea","HelpItem","Controller","field","Select","_","value","SelectVariant","option","SelectOption","DiscoverySettings","isExpanded","setIsExpanded","ExpandableSection","clientAuthentications","OIDCAuthentication","create","providers","useServerInfo","openClientAuth","setOpenClientAuth","openClientAuthSigAlg","setOpenClientAuthSigAlg","clientAuthMethod","ClientIdSecret","sortProviders","OIDCGeneralSettings","tab","useParams","alias","RedirectUrl","DisplayOrder"],"mappings":"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"}