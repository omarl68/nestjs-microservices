{"version":3,"file":"ClientProfileForm-DGd8Zzke.js","sources":["../../src/realm-settings/ClientProfileForm.tsx"],"sourcesContent":["import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport type ClientProfilesRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfilesRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  DropdownItem,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Text,\n  TextVariants,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon, TrashIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useMemo, useState } from \"react\";\nimport { useFieldArray, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { toAddExecutor } from \"./routes/AddExecutor\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { ClientProfileParams, toClientProfile } from \"./routes/ClientProfile\";\nimport { toExecutor } from \"./routes/Executor\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfileForm = Required<ClientProfileRepresentation>;\n\nconst defaultValues: ClientProfileForm = {\n  name: \"\",\n  description: \"\",\n  executors: [],\n};\n\nexport default function ClientProfileForm() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const {\n    handleSubmit,\n    setValue,\n    getValues,\n    register,\n    formState: { isDirty, errors },\n    control,\n  } = useForm<ClientProfileForm>({\n    defaultValues,\n    mode: \"onChange\",\n  });\n\n  const { fields: profileExecutors, remove } = useFieldArray({\n    name: \"executors\",\n    control,\n  });\n\n  const { addAlert, addError } = useAlerts();\n  const [profiles, setProfiles] = useState<ClientProfilesRepresentation>();\n  const [isGlobalProfile, setIsGlobalProfile] = useState(false);\n  const { realm, profileName } = useParams<ClientProfileParams>();\n  const serverInfo = useServerInfo();\n  const executorTypes = useMemo(\n    () =>\n      serverInfo.componentTypes?.[\n        \"org.keycloak.services.clientpolicy.executor.ClientPolicyExecutorProvider\"\n      ],\n    [],\n  );\n  const [executorToDelete, setExecutorToDelete] = useState<{\n    idx: number;\n    name: string;\n  }>();\n  const editMode = profileName ? true : false;\n  const [key, setKey] = useState(0);\n  const reload = () => setKey(key + 1);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({ includeGlobalProfiles: true }),\n    (profiles) => {\n      setProfiles({\n        globalProfiles: profiles.globalProfiles,\n        profiles: profiles.profiles?.filter((p) => p.name !== profileName),\n      });\n      const globalProfile = profiles.globalProfiles?.find(\n        (p) => p.name === profileName,\n      );\n      const profile = profiles.profiles?.find((p) => p.name === profileName);\n      setIsGlobalProfile(globalProfile !== undefined);\n      setValue(\"name\", globalProfile?.name ?? profile?.name ?? \"\");\n      setValue(\n        \"description\",\n        globalProfile?.description ?? profile?.description ?? \"\",\n      );\n      setValue(\n        \"executors\",\n        globalProfile?.executors ?? profile?.executors ?? [],\n      );\n    },\n    [key],\n  );\n\n  const save = async (form: ClientProfileForm) => {\n    const updatedProfiles = form;\n\n    try {\n      await adminClient.clientPolicies.createProfiles({\n        ...profiles,\n        profiles: [...(profiles?.profiles || []), updatedProfiles],\n      });\n\n      addAlert(\n        editMode\n          ? t(\"updateClientProfileSuccess\")\n          : t(\"createClientProfileSuccess\"),\n        AlertVariant.success,\n      );\n\n      navigate(toClientProfile({ realm, profileName: form.name }));\n    } catch (error) {\n      addError(\n        editMode ? \"updateClientProfileError\" : \"createClientProfileError\",\n        error,\n      );\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirmTitle\")\n      : t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: executorToDelete?.name!\n      ? t(\"deleteExecutorProfileConfirm\", {\n          executorName: executorToDelete.name!,\n        })\n      : t(\"deleteClientProfileConfirm\", {\n          profileName,\n        }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n\n    onConfirm: async () => {\n      if (executorToDelete?.name!) {\n        remove(executorToDelete.idx);\n        try {\n          await adminClient.clientPolicies.createProfiles({\n            ...profiles,\n            profiles: [...(profiles!.profiles || []), getValues()],\n          });\n          addAlert(t(\"deleteExecutorSuccess\"), AlertVariant.success);\n          navigate(toClientProfile({ realm, profileName }));\n        } catch (error) {\n          addError(t(\"deleteExecutorError\"), error);\n        }\n      } else {\n        try {\n          await adminClient.clientPolicies.createProfiles(profiles);\n          addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n          navigate(toClientPolicies({ realm, tab: \"profiles\" }));\n        } catch (error) {\n          addError(t(\"deleteClientError\"), error);\n        }\n      }\n    },\n  });\n\n  if (!profiles) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={editMode ? profileName : t(\"newClientProfile\")}\n        badges={[\n          {\n            id: \"global-client-profile-badge\",\n            text: isGlobalProfile ? (\n              <Label color=\"blue\">{t(\"global\")}</Label>\n            ) : (\n              \"\"\n            ),\n          },\n        ]}\n        divider\n        dropdownItems={\n          editMode && !isGlobalProfile\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  value=\"delete\"\n                  onClick={toggleDeleteDialog}\n                  data-testid=\"deleteClientProfileDropdown\"\n                >\n                  {t(\"deleteClientProfile\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess isHorizontal role=\"view-realm\" className=\"pf-u-mt-lg\">\n          <FormGroup\n            label={t(\"newClientProfileName\")}\n            fieldId=\"kc-name\"\n            helperText={t(\"createClientProfileNameHelperText\")}\n            isRequired\n            helperTextInvalid={t(\"required\")}\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-name\"\n              data-testid=\"client-profile-name\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"name\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"description\")} fieldId=\"kc-description\">\n            <KeycloakTextArea\n              id=\"kc-description\"\n              data-testid=\"client-profile-description\"\n              isReadOnly={isGlobalProfile}\n              {...register(\"description\")}\n            />\n          </FormGroup>\n          <ActionGroup>\n            {!isGlobalProfile && (\n              <Button\n                variant=\"primary\"\n                onClick={() => handleSubmit(save)()}\n                data-testid=\"saveCreateProfile\"\n                isDisabled={!isDirty}\n              >\n                {t(\"save\")}\n              </Button>\n            )}\n            {editMode && !isGlobalProfile && (\n              <Button\n                id={\"reloadProfile\"}\n                variant=\"link\"\n                data-testid={\"reloadProfile\"}\n                isDisabled={!isDirty}\n                onClick={reload}\n              >\n                {t(\"reload\")}\n              </Button>\n            )}\n            {!editMode && !isGlobalProfile && (\n              <Button\n                id={\"cancelCreateProfile\"}\n                variant=\"link\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toClientPolicies({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid={\"cancelCreateProfile\"}\n              >\n                {t(\"cancel\")}\n              </Button>\n            )}\n          </ActionGroup>\n          {editMode && (\n            <>\n              <Flex>\n                <FlexItem>\n                  <Text className=\"kc-executors\" component={TextVariants.h1}>\n                    {t(\"executors\")}\n                    <HelpItem\n                      helpText={t(\"executorsHelpText\")}\n                      fieldLabelId=\"executors\"\n                    />\n                  </Text>\n                </FlexItem>\n                {!isGlobalProfile && (\n                  <FlexItem align={{ default: \"alignRight\" }}>\n                    <Button\n                      id=\"addExecutor\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toAddExecutor({\n                            realm,\n                            profileName,\n                          })}\n                        />\n                      )}\n                      variant=\"link\"\n                      className=\"kc-addExecutor\"\n                      data-testid=\"addExecutor\"\n                      icon={<PlusCircleIcon />}\n                    >\n                      {t(\"addExecutor\")}\n                    </Button>\n                  </FlexItem>\n                )}\n              </Flex>\n              {profileExecutors.length > 0 && (\n                <>\n                  <DataList aria-label={t(\"executors\")} isCompact>\n                    {profileExecutors.map((executor, idx) => (\n                      <DataListItem\n                        aria-labelledby={\"executors-list-item\"}\n                        key={executor.executor}\n                        id={executor.executor}\n                      >\n                        <DataListItemRow data-testid=\"executors-list-row\">\n                          <DataListItemCells\n                            dataListCells={[\n                              <DataListCell\n                                key=\"executor\"\n                                data-testid=\"executor-type\"\n                              >\n                                {executor.configuration ? (\n                                  <Button\n                                    component={(props) => (\n                                      <Link\n                                        {...props}\n                                        to={toExecutor({\n                                          realm,\n                                          profileName,\n                                          executorName: executor.executor!,\n                                        })}\n                                      />\n                                    )}\n                                    variant=\"link\"\n                                    data-testid=\"editExecutor\"\n                                  >\n                                    {executor.executor}\n                                  </Button>\n                                ) : (\n                                  <span className=\"kc-unclickable-executor\">\n                                    {executor.executor}\n                                  </span>\n                                )}\n                                {executorTypes\n                                  ?.filter(\n                                    (type) => type.id === executor.executor,\n                                  )\n                                  .map((type) => (\n                                    <Fragment key={type.id}>\n                                      <HelpItem\n                                        key={type.id}\n                                        helpText={type.helpText}\n                                        fieldLabelId=\"executorTypeTextHelpText\"\n                                      />\n                                      {!isGlobalProfile && (\n                                        <Button\n                                          variant=\"link\"\n                                          isInline\n                                          icon={\n                                            <TrashIcon\n                                              key={`executorType-trash-icon-${type.id}`}\n                                              className=\"kc-executor-trash-icon\"\n                                              data-testid=\"deleteExecutor\"\n                                            />\n                                          }\n                                          onClick={() => {\n                                            toggleDeleteDialog();\n                                            setExecutorToDelete({\n                                              idx: idx,\n                                              name: type.id,\n                                            });\n                                          }}\n                                          aria-label={t(\"remove\")}\n                                        />\n                                      )}\n                                    </Fragment>\n                                  ))}\n                              </DataListCell>,\n                            ]}\n                          />\n                        </DataListItemRow>\n                      </DataListItem>\n                    ))}\n                  </DataList>\n                  {isGlobalProfile && (\n                    <Button\n                      id=\"backToClientPolicies\"\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toClientPolicies({ realm, tab: \"profiles\" })}\n                        />\n                      )}\n                      variant=\"primary\"\n                      className=\"kc-backToPolicies\"\n                      data-testid=\"backToClientPolicies\"\n                    >\n                      {t(\"back\")}\n                    </Button>\n                  )}\n                </>\n              )}\n              {profileExecutors.length === 0 && (\n                <>\n                  <Divider />\n                  <Text\n                    className=\"kc-emptyExecutors\"\n                    component={TextVariants.h2}\n                  >\n                    {t(\"emptyExecutors\")}\n                  </Text>\n                </>\n              )}\n            </>\n          )}\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["defaultValues","ClientProfileForm","useTranslation","navigate","useNavigate","handleSubmit","setValue","getValues","register","isDirty","errors","control","useForm","profileExecutors","remove","useFieldArray","addAlert","addError","useAlerts","profiles","setProfiles","useState","isGlobalProfile","setIsGlobalProfile","realm","profileName","useParams","serverInfo","useServerInfo","executorTypes","useMemo","executorToDelete","setExecutorToDelete","editMode","key","setKey","reload","useFetch","adminClient","p","globalProfile","profile","save","form","updatedProfiles","AlertVariant","toClientProfile","error","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","toClientPolicies","jsxs","Fragment","jsx","ViewHeader","Label","DropdownItem","PageSection","FormAccess","FormGroup","ValidatedOptions","KeycloakTextInput","KeycloakTextArea","ActionGroup","Button","props","Link","Flex","FlexItem","Text","TextVariants","HelpItem","toAddExecutor","PlusCircleIcon","DataList","executor","idx","DataListItem","DataListItemRow","DataListItemCells","DataListCell","toExecutor","type","TrashIcon","Divider","KeycloakSpinner"],"mappings":"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"}