{"version":3,"file":"GroupsSection-CqZh6Dcx.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerPanelBody.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/Drawer/DrawerHead.js","../../../../node_modules/.pnpm/@patternfly+react-icons@4.93.7_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-icons/dist/esm/icons/tree-icon.js","../../src/components/bread-crumb/GroupBreadCrumbs.tsx","../../src/groups/groupIdUtils.ts","../../src/groups/GroupAttributes.tsx","../../src/groups/GroupRoleMapping.tsx","../../src/groups/components/GroupToolbar.tsx","../../src/groups/GroupTable.tsx","../../src/groups/MembersModal.tsx","../../src/groups/Members.tsx","../../src/groups/GroupsSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nexport const DrawerPanelBody = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.drawerBody, hasNoPadding && styles.modifiers.noPadding, className) }, props), children));\n};\nDrawerPanelBody.displayName = 'DrawerPanelBody';\n//# sourceMappingURL=DrawerPanelBody.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Drawer/drawer';\nimport { css } from '@patternfly/react-styles';\nimport { DrawerPanelBody } from './DrawerPanelBody';\nexport const DrawerHead = (_a) => {\n    var { \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    className = '', children, hasNoPadding = false } = _a, props = __rest(_a, [\"className\", \"children\", \"hasNoPadding\"]);\n    return (React.createElement(DrawerPanelBody, { hasNoPadding: hasNoPadding },\n        React.createElement(\"div\", Object.assign({ className: css(styles.drawerHead, className) }, props), children)));\n};\nDrawerHead.displayName = 'DrawerHead';\n//# sourceMappingURL=DrawerHead.js.map","import { createIcon } from '../createIcon';\n\nexport const TreeIconConfig = {\n  name: 'TreeIcon',\n  height: 512,\n  width: 384,\n  svgPath: 'M378.31 378.49L298.42 288h30.63c9.01 0 16.98-5 20.78-13.06 3.8-8.04 2.55-17.26-3.28-24.05L268.42 160h28.89c9.1 0 17.3-5.35 20.86-13.61 3.52-8.13 1.86-17.59-4.24-24.08L203.66 4.83c-6.03-6.45-17.28-6.45-23.32 0L70.06 122.31c-6.1 6.49-7.75 15.95-4.24 24.08C69.38 154.65 77.59 160 86.69 160h28.89l-78.14 90.91c-5.81 6.78-7.06 15.99-3.27 24.04C37.97 283 45.93 288 54.95 288h30.63L5.69 378.49c-6 6.79-7.36 16.09-3.56 24.26 3.75 8.05 12 13.25 21.01 13.25H160v24.45l-30.29 48.4c-5.32 10.64 2.42 23.16 14.31 23.16h95.96c11.89 0 19.63-12.52 14.31-23.16L224 440.45V416h136.86c9.01 0 17.26-5.2 21.01-13.25 3.8-8.17 2.44-17.47-3.56-24.26z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const TreeIcon = createIcon(TreeIconConfig);\n\nexport default TreeIcon;","import { useEffect } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { Breadcrumb, BreadcrumbItem } from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../../groups/SubGroupsContext\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\n\nexport const GroupBreadCrumbs = () => {\n  const { t } = useTranslation();\n  const { clear, remove, subGroups } = useSubGroups();\n  const { realm } = useRealm();\n  const location = useLocation();\n\n  useEffect(() => {\n    const { pathname } = location;\n\n    if (!pathname.includes(\"/groups\") || pathname.endsWith(\"/groups\")) {\n      clear();\n    }\n  }, [location]);\n\n  return subGroups.length !== 0 ? (\n    <Breadcrumb>\n      <BreadcrumbItem key=\"home\">\n        <Link to={`/${realm}/groups`}>{t(\"groups\")}</Link>\n      </BreadcrumbItem>\n      {subGroups.map((group, i) => {\n        const isLastGroup = i === subGroups.length - 1;\n        return (\n          <BreadcrumbItem key={group.id} isActive={isLastGroup}>\n            {!isLastGroup && (\n              <Link\n                to={location.pathname.substring(\n                  0,\n                  location.pathname.indexOf(group.id!) + group.id!.length,\n                )}\n                onClick={() => remove(group)}\n              >\n                {group.name}\n              </Link>\n            )}\n            {isLastGroup &&\n              (group.id === \"search\" ? group.name : t(\"groupDetails\"))}\n          </BreadcrumbItem>\n        );\n      })}\n    </Breadcrumb>\n  ) : null;\n};\n","export const getId = (pathname: string) => {\n  const pathParts = pathname.substr(1).split(\"/\");\n  return pathParts.length > 1 ? pathParts.splice(2) : undefined;\n};\n\nexport const getLastId = (pathname: string) => {\n  const pathParts = getId(pathname);\n  return pathParts ? pathParts[pathParts.length - 1] : undefined;\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  PageSection,\n  PageSectionVariants,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport { arrayToKeyValue } from \"../components/key-value-form/key-value-convert\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { getLastId } from \"./groupIdUtils\";\n\nexport const GroupAttributes = () => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n\n  const location = useLocation();\n  const id = getLastId(location.pathname)!;\n  const [currentGroup, setCurrentGroup] = useState<GroupRepresentation>();\n\n  useFetch(\n    () => adminClient.groups.findOne({ id }),\n    (group) => {\n      convertToFormValues(group!, form.setValue);\n      setCurrentGroup(group);\n    },\n    [id],\n  );\n\n  const save = async (attributeForm: AttributeForm) => {\n    try {\n      const attributes = convertFormValuesToObject(attributeForm).attributes;\n      await adminClient.groups.update(\n        { id: id! },\n        { ...currentGroup, attributes },\n      );\n\n      setCurrentGroup({ ...currentGroup, attributes });\n      addAlert(t(\"groupUpdated\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"groupUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <AttributesForm\n        form={form}\n        save={save}\n        fineGrainedAccess={currentGroup?.access?.manage}\n        reset={() =>\n          form.reset({\n            attributes: arrayToKeyValue(currentGroup?.attributes!),\n          })\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { RoleMapping, Row } from \"../components/role-mapping/RoleMapping\";\n\ntype GroupRoleMappingProps = {\n  id: string;\n  name: string;\n};\n\nexport const GroupRoleMapping = ({ id, name }: GroupRoleMappingProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.groups.addRealmRoleMappings({\n        id,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.groups.addClientRoleMappings({\n              id,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n\n  return <RoleMapping name={name} id={id} type=\"groups\" save={assignRoles} />;\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\n\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useToggle from \"../../utils/useToggle\";\n\ntype GroupToolbarProps = {\n  toggleCreate: () => void;\n  toggleDelete: () => void;\n  kebabDisabled: boolean;\n};\n\nexport const GroupToolbar = ({\n  toggleCreate,\n  toggleDelete,\n  kebabDisabled,\n}: GroupToolbarProps) => {\n  const { t } = useTranslation();\n  const { currentGroup } = useSubGroups();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const [openKebab, toggleKebab] = useToggle();\n\n  if (!isManager) return <div />;\n\n  return (\n    <>\n      <ToolbarItem>\n        <Button\n          data-testid=\"openCreateGroupModal\"\n          variant=\"primary\"\n          onClick={toggleCreate}\n        >\n          {t(\"createGroup\")}\n        </Button>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Dropdown\n          toggle={\n            <KebabToggle onToggle={toggleKebab} isDisabled={kebabDisabled} />\n          }\n          isOpen={openKebab}\n          isPlain\n          dropdownItems={[\n            <DropdownItem\n              key=\"action\"\n              component=\"button\"\n              onClick={() => {\n                toggleDelete();\n                toggleKebab();\n              }}\n            >\n              {t(\"delete\")}\n            </DropdownItem>,\n          ]}\n        />\n      </ToolbarItem>\n    </>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  GroupQuery,\n  SubGroupQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport { SearchInput, ToolbarItem } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAccess } from \"../context/access/Access\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupToolbar } from \"./components/GroupToolbar\";\nimport { MoveDialog } from \"./components/MoveDialog\";\nimport { getLastId } from \"./groupIdUtils\";\nimport { adminClient } from \"../admin-client\";\n\ntype GroupTableProps = {\n  refresh: () => void;\n};\n\nexport const GroupTable = ({ refresh: viewRefresh }: GroupTableProps) => {\n  const { t } = useTranslation();\n\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [isCreateModalOpen, toggleCreateOpen] = useToggle();\n  const [showDelete, toggleShowDelete] = useToggle();\n  const [move, setMove] = useState<GroupRepresentation>();\n\n  const { currentGroup } = useSubGroups();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const [search, setSearch] = useState<string>();\n\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n\n  const loader = async (first?: number, max?: number) => {\n    let groupsData = undefined;\n    if (id) {\n      const args: SubGroupQuery = {\n        first: first,\n        max: max,\n        parentId: id,\n      };\n      groupsData = await adminClient.groups.listSubGroups(args);\n    } else {\n      const args: GroupQuery = {\n        search: search || \"\",\n        first: first || undefined,\n        max: max || undefined,\n      };\n      groupsData = await adminClient.groups.find(args);\n    }\n\n    return groupsData;\n  };\n\n  return (\n    <>\n      <DeleteGroup\n        show={showDelete}\n        toggleDialog={toggleShowDelete}\n        selectedRows={selectedRows}\n        refresh={() => {\n          refresh();\n          viewRefresh();\n          setSelectedRows([]);\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={rename.id}\n          rename={rename}\n          refresh={() => {\n            refresh();\n            viewRefresh();\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      {isCreateModalOpen && (\n        <GroupsModal\n          id={selectedRows[0]?.id || id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={() => {\n            setSelectedRows([]);\n            refresh();\n            viewRefresh();\n          }}\n        />\n      )}\n      {move && (\n        <MoveDialog\n          source={move}\n          refresh={() => {\n            setMove(undefined);\n            refresh();\n            viewRefresh();\n          }}\n          onClose={() => setMove(undefined)}\n        />\n      )}\n      <KeycloakDataTable\n        key={`${id}${key}`}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        canSelectAll\n        loader={loader}\n        ariaLabelKey=\"groups\"\n        isPaginated\n        isSearching={!!search}\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <SearchInput\n                data-testid=\"group-search\"\n                placeholder={t(\"filterGroups\")}\n                value={search}\n                onChange={(_, value) => {\n                  setSearch(value);\n                }}\n                onSearch={refresh}\n                onClear={() => {\n                  setSearch(\"\");\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            <GroupToolbar\n              toggleCreate={toggleCreateOpen}\n              toggleDelete={toggleShowDelete}\n              kebabDisabled={selectedRows!.length === 0}\n            />\n          </>\n        }\n        actions={\n          !isManager\n            ? []\n            : [\n                {\n                  title: t(\"rename\"),\n                  onRowClick: async (group) => {\n                    setRename(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"moveTo\"),\n                  onRowClick: async (group) => {\n                    setMove(group);\n                    return false;\n                  },\n                },\n                {\n                  title: t(\"createChildGroup\"),\n                  onRowClick: async (group) => {\n                    setSelectedRows([group]);\n                    toggleCreateOpen();\n                    return false;\n                  },\n                },\n                {\n                  isSeparator: true,\n                },\n                {\n                  title: t(\"delete\"),\n                  onRowClick: async (group: GroupRepresentation) => {\n                    setSelectedRows([group]);\n                    toggleShowDelete();\n                    return true;\n                  },\n                },\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groupName\",\n            cellRenderer: (group) =>\n              group.access?.view ? (\n                <Link key={group.id} to={`${location.pathname}/${group.id}`}>\n                  {group.name}\n                </Link>\n              ) : (\n                <span>{group.name}</span>\n              ),\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(`noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}`)}\n            instructions={t(\n              `noGroupsInThis${id ? \"SubGroup\" : \"Realm\"}Instructions`,\n            )}\n            primaryActionText={t(\"createGroup\")}\n            onPrimaryAction={toggleCreateOpen}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { differenceBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { emptyFormatter } from \"../util\";\n\ntype MemberModalProps = {\n  groupId: string;\n  onClose: () => void;\n};\n\nexport const MemberModal = ({ groupId, onClose }: MemberModalProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const members = await adminClient.groups.listMembers({ id: groupId });\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max! + members.length,\n      search: search || \"\",\n    };\n\n    try {\n      const users = await adminClient.users.find({ ...params });\n      return differenceBy(users, members, \"id\").slice(0, max);\n    } catch (error) {\n      addError(\"noUsersFoundError\", error);\n      return [];\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={t(\"addMember\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"add\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={async () => {\n            try {\n              await Promise.all(\n                selectedRows.map((user) =>\n                  adminClient.users.addToGroup({ id: user.id!, groupId }),\n                ),\n              );\n              onClose();\n              addAlert(\n                t(\"usersAdded\", { count: selectedRows.length }),\n                AlertVariant.success,\n              );\n            } catch (error) {\n              addError(\"usersAddedError\", error);\n            }\n          }}\n        >\n          {t(\"add\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"titleUsers\"\n        searchPlaceholderKey=\"searchForUser\"\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noUsersFound\")}\n            instructions={t(\"emptyInstructions\")}\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"username\",\n          },\n          {\n            name: \"email\",\n            displayKey: \"email\",\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { SubGroupQuery } from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport {\n  AlertVariant,\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { GroupPath } from \"../components/group/GroupPath\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport { emptyFormatter } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { MemberModal } from \"./MembersModal\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { getLastId } from \"./groupIdUtils\";\n\ntype MembersOf = UserRepresentation & {\n  membership: GroupRepresentation[];\n};\n\nconst MemberOfRenderer = (member: MembersOf) => {\n  return (\n    <>\n      {member.membership.map((group, index) => (\n        <>\n          <GroupPath key={group.id + \"-\" + member.id} group={group} />\n          {member.membership[index + 1] ? \", \" : \"\"}\n        </>\n      ))}\n    </>\n  );\n};\n\nconst UserDetailLink = (user: MembersOf) => {\n  const { realm } = useRealm();\n  return (\n    <Link key={user.id} to={toUser({ realm, id: user.id!, tab: \"settings\" })}>\n      {user.username}\n    </Link>\n  );\n};\n\nexport const Members = () => {\n  const { t } = useTranslation();\n\n  const { addAlert, addError } = useAlerts();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n  const [includeSubGroup, setIncludeSubGroup] = useState(false);\n  const { currentGroup: group } = useSubGroups();\n  const [currentGroup, setCurrentGroup] = useState<GroupRepresentation>();\n  const [addMembers, setAddMembers] = useState(false);\n  const [isKebabOpen, setIsKebabOpen] = useState(false);\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const { hasAccess } = useAccess();\n\n  useFetch(\n    () => adminClient.groups.findOne({ id: group()!.id! }),\n    setCurrentGroup,\n    [],\n  );\n\n  const isManager =\n    hasAccess(\"manage-users\") || currentGroup?.access!.manageMembership;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const getMembership = async (id: string) =>\n    await adminClient.users.listGroups({ id: id! });\n\n  // this queries the subgroups using the new search paradigm but doesn't\n  // account for pagination and therefore isn't going to scale well\n  const getSubGroups = async (groupId?: string, count = 0) => {\n    let nestedGroups: GroupRepresentation[] = [];\n    if (!count || !groupId) {\n      return nestedGroups;\n    }\n    const args: SubGroupQuery = {\n      parentId: groupId,\n      first: 0,\n      max: count,\n    };\n    const subGroups: GroupRepresentation[] =\n      await adminClient.groups.listSubGroups(args);\n    nestedGroups = nestedGroups.concat(subGroups);\n\n    await Promise.all(\n      subGroups.map((g) => getSubGroups(g.id, g.subGroupCount)),\n    ).then((values: GroupRepresentation[][]) => {\n      values.forEach((groups) => (nestedGroups = nestedGroups.concat(groups)));\n    });\n    return nestedGroups;\n  };\n\n  const loader = async (first?: number, max?: number) => {\n    if (!id) {\n      return [];\n    }\n\n    let members = await adminClient.groups.listMembers({\n      id: id!,\n      first,\n      max,\n    });\n\n    if (includeSubGroup && currentGroup?.subGroupCount && currentGroup.id) {\n      const subGroups = await getSubGroups(\n        currentGroup.id,\n        currentGroup.subGroupCount,\n      );\n      await Promise.all(\n        subGroups.map((g) => adminClient.groups.listMembers({ id: g.id! })),\n      ).then((values: UserRepresentation[][]) => {\n        values.forEach((users) => (members = members.concat(users)));\n      });\n      members = uniqBy(members, (member) => member.username);\n    }\n\n    const memberOfPromises = await Promise.all(\n      members.map((member) => getMembership(member.id!)),\n    );\n    return members.map((member: UserRepresentation, i) => {\n      return { ...member, membership: memberOfPromises[i] };\n    });\n  };\n\n  if (!currentGroup) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      {addMembers && (\n        <MemberModal\n          groupId={id!}\n          onClose={() => {\n            setAddMembers(false);\n            refresh();\n          }}\n        />\n      )}\n      <KeycloakDataTable\n        data-testid=\"members-table\"\n        key={`${id}${key}${includeSubGroup}`}\n        loader={loader}\n        ariaLabelKey=\"members\"\n        isPaginated\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        toolbarItem={\n          isManager && (\n            <>\n              <ToolbarItem>\n                <Button\n                  data-testid=\"addMember\"\n                  variant=\"primary\"\n                  onClick={() => setAddMembers(true)}\n                >\n                  {t(\"addMember\")}\n                </Button>\n              </ToolbarItem>\n              <ToolbarItem>\n                <Checkbox\n                  data-testid=\"includeSubGroupsCheck\"\n                  label={t(\"includeSubGroups\")}\n                  id=\"kc-include-sub-groups\"\n                  isChecked={includeSubGroup}\n                  onChange={() => setIncludeSubGroup(!includeSubGroup)}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <KebabToggle\n                      onToggle={() => setIsKebabOpen(!isKebabOpen)}\n                      isDisabled={selectedRows.length === 0}\n                    />\n                  }\n                  isOpen={isKebabOpen}\n                  isPlain\n                  dropdownItems={[\n                    <DropdownItem\n                      key=\"action\"\n                      component=\"button\"\n                      onClick={async () => {\n                        try {\n                          await Promise.all(\n                            selectedRows.map((user) =>\n                              adminClient.users.delFromGroup({\n                                id: user.id!,\n                                groupId: id!,\n                              }),\n                            ),\n                          );\n                          setIsKebabOpen(false);\n                          addAlert(\n                            t(\"usersLeft\", { count: selectedRows.length }),\n                            AlertVariant.success,\n                          );\n                        } catch (error) {\n                          addError(\"usersLeftError\", error);\n                        }\n\n                        refresh();\n                      }}\n                    >\n                      {t(\"leave\")}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          )\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"leave\"),\n                  onRowClick: async (user) => {\n                    try {\n                      await adminClient.users.delFromGroup({\n                        id: user.id!,\n                        groupId: id!,\n                      });\n                      addAlert(\n                        t(\"usersLeft\", { count: 1 }),\n                        AlertVariant.success,\n                      );\n                    } catch (error) {\n                      addError(\"usersLeftError\", error);\n                    }\n\n                    return true;\n                  },\n                } as Action<UserRepresentation>,\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"name\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n            displayKey: \"email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"membership\",\n            displayKey: \"membership\",\n            cellRenderer: MemberOfRenderer,\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noUsersFound\")}\n            instructions={isManager ? t(\"emptyInstructions\") : undefined}\n            primaryActionText={isManager ? t(\"addMember\") : undefined}\n            onPrimaryAction={() => setAddMembers(true)}\n            secondaryActions={[\n              {\n                text: t(\"includeSubGroups\"),\n                onClick: () => setIncludeSubGroup(true),\n              },\n            ]}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Button,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  DropdownItem,\n  PageSection,\n  PageSectionVariants,\n  Tab,\n  TabTitleText,\n  Tabs,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { AngleLeftIcon, TreeIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\n\nimport { GroupBreadCrumbs } from \"../components/bread-crumb/GroupBreadCrumbs\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { adminClient } from \"../admin-client\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport useToggle from \"../utils/useToggle\";\nimport { GroupAttributes } from \"./GroupAttributes\";\nimport { GroupRoleMapping } from \"./GroupRoleMapping\";\nimport { GroupTable } from \"./GroupTable\";\nimport { GroupsModal } from \"./GroupsModal\";\nimport { Members } from \"./Members\";\nimport { useSubGroups } from \"./SubGroupsContext\";\nimport { DeleteGroup } from \"./components/DeleteGroup\";\nimport { GroupTree } from \"./components/GroupTree\";\nimport { getId, getLastId } from \"./groupIdUtils\";\nimport { toGroups } from \"./routes/Groups\";\n\nimport \"./GroupsSection.css\";\n\nexport default function GroupsSection() {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const { subGroups, setSubGroups, currentGroup } = useSubGroups();\n  const { realm } = useRealm();\n\n  const [rename, setRename] = useState<GroupRepresentation>();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n\n  const navigate = useNavigate();\n  const location = useLocation();\n  const id = getLastId(location.pathname);\n\n  const [open, toggle] = useToggle(true);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const canViewPermissions =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) &&\n    hasAccess(\"manage-authorization\", \"manage-users\", \"manage-clients\");\n  const canManageGroup =\n    hasAccess(\"manage-users\") || currentGroup()?.access?.manage;\n  const canManageRoles = hasAccess(\"manage-users\");\n  const canViewDetails =\n    hasAccess(\"query-groups\", \"view-users\") ||\n    hasAccess(\"manage-users\", \"query-groups\");\n  const canViewMembers =\n    hasAccess(\"view-users\") ||\n    currentGroup()?.access?.viewMembers ||\n    currentGroup()?.access?.manageMembers;\n\n  useFetch(\n    async () => {\n      const ids = getId(location.pathname);\n      const isNavigationStateInValid = ids && ids.length > subGroups.length;\n\n      if (isNavigationStateInValid) {\n        const groups: GroupRepresentation[] = [];\n        for (const i of ids!) {\n          let group = undefined;\n          if (i !== \"search\") {\n            group = await adminClient.groups.findOne({ id: i });\n          } else {\n            group = { name: t(\"searchGroups\"), id: \"search\" };\n          }\n          if (group) {\n            groups.push(group);\n          } else {\n            throw new Error(t(\"notFound\"));\n          }\n        }\n        return groups;\n      }\n      return [];\n    },\n    (groups: GroupRepresentation[]) => {\n      if (groups.length) setSubGroups(groups);\n    },\n    [id],\n  );\n\n  return (\n    <>\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[currentGroup()!]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      {rename && (\n        <GroupsModal\n          id={id}\n          rename={rename}\n          refresh={(group) => {\n            refresh();\n            setSubGroups([...subGroups.slice(0, subGroups.length - 1), group!]);\n          }}\n          handleModalToggle={() => setRename(undefined)}\n        />\n      )}\n      <PageSection variant={PageSectionVariants.light} className=\"pf-u-p-0\">\n        <Drawer isInline isExpanded={open} key={key} position=\"left\">\n          <DrawerContent\n            panelContent={\n              <DrawerPanelContent isResizable>\n                <DrawerHead>\n                  <GroupTree\n                    refresh={refresh}\n                    canViewDetails={canViewDetails}\n                  />\n                </DrawerHead>\n              </DrawerPanelContent>\n            }\n          >\n            <DrawerContentBody>\n              <Tooltip content={open ? t(\"hide\") : t(\"show\")}>\n                <Button\n                  aria-label={open ? t(\"hide\") : t(\"show\")}\n                  variant=\"plain\"\n                  icon={open ? <AngleLeftIcon /> : <TreeIcon />}\n                  onClick={toggle}\n                />\n              </Tooltip>\n              <GroupBreadCrumbs />\n              <ViewHeader\n                titleKey={!id ? \"groups\" : currentGroup()?.name!}\n                subKey={!id ? \"groupsDescription\" : \"\"}\n                helpUrl={!id ? helpUrls.groupsUrl : \"\"}\n                divider={!id}\n                dropdownItems={\n                  id && canManageGroup\n                    ? [\n                        <DropdownItem\n                          data-testid=\"renameGroupAction\"\n                          key=\"renameGroup\"\n                          onClick={() => setRename(currentGroup())}\n                        >\n                          {t(\"renameGroup\")}\n                        </DropdownItem>,\n                        <DropdownItem\n                          data-testid=\"deleteGroup\"\n                          key=\"deleteGroup\"\n                          onClick={toggleDeleteOpen}\n                        >\n                          {t(\"deleteGroup\")}\n                        </DropdownItem>,\n                      ]\n                    : undefined\n                }\n              />\n              {subGroups.length > 0 && (\n                <Tabs\n                  inset={{\n                    default: \"insetNone\",\n                    md: \"insetSm\",\n                    xl: \"insetLg\",\n                    \"2xl\": \"inset2xl\",\n                  }}\n                  activeKey={activeTab}\n                  onSelect={(_, key) => setActiveTab(key as number)}\n                  isBox\n                  mountOnEnter\n                  unmountOnExit\n                >\n                  <Tab\n                    data-testid=\"groups\"\n                    eventKey={0}\n                    title={<TabTitleText>{t(\"childGroups\")}</TabTitleText>}\n                  >\n                    <GroupTable refresh={refresh} />\n                  </Tab>\n                  {canViewMembers && (\n                    <Tab\n                      data-testid=\"members\"\n                      eventKey={1}\n                      title={<TabTitleText>{t(\"members\")}</TabTitleText>}\n                    >\n                      <Members />\n                    </Tab>\n                  )}\n                  <Tab\n                    data-testid=\"attributes\"\n                    eventKey={2}\n                    title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n                  >\n                    <GroupAttributes />\n                  </Tab>\n                  {canManageRoles && (\n                    <Tab\n                      eventKey={3}\n                      data-testid=\"role-mapping-tab\"\n                      title={<TabTitleText>{t(\"roleMapping\")}</TabTitleText>}\n                    >\n                      <GroupRoleMapping id={id!} name={currentGroup()?.name!} />\n                    </Tab>\n                  )}\n                  {canViewPermissions && (\n                    <Tab\n                      eventKey={4}\n                      data-testid=\"permissionsTab\"\n                      title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                    >\n                      <PermissionsTab id={id} type=\"groups\" />\n                    </Tab>\n                  )}\n                </Tabs>\n              )}\n              {subGroups.length === 0 && <GroupTable refresh={refresh} />}\n            </DrawerContentBody>\n          </DrawerContent>\n        </Drawer>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["DrawerPanelBody","_a","className","children","hasNoPadding","props","__rest","React","css","styles","DrawerHead","TreeIconConfig","TreeIcon","createIcon","GroupBreadCrumbs","useTranslation","clear","remove","subGroups","useSubGroups","realm","useRealm","location","useLocation","useEffect","pathname","jsxs","Breadcrumb","jsx","BreadcrumbItem","Link","group","i","isLastGroup","getId","pathParts","getLastId","GroupAttributes","addAlert","addError","useAlerts","form","useForm","id","currentGroup","setCurrentGroup","useState","useFetch","adminClient","convertToFormValues","save","attributeForm","attributes","convertFormValuesToObject","AlertVariant","error","PageSection","PageSectionVariants","AttributesForm","arrayToKeyValue","GroupRoleMapping","name","t","RoleMapping","rows","realmRoles","row","GroupToolbar","toggleCreate","toggleDelete","kebabDisabled","hasAccess","useAccess","isManager","openKebab","toggleKebab","useToggle","Fragment","ToolbarItem","Button","Dropdown","KebabToggle","DropdownItem","GroupTable","viewRefresh","selectedRows","setSelectedRows","rename","setRename","isCreateModalOpen","toggleCreateOpen","showDelete","toggleShowDelete","move","setMove","key","setKey","refresh","search","setSearch","loader","first","max","groupsData","args","DeleteGroup","GroupsModal","MoveDialog","KeycloakDataTable","SearchInput","_","value","ListEmptyState","MemberModal","groupId","onClose","members","params","users","differenceBy","Modal","ModalVariant","user","emptyFormatter","MemberOfRenderer","member","index","GroupPath","UserDetailLink","toUser","Members","includeSubGroup","setIncludeSubGroup","addMembers","setAddMembers","isKebabOpen","setIsKebabOpen","getMembership","getSubGroups","count","nestedGroups","g","values","groups","uniqBy","memberOfPromises","Checkbox","KeycloakSpinner","GroupsSection","activeTab","setActiveTab","setSubGroups","deleteOpen","toggleDeleteOpen","navigate","useNavigate","open","toggle","canViewPermissions","useIsFeatureEnabled","Feature","canManageGroup","canManageRoles","canViewDetails","canViewMembers","ids","toGroups","Drawer","DrawerContent","DrawerPanelContent","GroupTree","DrawerContentBody","Tooltip","AngleLeftIcon","ViewHeader","helpUrls","Tabs","Tab","TabTitleText","PermissionsTab"],"mappings":"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","x_google_ignoreList":[0,1,2]}