{"version":3,"file":"ClientIdSecret-4ICGdsMs.js","sources":["../../src/identity-providers/component/ClientIdSecret.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\n\nexport const ClientIdSecret = ({\n  secretRequired = true,\n  create = true,\n}: {\n  secretRequired?: boolean;\n  create?: boolean;\n}) => {\n  const { t } = useTranslation();\n\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"clientId\")}\n        labelIcon={\n          <HelpItem helpText={t(\"clientIdHelp\")} fieldLabelId=\"clientId\" />\n        }\n        fieldId=\"kc-client-id\"\n        isRequired\n        validated={\n          errors.config?.clientId\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"kc-client-id\"\n          data-testid=\"clientId\"\n          {...register(\"config.clientId\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"clientSecret\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"clientSecretHelp\")}\n            fieldLabelId=\"clientSecret\"\n          />\n        }\n        fieldId=\"kc-client-secret\"\n        isRequired={secretRequired}\n        validated={\n          errors.config?.clientSecret\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        {create ? (\n          <PasswordInput\n            isRequired={secretRequired}\n            id=\"kc-client-secret\"\n            data-testid=\"clientSecret\"\n            {...register(\"config.clientSecret\", { required: secretRequired })}\n          />\n        ) : (\n          <KeycloakTextInput\n            isRequired={secretRequired}\n            type=\"password\"\n            id=\"kc-client-secret\"\n            data-testid=\"clientSecret\"\n            {...register(\"config.clientSecret\", { required: secretRequired })}\n          />\n        )}\n      </FormGroup>\n    </>\n  );\n};\n"],"names":["ClientIdSecret","secretRequired","create","useTranslation","register","errors","useFormContext","jsxs","Fragment","jsx","FormGroup","HelpItem","ValidatedOptions","KeycloakTextInput","PasswordInput"],"mappings":"2OASO,MAAMA,EAAiB,CAAC,CAC7B,eAAAC,EAAiB,GACjB,OAAAC,EAAS,EACX,IAGM,CACE,KAAA,CAAE,GAAMC,IAER,CACJ,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,GAClBC,EAA+C,EAEnD,OAEIC,EAAAC,EAAA,CAAA,SAAA,CAAAC,EAACC,EAAA,CACC,MAAO,EAAE,UAAU,EACnB,YACGC,EAAS,CAAA,SAAU,EAAE,cAAc,EAAG,aAAa,WAAW,EAEjE,QAAQ,eACR,WAAU,GACV,UACEN,EAAO,QAAQ,SACXO,EAAiB,MACjBA,EAAiB,QAEvB,kBAAmB,EAAE,UAAU,EAE/B,SAAAH,EAACI,EAAA,CACC,WAAU,GACV,GAAG,eACH,cAAY,WACX,GAAGT,EAAS,kBAAmB,CAAE,SAAU,GAAM,CAAA,CACpD,CAAA,CACF,EACAK,EAACC,EAAA,CACC,MAAO,EAAE,cAAc,EACvB,UACED,EAACE,EAAA,CACC,SAAU,EAAE,kBAAkB,EAC9B,aAAa,cAAA,CACf,EAEF,QAAQ,mBACR,WAAYV,EACZ,UACEI,EAAO,QAAQ,aACXO,EAAiB,MACjBA,EAAiB,QAEvB,kBAAmB,EAAE,UAAU,EAE9B,SACCV,EAAAO,EAACK,EAAA,CACC,WAAYb,EACZ,GAAG,mBACH,cAAY,eACX,GAAGG,EAAS,sBAAuB,CAAE,SAAUH,EAAgB,CAAA,CAAA,EAGlEQ,EAACI,EAAA,CACC,WAAYZ,EACZ,KAAK,WACL,GAAG,mBACH,cAAY,eACX,GAAGG,EAAS,sBAAuB,CAAE,SAAUH,EAAgB,CAAA,CAClE,CAAA,CAEJ,CACF,CAAA,CAAA,CAEJ"}