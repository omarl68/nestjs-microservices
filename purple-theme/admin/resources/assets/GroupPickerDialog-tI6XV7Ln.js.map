{"version":3,"file":"GroupPickerDialog-tI6XV7Ln.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListAction.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/DataList/DataListCheck.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewList.js","../../../../node_modules/.pnpm/@patternfly+react-styles@4.92.8/node_modules/@patternfly/react-styles/css/components/TreeView/tree-view.mjs","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewListItem.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeViewRoot.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TreeView/TreeView.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/unionBy.js","../../src/components/group/GroupPath.tsx","../../src/groups/GroupsModal.tsx","../../src/groups/components/DeleteGroup.tsx","../../src/groups/components/MoveDialog.tsx","../../src/groups/components/GroupTree.tsx","../../src/components/group/GroupPickerDialog.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nimport { formatBreakpointMods } from '../../helpers/util';\nexport const DataListAction = (_a) => {\n    var { children, className, visibility, \n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    id, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledBy, isPlainButtonAction } = _a, \n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    props = __rest(_a, [\"children\", \"className\", \"visibility\", \"id\", 'aria-label', 'aria-labelledby', \"isPlainButtonAction\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.dataListItemAction, formatBreakpointMods(visibility, styles), className) }, props), isPlainButtonAction ? React.createElement(\"div\", { className: css(styles.dataListAction) }, children) : children));\n};\nDataListAction.displayName = 'DataListAction';\n//# sourceMappingURL=DataListAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/DataList/data-list';\nexport const DataListCheck = (_a) => {\n    var { className = '', \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    onChange = (checked, event) => { }, isValid = true, isDisabled = false, isChecked = false, checked = false, defaultChecked, otherControls = false } = _a, props = __rest(_a, [\"className\", \"onChange\", \"isValid\", \"isDisabled\", \"isChecked\", \"checked\", \"defaultChecked\", \"otherControls\"]);\n    const check = (React.createElement(\"div\", { className: css(styles.dataListCheck) },\n        React.createElement(\"input\", Object.assign({}, props, { type: \"checkbox\", onChange: event => onChange(event.currentTarget.checked, event), \"aria-invalid\": !isValid, disabled: isDisabled }, ([true, false].includes(defaultChecked) && { defaultChecked }), (![true, false].includes(defaultChecked) && { checked: isChecked || checked })))));\n    return (React.createElement(React.Fragment, null,\n        !otherControls && React.createElement(\"div\", { className: css(styles.dataListItemControl, className) }, check),\n        otherControls && check));\n};\nDataListCheck.displayName = 'DataListCheck';\n//# sourceMappingURL=DataListCheck.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport { Divider } from '../Divider';\nexport const TreeViewList = (_a) => {\n    var { isNested = false, toolbar, children } = _a, props = __rest(_a, [\"isNested\", \"toolbar\", \"children\"]);\n    return (React.createElement(React.Fragment, null,\n        toolbar && (React.createElement(React.Fragment, null,\n            toolbar,\n            React.createElement(Divider, null))),\n        React.createElement(\"ul\", Object.assign({ className: css('pf-c-tree-view__list'), role: isNested ? 'group' : 'tree' }, props), children)));\n};\nTreeViewList.displayName = 'TreeViewList';\n//# sourceMappingURL=TreeViewList.js.map","import './tree-view.css';\nexport default {\n  \"badge\": \"pf-c-badge\",\n  \"modifiers\": {\n    \"compact\": \"pf-m-compact\",\n    \"guides\": \"pf-m-guides\",\n    \"expanded\": \"pf-m-expanded\",\n    \"noBackground\": \"pf-m-no-background\",\n    \"current\": \"pf-m-current\",\n    \"read\": \"pf-m-read\",\n    \"selectable\": \"pf-m-selectable\",\n    \"truncate\": \"pf-m-truncate\"\n  },\n  \"themeDark\": \"pf-theme-dark\",\n  \"treeView\": \"pf-c-tree-view\",\n  \"treeViewAction\": \"pf-c-tree-view__action\",\n  \"treeViewContent\": \"pf-c-tree-view__content\",\n  \"treeViewListItem\": \"pf-c-tree-view__list-item\",\n  \"treeViewNode\": \"pf-c-tree-view__node\",\n  \"treeViewNodeCheck\": \"pf-c-tree-view__node-check\",\n  \"treeViewNodeContainer\": \"pf-c-tree-view__node-container\",\n  \"treeViewNodeContent\": \"pf-c-tree-view__node-content\",\n  \"treeViewNodeCount\": \"pf-c-tree-view__node-count\",\n  \"treeViewNodeIcon\": \"pf-c-tree-view__node-icon\",\n  \"treeViewNodeText\": \"pf-c-tree-view__node-text\",\n  \"treeViewNodeTitle\": \"pf-c-tree-view__node-title\",\n  \"treeViewNodeToggle\": \"pf-c-tree-view__node-toggle\",\n  \"treeViewNodeToggleIcon\": \"pf-c-tree-view__node-toggle-icon\",\n  \"treeViewSearch\": \"pf-c-tree-view__search\"\n};","import React, { useState, useEffect } from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { Badge } from '../Badge';\nimport { GenerateId } from '../../helpers/GenerateId/GenerateId';\nconst TreeViewListItemBase = ({ name, title, id, isExpanded, defaultExpanded = false, children = null, onSelect, onCheck, hasCheck = false, checkProps = {\n    checked: false\n}, hasBadge = false, customBadgeContent, badgeProps = { isRead: true }, isSelectable = false, isCompact, activeItems = [], itemData, parentItem, icon, expandedIcon, action, compareItems, \n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nuseMemo }) => {\n    const [internalIsExpanded, setIsExpanded] = useState(defaultExpanded);\n    useEffect(() => {\n        if (isExpanded !== undefined && isExpanded !== null) {\n            setIsExpanded(isExpanded);\n        }\n        else if (defaultExpanded !== undefined && defaultExpanded !== null) {\n            setIsExpanded(internalIsExpanded || defaultExpanded);\n        }\n    }, [isExpanded, defaultExpanded]);\n    let Component = 'button';\n    if (hasCheck) {\n        Component = 'label';\n    }\n    else if (isSelectable) {\n        Component = 'div';\n    }\n    const ToggleComponent = hasCheck || isSelectable ? 'button' : 'span';\n    const renderToggle = (randomId) => (React.createElement(ToggleComponent, Object.assign({ className: css(styles.treeViewNodeToggle), onClick: (evt) => {\n            if (isSelectable || hasCheck) {\n                setIsExpanded(!internalIsExpanded);\n            }\n            if (isSelectable) {\n                evt.stopPropagation();\n            }\n        } }, ((hasCheck || isSelectable) && { 'aria-labelledby': `label-${randomId}` }), { tabIndex: -1 }),\n        React.createElement(\"span\", { className: css(styles.treeViewNodeToggleIcon) },\n            React.createElement(AngleRightIcon, { \"aria-hidden\": \"true\" }))));\n    const renderCheck = (randomId) => (React.createElement(\"span\", { className: css(styles.treeViewNodeCheck) },\n        React.createElement(\"input\", Object.assign({ type: \"checkbox\", onChange: evt => onCheck && onCheck(evt, itemData, parentItem), onClick: evt => evt.stopPropagation(), ref: elem => elem && (elem.indeterminate = checkProps.checked === null) }, checkProps, { checked: checkProps.checked === null ? false : checkProps.checked, id: randomId, tabIndex: -1 }))));\n    const iconRendered = (React.createElement(\"span\", { className: css(styles.treeViewNodeIcon) },\n        !internalIsExpanded && icon,\n        internalIsExpanded && (expandedIcon || icon)));\n    const renderNodeContent = () => {\n        const content = (React.createElement(React.Fragment, null,\n            isCompact && title && React.createElement(\"span\", { className: css(styles.treeViewNodeTitle) }, title),\n            isSelectable ? (React.createElement(\"button\", { tabIndex: -1, className: css(styles.treeViewNodeText) }, name)) : (React.createElement(\"span\", { className: css(styles.treeViewNodeText) }, name))));\n        return isCompact ? React.createElement(\"span\", { className: css(styles.treeViewNodeContent) }, content) : content;\n    };\n    const badgeRendered = (React.createElement(React.Fragment, null,\n        hasBadge && children && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent ? customBadgeContent : children.props.data.length))),\n        hasBadge && !children && customBadgeContent !== undefined && (React.createElement(\"span\", { className: css(styles.treeViewNodeCount) },\n            React.createElement(Badge, Object.assign({}, badgeProps), customBadgeContent)))));\n    return (React.createElement(\"li\", Object.assign({ id: id, className: css(styles.treeViewListItem, internalIsExpanded && styles.modifiers.expanded) }, (internalIsExpanded && { 'aria-expanded': 'true' }), { role: \"treeitem\", tabIndex: -1 }),\n        React.createElement(\"div\", { className: css(styles.treeViewContent) },\n            React.createElement(GenerateId, { prefix: isSelectable ? 'selectable-id' : 'checkbox-id' }, randomId => (React.createElement(Component, Object.assign({ className: css(styles.treeViewNode, children && (isSelectable || hasCheck) && styles.modifiers.selectable, (!children || isSelectable) &&\n                    activeItems &&\n                    activeItems.length > 0 &&\n                    activeItems.some(item => compareItems && item && compareItems(item, itemData))\n                    ? styles.modifiers.current\n                    : ''), onClick: (evt) => {\n                    if (!hasCheck) {\n                        onSelect && onSelect(evt, itemData, parentItem);\n                        if (!isSelectable && children && evt.isDefaultPrevented() !== true) {\n                            setIsExpanded(!internalIsExpanded);\n                        }\n                    }\n                } }, (hasCheck && { htmlFor: randomId }), ((hasCheck || (isSelectable && children)) && { id: `label-${randomId}` })),\n                React.createElement(\"span\", { className: css(styles.treeViewNodeContainer) },\n                    children && renderToggle(randomId),\n                    hasCheck && renderCheck(randomId),\n                    icon && iconRendered,\n                    renderNodeContent(),\n                    badgeRendered)))),\n            action && React.createElement(\"div\", { className: css(styles.treeViewAction) }, action)),\n        internalIsExpanded && children));\n};\nexport const TreeViewListItem = React.memo(TreeViewListItemBase, (prevProps, nextProps) => {\n    if (!nextProps.useMemo) {\n        return false;\n    }\n    const prevIncludes = prevProps.activeItems &&\n        prevProps.activeItems.length > 0 &&\n        prevProps.activeItems.some(item => prevProps.compareItems && item && prevProps.compareItems(item, prevProps.itemData));\n    const nextIncludes = nextProps.activeItems &&\n        nextProps.activeItems.length > 0 &&\n        nextProps.activeItems.some(item => nextProps.compareItems && item && nextProps.compareItems(item, nextProps.itemData));\n    if (prevIncludes || nextIncludes) {\n        return false;\n    }\n    if (prevProps.name !== nextProps.name ||\n        prevProps.title !== nextProps.title ||\n        prevProps.id !== nextProps.id ||\n        prevProps.isExpanded !== nextProps.isExpanded ||\n        prevProps.defaultExpanded !== nextProps.defaultExpanded ||\n        prevProps.onSelect !== nextProps.onSelect ||\n        prevProps.onCheck !== nextProps.onCheck ||\n        prevProps.hasCheck !== nextProps.hasCheck ||\n        prevProps.checkProps !== nextProps.checkProps ||\n        prevProps.hasBadge !== nextProps.hasBadge ||\n        prevProps.customBadgeContent !== nextProps.customBadgeContent ||\n        prevProps.badgeProps !== nextProps.badgeProps ||\n        prevProps.isCompact !== nextProps.isCompact ||\n        prevProps.icon !== nextProps.icon ||\n        prevProps.expandedIcon !== nextProps.expandedIcon ||\n        prevProps.action !== nextProps.action ||\n        prevProps.parentItem !== nextProps.parentItem ||\n        prevProps.itemData !== nextProps.itemData) {\n        return false;\n    }\n    return true;\n});\nTreeViewListItem.displayName = 'TreeViewListItem';\n//# sourceMappingURL=TreeViewListItem.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/TreeView/tree-view';\nimport { canUseDOM } from '../../helpers/util';\nimport { handleArrows } from '../../helpers';\nimport { KeyTypes } from '../../helpers/constants';\nexport class TreeViewRoot extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.displayName = 'TreeViewRoot';\n        this.treeRef = React.createRef();\n        this.handleKeys = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            const treeItems = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')).filter(el => !el.classList.contains('pf-m-disabled'));\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            handleArrows(event, treeItems, (element) => activeElement === element, undefined, [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                const isExpandable = (_c = (_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.firstElementChild) === null || _b === void 0 ? void 0 : _b.firstElementChild) === null || _c === void 0 ? void 0 : _c.classList.contains('pf-c-tree-view__node-toggle');\n                const isExpanded = (_d = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _d === void 0 ? void 0 : _d.classList.contains('pf-m-expanded');\n                if (key === 'ArrowLeft') {\n                    if (isExpandable && isExpanded) {\n                        activeElement.click();\n                    }\n                    else {\n                        const parentList = (_e = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('ul')) === null || _e === void 0 ? void 0 : _e.parentElement;\n                        if ((parentList === null || parentList === void 0 ? void 0 : parentList.tagName) !== 'DIV') {\n                            const parentButton = parentList === null || parentList === void 0 ? void 0 : parentList.querySelector('button');\n                            activeElement.tabIndex = -1;\n                            if (parentButton) {\n                                parentButton.tabIndex = 0;\n                                parentButton.focus();\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (isExpandable && !isExpanded) {\n                        activeElement.tabIndex = -1;\n                        activeElement.click();\n                        const childElement = (_g = (_f = activeElement === null || activeElement === void 0 ? void 0 : activeElement.closest('li')) === null || _f === void 0 ? void 0 : _f.querySelector('ul > li')) === null || _g === void 0 ? void 0 : _g.querySelector('button');\n                        if (childElement) {\n                            childElement.tabIndex = 0;\n                            childElement.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.handleKeysCheckbox = (event) => {\n            var _a, _b, _c, _d, _e;\n            if (!this.treeRef.current.contains(event.target)) {\n                return;\n            }\n            const activeElement = document.activeElement;\n            const key = event.key;\n            if (key === KeyTypes.Space) {\n                activeElement.click();\n                event.preventDefault();\n            }\n            const treeNodes = Array.from((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node'));\n            handleArrows(event, treeNodes, (element) => element.contains(activeElement), (element) => element.querySelector('button,input'), [], undefined, true, true);\n            if (['ArrowLeft', 'ArrowRight'].includes(key)) {\n                if (key === 'ArrowLeft') {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_b = activeElement === null || activeElement === void 0 ? void 0 : activeElement.parentElement) === null || _b === void 0 ? void 0 : _b.previousSibling) &&\n                            activeElement.parentElement.previousSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.previousSibling) {\n                        if (((_c = activeElement.previousElementSibling) === null || _c === void 0 ? void 0 : _c.tagName) === 'SPAN') {\n                            activeElement.previousSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.previousSibling.focus();\n                        }\n                    }\n                }\n                else {\n                    if ((activeElement === null || activeElement === void 0 ? void 0 : activeElement.tagName) === 'INPUT') {\n                        ((_d = activeElement.parentElement) === null || _d === void 0 ? void 0 : _d.nextSibling) && activeElement.parentElement.nextSibling.focus();\n                    }\n                    else if (activeElement === null || activeElement === void 0 ? void 0 : activeElement.nextSibling) {\n                        if (((_e = activeElement.nextElementSibling) === null || _e === void 0 ? void 0 : _e.tagName) === 'SPAN') {\n                            activeElement.nextSibling.firstChild.focus();\n                        }\n                        else {\n                            activeElement.nextSibling.focus();\n                        }\n                    }\n                }\n                event.preventDefault();\n            }\n        };\n        this.variantStyleModifiers = {\n            default: '',\n            compact: styles.modifiers.compact,\n            compactNoBackground: [styles.modifiers.compact, styles.modifiers.noBackground]\n        };\n    }\n    componentDidMount() {\n        var _a;\n        if (canUseDOM) {\n            window.addEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n        if (this.props.hasChecks || this.props.hasSelectableNodes) {\n            const firstToggle = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-toggle')[0];\n            if (firstToggle) {\n                firstToggle.tabIndex = 0;\n            }\n            if (this.props.hasChecks) {\n                const firstInput = this.treeRef.current.getElementsByTagName('INPUT')[0];\n                if (firstInput) {\n                    firstInput.tabIndex = 0;\n                }\n            }\n            if (this.props.hasSelectableNodes) {\n                const firstTextButton = this.treeRef.current.getElementsByClassName('pf-c-tree-view__node-text')[0];\n                if (firstTextButton) {\n                    firstTextButton.tabIndex = 0;\n                }\n            }\n        }\n        else {\n            ((_a = this.treeRef.current) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('pf-c-tree-view__node')[0]).tabIndex = 0;\n        }\n    }\n    componentWillUnmount() {\n        if (canUseDOM) {\n            window.removeEventListener('keydown', this.props.hasChecks || this.props.hasSelectableNodes ? this.handleKeysCheckbox : this.handleKeys);\n        }\n    }\n    render() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const _a = this.props, { children, hasChecks, hasGuides, variant, className, hasSelectableNodes } = _a, props = __rest(_a, [\"children\", \"hasChecks\", \"hasGuides\", \"variant\", \"className\", \"hasSelectableNodes\"]);\n        return (React.createElement(\"div\", Object.assign({ className: css(styles.treeView, hasGuides && styles.modifiers.guides, this.variantStyleModifiers[variant], className), ref: this.treeRef }, props), children));\n    }\n}\n//# sourceMappingURL=TreeViewRoot.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { TreeViewList } from './TreeViewList';\nimport { TreeViewListItem } from './TreeViewListItem';\nimport { TreeViewRoot } from './TreeViewRoot';\nexport const TreeView = (_a) => {\n    var { data, isNested = false, hasChecks = false, hasBadges = false, hasGuides = false, hasSelectableNodes = false, variant = 'default', defaultAllExpanded = false, allExpanded, icon, expandedIcon, parentItem, onSelect, onCheck, toolbar, activeItems, compareItems = (item, itemToCheck) => item.id === itemToCheck.id, className, useMemo } = _a, props = __rest(_a, [\"data\", \"isNested\", \"hasChecks\", \"hasBadges\", \"hasGuides\", \"hasSelectableNodes\", \"variant\", \"defaultAllExpanded\", \"allExpanded\", \"icon\", \"expandedIcon\", \"parentItem\", \"onSelect\", \"onCheck\", \"toolbar\", \"activeItems\", \"compareItems\", \"className\", \"useMemo\"]);\n    const treeViewList = (React.createElement(TreeViewList, { isNested: isNested, toolbar: toolbar }, data.map(item => {\n        var _a, _b;\n        return (React.createElement(TreeViewListItem, Object.assign({ key: ((_a = item.id) === null || _a === void 0 ? void 0 : _a.toString()) || ((_b = item.name) === null || _b === void 0 ? void 0 : _b.toString()), name: item.name, title: item.title, id: item.id, isExpanded: allExpanded, isSelectable: hasSelectableNodes, defaultExpanded: item.defaultExpanded !== undefined ? item.defaultExpanded : defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, hasCheck: item.hasCheck !== undefined ? item.hasCheck : hasChecks, checkProps: item.checkProps, hasBadge: item.hasBadge !== undefined ? item.hasBadge : hasBadges, customBadgeContent: item.customBadgeContent, badgeProps: item.badgeProps, activeItems: activeItems, parentItem: parentItem, itemData: item, icon: item.icon !== undefined ? item.icon : icon, expandedIcon: item.expandedIcon !== undefined ? item.expandedIcon : expandedIcon, action: item.action, compareItems: compareItems, isCompact: variant === 'compact' || variant === 'compactNoBackground', useMemo: useMemo }, (item.children && {\n            children: (React.createElement(TreeView, { data: item.children, isNested: true, parentItem: item, hasChecks: hasChecks, hasBadges: hasBadges, hasGuides: hasGuides, hasSelectableNodes: hasSelectableNodes, variant: variant, allExpanded: allExpanded, defaultAllExpanded: defaultAllExpanded, onSelect: onSelect, onCheck: onCheck, activeItems: activeItems, icon: icon, expandedIcon: expandedIcon }))\n        }))));\n    })));\n    return (React.createElement(React.Fragment, null, parentItem ? (treeViewList) : (React.createElement(TreeViewRoot, Object.assign({ hasSelectableNodes: hasSelectableNodes, hasChecks: hasChecks, hasGuides: hasGuides, variant: variant, className: className }, props), treeViewList))));\n};\nTreeView.displayName = 'TreeView';\n//# sourceMappingURL=TreeView.js.map","import baseFlatten from './_baseFlatten.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseRest from './_baseRest.js';\nimport baseUniq from './_baseUniq.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\nimport last from './last.js';\n\n/**\n * This method is like `_.union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @example\n *\n * _.unionBy([2.1], [1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nvar unionBy = baseRest(function(arrays) {\n  var iteratee = last(arrays);\n  if (isArrayLikeObject(iteratee)) {\n    iteratee = undefined;\n  }\n  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));\n});\n\nexport default unionBy;\n","import { useState } from \"react\";\nimport { Tooltip } from \"@patternfly/react-core\";\nimport type { TableTextProps } from \"@patternfly/react-table\";\n\nimport type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\n\ntype GroupPathProps = TableTextProps & {\n  group: GroupRepresentation;\n};\n\nexport const GroupPath = ({\n  group: { path },\n  onMouseEnter: onMouseEnterProp,\n  ...props\n}: GroupPathProps) => {\n  const [tooltip, setTooltip] = useState(\"\");\n  const onMouseEnter = (event: any) => {\n    setTooltip(path!);\n    onMouseEnterProp?.(event);\n  };\n  const text = (\n    <span onMouseEnter={onMouseEnter} {...props}>\n      {path}\n    </span>\n  );\n\n  return tooltip !== \"\" ? (\n    <Tooltip content={tooltip} isVisible>\n      {text}\n    </Tooltip>\n  ) : (\n    text\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype GroupsModalProps = {\n  id?: string;\n  rename?: GroupRepresentation;\n  handleModalToggle: () => void;\n  refresh: (group?: GroupRepresentation) => void;\n};\n\nexport const GroupsModal = ({\n  id,\n  rename,\n  handleModalToggle,\n  refresh,\n}: GroupsModalProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    defaultValues: { name: rename?.name },\n  });\n\n  const submitForm = async (group: GroupRepresentation) => {\n    group.name = group.name?.trim();\n\n    try {\n      if (!id) {\n        await adminClient.groups.create(group);\n      } else if (rename) {\n        await adminClient.groups.update(\n          { id },\n          { ...rename, name: group.name },\n        );\n      } else {\n        await (group.id\n          ? adminClient.groups.updateChildGroup({ id }, group)\n          : adminClient.groups.createChildGroup({ id }, group));\n      }\n\n      refresh(rename ? { ...rename, name: group.name } : undefined);\n      handleModalToggle();\n      addAlert(\n        t(rename ? \"groupUpdated\" : \"groupCreated\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"couldNotCreateGroup\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(rename ? \"renameAGroup\" : \"createAGroup\")}\n      isOpen={true}\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid={`${rename ? \"rename\" : \"create\"}Group`}\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"group-form\"\n        >\n          {t(rename ? \"rename\" : \"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"group-form\" isHorizontal onSubmit={handleSubmit(submitForm)}>\n        <FormGroup\n          name=\"create-modal-group\"\n          label={t(\"name\")}\n          fieldId=\"create-group-name\"\n          helperTextInvalid={t(\"required\")}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"groupNameInput\"\n            autoFocus\n            id=\"create-group-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"name\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { ButtonVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\n\ntype DeleteConfirmProps = {\n  selectedRows: GroupRepresentation[];\n  show: boolean;\n  toggleDialog: () => void;\n  refresh: () => void;\n};\n\nexport const DeleteGroup = ({\n  selectedRows,\n  show,\n  toggleDialog,\n  refresh,\n}: DeleteConfirmProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const multiDelete = async () => {\n    try {\n      for (const group of selectedRows) {\n        await adminClient.groups.del({\n          id: group.id!,\n        });\n      }\n      refresh();\n      addAlert(t(\"groupDeleted\", { count: selectedRows.length }));\n    } catch (error) {\n      addError(\"groupDeleteError\", error);\n    }\n  };\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"deleteConfirmTitle\", { count: selectedRows.length })}\n      messageKey={t(\"deleteConfirmGroup\", {\n        count: selectedRows.length,\n        groupName: selectedRows[0]?.name,\n      })}\n      continueButtonLabel=\"delete\"\n      continueButtonVariant={ButtonVariant.danger}\n      onConfirm={multiDelete}\n      open={show}\n      toggleDialog={toggleDialog}\n    />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { GroupPickerDialog } from \"../../components/group/GroupPickerDialog\";\n\ntype MoveDialogProps = {\n  source: GroupRepresentation;\n  onClose: () => void;\n  refresh: () => void;\n};\n\nconst moveToRoot = (source: GroupRepresentation) =>\n  source.id\n    ? adminClient.groups.updateRoot(source)\n    : adminClient.groups.create(source);\n\nconst moveToGroup = async (\n  source: GroupRepresentation,\n  dest: GroupRepresentation,\n) => adminClient.groups.updateChildGroup({ id: dest.id! }, source);\n\nexport const MoveDialog = ({ source, onClose, refresh }: MoveDialogProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const moveGroup = async (group?: GroupRepresentation[]) => {\n    try {\n      await (group ? moveToGroup(source, group[0]) : moveToRoot(source));\n      refresh();\n      addAlert(t(\"moveGroupSuccess\"));\n    } catch (error) {\n      addError(\"moveGroupError\", error);\n    }\n  };\n\n  return (\n    <GroupPickerDialog\n      type=\"selectOne\"\n      filterGroups={[source]}\n      text={{\n        title: \"moveToGroup\",\n        ok: \"moveHere\",\n      }}\n      onClose={onClose}\n      onConfirm={moveGroup}\n      isMove\n    />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  Checkbox,\n  Dropdown,\n  DropdownItem,\n  DropdownPosition,\n  DropdownSeparator,\n  InputGroup,\n  KebabToggle,\n  Tooltip,\n  TreeView,\n  TreeViewDataItem,\n} from \"@patternfly/react-core\";\nimport { AngleRightIcon } from \"@patternfly/react-icons\";\nimport { unionBy } from \"lodash-es\";\nimport { useRef, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { fetchAdminUI } from \"../../context/auth/admin-ui-endpoint\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { GroupsModal } from \"../GroupsModal\";\nimport { useSubGroups } from \"../SubGroupsContext\";\nimport { toGroups } from \"../routes/Groups\";\nimport { DeleteGroup } from \"./DeleteGroup\";\nimport { MoveDialog } from \"./MoveDialog\";\n\nimport \"./group-tree.css\";\n\ntype ExtendedTreeViewDataItem = TreeViewDataItem & {\n  access?: Record<string, boolean>;\n};\n\ntype GroupTreeContextMenuProps = {\n  group: GroupRepresentation;\n  refresh: () => void;\n};\n\nexport function countGroups(groups: GroupRepresentation[]) {\n  let count = groups.length;\n  for (const group of groups) {\n    if (group.subGroups) {\n      count += countGroups(group.subGroups);\n    }\n  }\n  return count;\n}\n\nconst GroupTreeContextMenu = ({\n  group,\n  refresh,\n}: GroupTreeContextMenuProps) => {\n  const { t } = useTranslation();\n\n  const [isOpen, toggleOpen] = useToggle();\n  const [renameOpen, toggleRenameOpen] = useToggle();\n  const [createOpen, toggleCreateOpen] = useToggle();\n  const [moveOpen, toggleMoveOpen] = useToggle();\n  const [deleteOpen, toggleDeleteOpen] = useToggle();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {renameOpen && (\n        <GroupsModal\n          id={group.id}\n          rename={group}\n          refresh={() => {\n            navigate(toGroups({ realm }));\n            refresh();\n          }}\n          handleModalToggle={toggleRenameOpen}\n        />\n      )}\n      {createOpen && (\n        <GroupsModal\n          id={group.id}\n          handleModalToggle={toggleCreateOpen}\n          refresh={refresh}\n        />\n      )}\n      {moveOpen && (\n        <MoveDialog source={group} refresh={refresh} onClose={toggleMoveOpen} />\n      )}\n      <DeleteGroup\n        show={deleteOpen}\n        toggleDialog={toggleDeleteOpen}\n        selectedRows={[group]}\n        refresh={() => {\n          navigate(toGroups({ realm }));\n          refresh();\n        }}\n      />\n      <Dropdown\n        toggle={<KebabToggle onToggle={toggleOpen} />}\n        isOpen={isOpen}\n        isPlain\n        position={DropdownPosition.right}\n        dropdownItems={[\n          <DropdownItem key=\"rename\" onClick={toggleRenameOpen}>\n            {t(\"rename\")}\n          </DropdownItem>,\n          <DropdownItem key=\"move\" onClick={toggleMoveOpen}>\n            {t(\"moveTo\")}\n          </DropdownItem>,\n          <DropdownItem key=\"create\" onClick={toggleCreateOpen}>\n            {t(\"createChildGroup\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem key=\"delete\" onClick={toggleDeleteOpen}>\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n      />\n    </>\n  );\n};\n\ntype GroupTreeProps = {\n  refresh: () => void;\n  canViewDetails: boolean;\n};\n\nconst SUBGROUP_COUNT = 50;\n\nexport const GroupTree = ({\n  refresh: viewRefresh,\n  canViewDetails,\n}: GroupTreeProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const { addAlert } = useAlerts();\n  const { hasAccess } = useAccess();\n\n  const [data, setData] = useState<ExtendedTreeViewDataItem[]>();\n  const { subGroups, clear } = useSubGroups();\n\n  const [search, setSearch] = useState(\"\");\n  const [max, setMax] = useState(20);\n  const [first, setFirst] = useState(0);\n  const prefFirst = useRef(0);\n  const prefMax = useRef(20);\n  const [count, setCount] = useState(0);\n  const [exact, setExact] = useState(false);\n  const [activeItem, setActiveItem] = useState<ExtendedTreeViewDataItem>();\n\n  const [firstSub, setFirstSub] = useState(0);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n    viewRefresh();\n  };\n\n  const mapGroup = (\n    group: GroupRepresentation,\n    refresh: () => void,\n  ): ExtendedTreeViewDataItem => {\n    return {\n      id: group.id,\n      name: (\n        <Tooltip content={group.name}>\n          <span>{group.name}</span>\n        </Tooltip>\n      ),\n      access: group.access || {},\n      children:\n        group.subGroups && group.subGroups.length > 0\n          ? group.subGroups.map((g) => mapGroup(g, refresh))\n          : undefined,\n      action: (hasAccess(\"manage-users\") || group.access?.manage) && (\n        <GroupTreeContextMenu group={group} refresh={refresh} />\n      ),\n      defaultExpanded: subGroups.map((g) => g.id).includes(group.id),\n    };\n  };\n\n  useFetch(\n    async () => {\n      const groups = await fetchAdminUI<GroupRepresentation[]>(\n        \"groups\",\n        Object.assign(\n          {\n            first: `${first}`,\n            max: `${max + 1}`,\n            exact: `${exact}`,\n            global: `${search !== \"\"}`,\n          },\n          search === \"\" ? null : { search },\n        ),\n      );\n      let subGroups: GroupRepresentation[] = [];\n      if (activeItem) {\n        subGroups = await fetchAdminUI<GroupRepresentation[]>(\n          `groups/${activeItem.id}/children`,\n          {\n            first: `${firstSub}`,\n            max: `${SUBGROUP_COUNT}`,\n          },\n        );\n      }\n      return { groups, subGroups };\n    },\n    ({ groups, subGroups }) => {\n      if (activeItem) {\n        const found = findGroup(data || [], activeItem.id!, []);\n        if (found.length && subGroups.length) {\n          const foundTreeItem = found.pop()!;\n          foundTreeItem.children = [\n            ...(unionBy(foundTreeItem.children || []).splice(0, SUBGROUP_COUNT),\n            subGroups.map((g) => mapGroup(g, refresh), \"id\")),\n            ...(subGroups.length === SUBGROUP_COUNT\n              ? [\n                  {\n                    id: \"next\",\n                    name: (\n                      <Button\n                        variant=\"plain\"\n                        onClick={() => setFirstSub(firstSub + SUBGROUP_COUNT)}\n                      >\n                        <AngleRightIcon />\n                      </Button>\n                    ),\n                  },\n                ]\n              : []),\n          ];\n        }\n      }\n      if (search || prefFirst.current !== first || prefMax.current !== max) {\n        setData(groups.map((g) => mapGroup(g, refresh)));\n      } else {\n        setData(\n          unionBy(\n            data,\n            groups.map((g) => mapGroup(g, refresh)),\n            \"id\",\n          ),\n        );\n      }\n      setCount(countGroups(groups));\n      prefFirst.current = first;\n      prefMax.current = max;\n    },\n    [key, first, firstSub, max, search, exact, activeItem],\n  );\n\n  const findGroup = (\n    groups: ExtendedTreeViewDataItem[],\n    id: string,\n    path: ExtendedTreeViewDataItem[],\n  ) => {\n    for (let index = 0; index < groups.length; index++) {\n      const group = groups[index];\n      if (group.id === id) {\n        path.push(group);\n        return path;\n      }\n\n      if (group.children) {\n        path.push(group);\n        findGroup(group.children, id, path);\n        if (path[path.length - 1].id !== id) {\n          path.pop();\n        }\n      }\n    }\n    return path;\n  };\n\n  return data ? (\n    <PaginatingTableToolbar\n      count={count}\n      first={first}\n      max={max}\n      onNextClick={setFirst}\n      onPreviousClick={setFirst}\n      onPerPageSelect={(first, max) => {\n        setFirst(first);\n        setMax(max);\n      }}\n      inputGroupName=\"searchForGroups\"\n      inputGroupPlaceholder={t(\"searchForGroups\")}\n      inputGroupOnEnter={setSearch}\n      toolbarItem={\n        <InputGroup className=\"pf-u-pt-sm\">\n          <Checkbox\n            id=\"exact\"\n            data-testid=\"exact-search\"\n            name=\"exact\"\n            isChecked={exact}\n            onChange={(value) => setExact(value)}\n          />\n          <label htmlFor=\"exact\" className=\"pf-u-pl-sm\">\n            {t(\"exactSearch\")}\n          </label>\n        </InputGroup>\n      }\n    >\n      {data.length > 0 && (\n        <TreeView\n          data={data.slice(0, max)}\n          allExpanded={search.length > 0}\n          activeItems={activeItem ? [activeItem] : undefined}\n          hasGuides\n          hasSelectableNodes\n          className=\"keycloak_groups_treeview\"\n          onSelect={(_, item) => {\n            if (item.id === \"next\") return;\n            setActiveItem(item);\n\n            const path = findGroup(data, item.id!, []);\n            if (!subGroups.every(({ id }) => path.find((t) => t.id === id)))\n              clear();\n            if (\n              canViewDetails ||\n              path.at(-1)?.access?.view ||\n              subGroups.at(-1)?.access?.view\n            ) {\n              navigate(\n                toGroups({\n                  realm,\n                  id: path.map((g) => g.id).join(\"/\"),\n                }),\n              );\n            } else {\n              addAlert(t(\"noViewRights\"), AlertVariant.warning);\n              navigate(toGroups({ realm }));\n            }\n          }}\n        />\n      )}\n    </PaginatingTableToolbar>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  GroupQuery,\n  SubGroupQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  DataList,\n  DataListAction,\n  DataListCell,\n  DataListCheck,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { AngleRightIcon } from \"@patternfly/react-icons\";\nimport { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { adminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../table-toolbar/PaginatingTableToolbar\";\nimport { GroupPath } from \"./GroupPath\";\n\nimport \"./group-picker-dialog.css\";\nimport { countGroups } from \"../../groups/components/GroupTree\";\n\nexport type GroupPickerDialogProps = {\n  id?: string;\n  type: \"selectOne\" | \"selectMany\";\n  filterGroups?: GroupRepresentation[];\n  text: { title: string; ok: string };\n  canBrowse?: boolean;\n  isMove?: boolean;\n  onConfirm: (groups: GroupRepresentation[] | undefined) => void;\n  onClose: () => void;\n};\n\ntype SelectableGroup = GroupRepresentation & {\n  checked?: boolean;\n};\n\nexport const GroupPickerDialog = ({\n  id,\n  type,\n  filterGroups,\n  text,\n  canBrowse = true,\n  isMove = false,\n  onClose,\n  onConfirm,\n}: GroupPickerDialogProps) => {\n  const { t } = useTranslation();\n  const [selectedRows, setSelectedRows] = useState<SelectableGroup[]>([]);\n\n  const [navigation, setNavigation] = useState<SelectableGroup[]>([]);\n  const [groups, setGroups] = useState<SelectableGroup[]>([]);\n  const [filter, setFilter] = useState(\"\");\n  const [joinedGroups, setJoinedGroups] = useState<GroupRepresentation[]>([]);\n  const [groupId, setGroupId] = useState<string>();\n  const [isSearching, setIsSearching] = useState(false);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  const [count, setCount] = useState(0);\n\n  const currentGroup = () => navigation[navigation.length - 1];\n\n  useFetch(\n    async () => {\n      let group;\n      let groups;\n      let existingUserGroups;\n\n      if (!groupId) {\n        const args: GroupQuery = {\n          first: first,\n          max: max + 1,\n        };\n        if (isSearching) {\n          args.search = filter;\n        }\n        groups = await adminClient.groups.find(args);\n      } else {\n        if (!navigation.map(({ id }) => id).includes(groupId)) {\n          group = await adminClient.groups.findOne({ id: groupId });\n          if (!group) {\n            throw new Error(t(\"notFound\"));\n          }\n        }\n        if (group?.id) {\n          const args: SubGroupQuery = {\n            first: first,\n            max: max + 1,\n            parentId: group.id,\n          };\n          groups = await adminClient.groups.listSubGroups(args);\n        }\n      }\n\n      if (id) {\n        existingUserGroups = await adminClient.users.listGroups({\n          id,\n        });\n      }\n\n      return { group, groups, existingUserGroups };\n    },\n    async ({ group: selectedGroup, groups, existingUserGroups }) => {\n      setJoinedGroups(existingUserGroups || []);\n      if (selectedGroup) {\n        setNavigation([...navigation, selectedGroup]);\n      }\n\n      if (groups) {\n        groups.forEach((group: SelectableGroup) => {\n          group.checked = !!selectedRows.find((r) => r.id === group.id);\n        });\n        setGroups(groups);\n      }\n      setCount(isSearching ? countGroups(groups || []) : groups?.length || 0);\n    },\n    [groupId, filter, first, max],\n  );\n\n  const isRowDisabled = (row?: GroupRepresentation) => {\n    return [\n      ...joinedGroups.map((item) => item.id),\n      ...(filterGroups || []).map((group) => group.id),\n    ].some((group) => group === row?.id);\n  };\n\n  return (\n    <Modal\n      variant={isSearching ? ModalVariant.medium : ModalVariant.small}\n      title={t(text.title, {\n        group1: filterGroups?.[0]?.name,\n        group2: navigation.length ? currentGroup().name : t(\"root\"),\n      })}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid={`${text.ok}-button`}\n          key=\"confirm\"\n          variant=\"primary\"\n          form=\"group-form\"\n          onClick={() => {\n            onConfirm(\n              type === \"selectMany\"\n                ? selectedRows\n                : navigation.length\n                  ? [currentGroup()]\n                  : undefined,\n            );\n          }}\n          isDisabled={type === \"selectMany\" && selectedRows.length === 0}\n        >\n          {t(text.ok)}\n        </Button>,\n      ]}\n    >\n      <PaginatingTableToolbar\n        count={count - (groupId || isSearching ? first : 0)}\n        first={first}\n        max={max}\n        onNextClick={setFirst}\n        onPreviousClick={setFirst}\n        onPerPageSelect={(first, max) => {\n          setFirst(first);\n          setMax(max);\n        }}\n        inputGroupName={\"search\"}\n        inputGroupOnEnter={(search) => {\n          setFilter(search);\n          setIsSearching(search !== \"\");\n          setFirst(0);\n          setMax(10);\n          setNavigation([]);\n          setGroupId(undefined);\n        }}\n        inputGroupPlaceholder={t(\"searchForGroups\")}\n      >\n        <Breadcrumb>\n          {navigation.length > 0 && (\n            <BreadcrumbItem key=\"home\">\n              <Button\n                variant=\"link\"\n                onClick={() => {\n                  setGroupId(undefined);\n                  setNavigation([]);\n                  setFirst(0);\n                  setMax(10);\n                }}\n              >\n                {t(\"groups\")}\n              </Button>\n            </BreadcrumbItem>\n          )}\n          {navigation.map((group, i) => (\n            <BreadcrumbItem key={i}>\n              {navigation.length - 1 !== i && (\n                <Button\n                  variant=\"link\"\n                  onClick={() => {\n                    setGroupId(group.id);\n                    setNavigation([...navigation].slice(0, i));\n                    setFirst(0);\n                    setMax(10);\n                  }}\n                >\n                  {group.name}\n                </Button>\n              )}\n              {navigation.length - 1 === i && group.name}\n            </BreadcrumbItem>\n          ))}\n        </Breadcrumb>\n        <DataList aria-label={t(\"groups\")} isCompact>\n          {groups\n            .slice(groupId ? first : 0, max + (groupId ? first : 0))\n            .map((group: SelectableGroup) => (\n              <Fragment key={group.id}>\n                {(!isSearching || group.name?.includes(filter)) && (\n                  <GroupRow\n                    key={group.id}\n                    group={group}\n                    isRowDisabled={isRowDisabled}\n                    onSelect={setGroupId}\n                    type={type}\n                    isSearching={isSearching}\n                    setIsSearching={setIsSearching}\n                    selectedRows={selectedRows}\n                    setSelectedRows={setSelectedRows}\n                    canBrowse={canBrowse}\n                  />\n                )}\n                {isSearching &&\n                  group.subGroups?.map((g) => (\n                    <GroupRow\n                      key={g.id}\n                      group={g}\n                      isRowDisabled={isRowDisabled}\n                      onSelect={setGroupId}\n                      type={type}\n                      isSearching={isSearching}\n                      setIsSearching={setIsSearching}\n                      selectedRows={selectedRows}\n                      setSelectedRows={setSelectedRows}\n                      canBrowse={canBrowse}\n                    />\n                  ))}\n              </Fragment>\n            ))}\n        </DataList>\n        {groups.length === 0 && !isSearching && (\n          <ListEmptyState\n            hasIcon={false}\n            message={t(\"moveGroupEmpty\")}\n            instructions={isMove ? t(\"moveGroupEmptyInstructions\") : undefined}\n          />\n        )}\n        {groups.length === 0 && isSearching && (\n          <ListEmptyState\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noSearchResultsInstructions\")}\n          />\n        )}\n      </PaginatingTableToolbar>\n    </Modal>\n  );\n};\n\ntype GroupRowProps = {\n  group: SelectableGroup;\n  type: \"selectOne\" | \"selectMany\";\n  isRowDisabled: (row?: GroupRepresentation) => boolean;\n  isSearching: boolean;\n  setIsSearching: (value: boolean) => void;\n  onSelect: (groupId: string) => void;\n  selectedRows: SelectableGroup[];\n  setSelectedRows: (groups: SelectableGroup[]) => void;\n  canBrowse: boolean;\n};\n\nconst GroupRow = ({\n  group,\n  type,\n  isRowDisabled,\n  isSearching,\n  setIsSearching,\n  onSelect,\n  selectedRows,\n  setSelectedRows,\n  canBrowse,\n}: GroupRowProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <DataListItem\n      aria-labelledby={group.name}\n      key={group.id}\n      id={group.id}\n      onClick={(e) => {\n        if (type === \"selectOne\") {\n          onSelect(group.id!);\n        } else if ((e.target as HTMLInputElement).type !== \"checkbox\") {\n          onSelect(group.id!);\n          setIsSearching(false);\n        }\n      }}\n    >\n      <DataListItemRow\n        className={`join-group-dialog-row${\n          isRowDisabled(group) ? \"-m-disabled\" : \"\"\n        }`}\n        data-testid={group.name}\n      >\n        {type === \"selectMany\" && (\n          <DataListCheck\n            className=\"kc-join-group-modal-check\"\n            data-testid={`${group.name}-check`}\n            aria-label={group.name}\n            checked={group.checked}\n            isDisabled={isRowDisabled(group)}\n            onChange={(checked) => {\n              group.checked = checked;\n              let newSelectedRows: SelectableGroup[] = [];\n              if (!group.checked) {\n                newSelectedRows = selectedRows.filter((r) => r.id !== group.id);\n              } else {\n                newSelectedRows = [...selectedRows, group];\n              }\n\n              setSelectedRows(newSelectedRows);\n            }}\n            aria-labelledby={`select-${group.name}`}\n          />\n        )}\n\n        <DataListItemCells\n          dataListCells={[\n            <DataListCell\n              key={`name-${group.id}`}\n              className=\"keycloak-groups-group-path\"\n            >\n              {isSearching ? (\n                <GroupPath id={`select-${group.name}`} group={group} />\n              ) : (\n                <span id={`select-${group.name}`}>{group.name}</span>\n              )}\n            </DataListCell>,\n          ]}\n        />\n        <DataListAction\n          id=\"actions\"\n          aria-labelledby={`select-${group.name}`}\n          aria-label={t(\"groupName\")}\n          isPlainButtonAction\n        >\n          {(canBrowse || type === \"selectOne\") && (\n            <Button variant=\"link\" aria-label={t(\"select\")}>\n              <AngleRightIcon />\n            </Button>\n          )}\n        </DataListAction>\n      </DataListItemRow>\n    </DataListItem>\n  );\n};\n"],"names":["DataListAction","_a","children","className","visibility","id","ariaLabel","ariaLabelledBy","isPlainButtonAction","props","__rest","React","css","styles","formatBreakpointMods","DataListCheck","onChange","checked","event","isValid","isDisabled","isChecked","defaultChecked","otherControls","check","TreeViewList","isNested","toolbar","Divider","TreeViewListItemBase","name","title","isExpanded","defaultExpanded","onSelect","onCheck","hasCheck","checkProps","hasBadge","customBadgeContent","badgeProps","isSelectable","isCompact","activeItems","itemData","parentItem","icon","expandedIcon","action","compareItems","useMemo","internalIsExpanded","setIsExpanded","useState","useEffect","Component","ToggleComponent","renderToggle","randomId","evt","AngleRightIcon","renderCheck","elem","iconRendered","renderNodeContent","content","badgeRendered","Badge","GenerateId","item","TreeViewListItem","prevProps","nextProps","prevIncludes","nextIncludes","TreeViewRoot","_b","_c","_d","_e","_f","_g","activeElement","key","treeItems","el","KeyTypes","handleArrows","element","isExpandable","parentList","parentButton","childElement","treeNodes","canUseDOM","firstToggle","firstInput","firstTextButton","hasChecks","hasGuides","variant","hasSelectableNodes","TreeView","data","hasBadges","defaultAllExpanded","allExpanded","itemToCheck","treeViewList","unionBy","baseRest","arrays","iteratee","last","isArrayLikeObject","baseUniq","baseFlatten","baseIteratee","GroupPath","path","onMouseEnterProp","tooltip","setTooltip","text","jsx","Tooltip","GroupsModal","rename","handleModalToggle","refresh","t","useTranslation","addAlert","addError","useAlerts","register","handleSubmit","errors","useForm","submitForm","group","adminClient","AlertVariant","error","Modal","ModalVariant","Button","ButtonVariant","Form","FormGroup","ValidatedOptions","KeycloakTextInput","DeleteGroup","selectedRows","show","toggleDialog","multiDelete","ConfirmDialogModal","moveToRoot","source","moveToGroup","dest","MoveDialog","onClose","GroupPickerDialog","countGroups","groups","count","GroupTreeContextMenu","isOpen","toggleOpen","useToggle","renameOpen","toggleRenameOpen","createOpen","toggleCreateOpen","moveOpen","toggleMoveOpen","deleteOpen","toggleDeleteOpen","navigate","useNavigate","realm","useRealm","jsxs","Fragment","toGroups","Dropdown","KebabToggle","DropdownPosition","DropdownItem","DropdownSeparator","SUBGROUP_COUNT","GroupTree","viewRefresh","canViewDetails","hasAccess","useAccess","setData","subGroups","clear","useSubGroups","search","setSearch","max","setMax","first","setFirst","prefFirst","useRef","prefMax","setCount","exact","setExact","activeItem","setActiveItem","firstSub","setFirstSub","setKey","mapGroup","g","useFetch","fetchAdminUI","found","findGroup","foundTreeItem","index","PaginatingTableToolbar","InputGroup","Checkbox","value","_","KeycloakSpinner","type","filterGroups","canBrowse","isMove","onConfirm","setSelectedRows","navigation","setNavigation","setGroups","filter","setFilter","joinedGroups","setJoinedGroups","groupId","setGroupId","isSearching","setIsSearching","currentGroup","existingUserGroups","args","selectedGroup","r","isRowDisabled","row","Breadcrumb","BreadcrumbItem","i","DataList","GroupRow","ListEmptyState","DataListItem","e","DataListItemRow","newSelectedRows","DataListItemCells","DataListCell"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}