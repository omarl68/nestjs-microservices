{"version":3,"file":"RealmRoleTabs--vYqA43N.js","sources":["../../src/realm-roles/UsersInRoleTab.tsx","../../src/realm-roles/RealmRoleTabs.tsx"],"sourcesContent":["import { Button, PageSection, Popover } from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport type { ClientRoleParams } from \"../clients/routes/ClientRole\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { emptyFormatter, upperCaseFormatter } from \"../util\";\nimport { useParams } from \"../utils/useParams\";\n\nexport const UsersInRoleTab = () => {\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const { t } = useTranslation();\n  const { id, clientId } = useParams<ClientRoleParams>();\n\n  const loader = async (first?: number, max?: number) => {\n    const role = await adminClient.roles.findOneById({ id: id });\n    if (!role) {\n      throw new Error(t(\"notFound\"));\n    }\n\n    if (role.clientRole) {\n      return adminClient.clients.findUsersWithRole({\n        roleName: role.name!,\n        id: clientId,\n        first,\n        max,\n      });\n    }\n\n    return adminClient.roles.findUsersWithRole({\n      name: role.name!,\n      first,\n      max,\n    });\n  };\n\n  const { enabled } = useHelp();\n\n  return (\n    <PageSection data-testid=\"users-page\" variant=\"light\">\n      <KeycloakDataTable\n        isPaginated\n        loader={loader}\n        ariaLabelKey=\"roleList\"\n        searchPlaceholderKey=\"\"\n        data-testid=\"users-in-role-table\"\n        toolbarItem={\n          enabled && (\n            <Popover\n              aria-label=\"Basic popover\"\n              position=\"bottom\"\n              bodyContent={\n                <div>\n                  {t(\"whoWillAppearPopoverTextRoles\")}\n                  <Button\n                    className=\"kc-groups-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/groups`)}\n                  >\n                    {t(\"groups\")}\n                  </Button>\n                  {t(\"or\")}\n                  <Button\n                    className=\"kc-users-link\"\n                    variant=\"link\"\n                    onClick={() => navigate(`/${realm}/users`)}\n                  >\n                    {t(\"users\")}.\n                  </Button>\n                </div>\n              }\n              footerContent={t(\"whoWillAppearPopoverFooterText\")}\n            >\n              <Button\n                variant=\"link\"\n                className=\"kc-who-will-appear-button\"\n                key=\"who-will-appear-button\"\n                icon={<QuestionCircleIcon />}\n              >\n                {t(\"whoWillAppearLinkTextRoles\")}\n              </Button>\n            </Popover>\n          )\n        }\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(\"noDirectUsers\")}\n            instructions={\n              <div>\n                {t(\"noUsersEmptyStateDescription\")}\n                <Button\n                  className=\"kc-groups-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/groups`)}\n                >\n                  {t(\"groups\")}\n                </Button>\n                {t(\"or\")}\n                <Button\n                  className=\"kc-users-link-empty-state\"\n                  variant=\"link\"\n                  onClick={() => navigate(`/${realm}/users`)}\n                >\n                  {t(\"users\")}\n                </Button>\n                {t(\"noUsersEmptyStateDescriptionContinued\")}\n              </div>\n            }\n          />\n        }\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"userName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"email\",\n            displayKey: \"email\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"firstName\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n        ]}\n      />\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n  Tab,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { SubmitHandler, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useLocation, useMatch, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { toClient } from \"../clients/routes/Client\";\nimport {\n  ClientRoleParams,\n  ClientRoleRoute,\n  ClientRoleTab,\n  toClientRole,\n} from \"../clients/routes/ClientRole\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport {\n  AttributeForm,\n  AttributesForm,\n} from \"../components/key-value-form/AttributeForm\";\nimport {\n  KeyValueType,\n  arrayToKeyValue,\n  keyValueToArray,\n} from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RoleForm } from \"../components/role-form/RoleForm\";\nimport { AddRoleMappingModal } from \"../components/role-mapping/AddRoleMappingModal\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport { UsersInRoleTab } from \"./UsersInRoleTab\";\nimport { RealmRoleRoute, RealmRoleTab, toRealmRole } from \"./routes/RealmRole\";\nimport { toRealmRoles } from \"./routes/RealmRoles\";\n\nexport default function RealmRoleTabs() {\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const { t } = useTranslation();\n  const form = useForm<AttributeForm>({\n    mode: \"onChange\",\n  });\n  const { control, reset, setValue } = form;\n  const navigate = useNavigate();\n\n  const { id, clientId } = useParams<ClientRoleParams>();\n  const { pathname } = useLocation();\n\n  const { realm: realmName } = useRealm();\n\n  const [key, setKey] = useState(0);\n  const [attributes, setAttributes] = useState<KeyValueType[] | undefined>();\n\n  const refresh = () => setKey(key + 1);\n\n  const { addAlert, addError } = useAlerts();\n\n  const [open, setOpen] = useState(false);\n  const convert = (role: RoleRepresentation) => {\n    const { attributes, ...rest } = role;\n    return {\n      attributes: arrayToKeyValue(attributes),\n      ...rest,\n    };\n  };\n\n  const roleName = useWatch({\n    control,\n    defaultValue: undefined,\n    name: \"name\",\n  });\n\n  const composites = useWatch({\n    control,\n    defaultValue: false,\n    name: \"composite\",\n  });\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const [realm, role] = await Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        adminClient.roles.findOneById({ id }),\n      ]);\n\n      return { realm, role };\n    },\n    ({ realm, role }) => {\n      if (!realm || !role) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      const convertedRole = convert(role);\n\n      reset(convertedRole);\n      setAttributes(convertedRole.attributes);\n      setRealm(realm);\n    },\n    [key],\n  );\n\n  const onSubmit: SubmitHandler<AttributeForm> = async (formValues) => {\n    try {\n      const { attributes, ...rest } = formValues;\n      const roleRepresentation: RoleRepresentation = rest;\n\n      roleRepresentation.name = roleRepresentation.name?.trim();\n      roleRepresentation.attributes = keyValueToArray(attributes);\n\n      if (!clientId) {\n        await adminClient.roles.updateById({ id }, roleRepresentation);\n      } else {\n        await adminClient.clients.updateRole(\n          { id: clientId, roleName: formValues.name! },\n          roleRepresentation,\n        );\n      }\n\n      setAttributes(attributes);\n      addAlert(t(\"roleSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleSaveError\", error);\n    }\n  };\n\n  const realmRoleMatch = useMatch(RealmRoleRoute.path);\n  const clientRoleMatch = useMatch(ClientRoleRoute.path);\n\n  const toOverview = () => {\n    if (realmRoleMatch) {\n      return toRealmRoles({ realm: realmName });\n    }\n\n    if (clientRoleMatch) {\n      return toClient({\n        realm: realmName,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: \"roles\",\n      });\n    }\n\n    throw new Error(\"Roles overview route could not be determined.\");\n  };\n\n  const toTab = (tab: RealmRoleTab | ClientRoleTab) => {\n    if (realmRoleMatch) {\n      return toRealmRole({\n        realm: realmName,\n        id,\n        tab,\n      });\n    }\n\n    if (clientRoleMatch) {\n      return toClientRole({\n        realm: realmName,\n        id,\n        clientId: clientRoleMatch.params.clientId!,\n        tab: tab as ClientRoleTab,\n      });\n    }\n\n    throw new Error(\"Route could not be determined.\");\n  };\n\n  const useTab = (tab: RealmRoleTab | ClientRoleTab) =>\n    useRoutableTab(toTab(tab));\n\n  const detailsTab = useTab(\"details\");\n  const associatedRolesTab = useTab(\"associated-roles\");\n  const attributesTab = useTab(\"attributes\");\n  const usersInRoleTab = useTab(\"users-in-role\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"roleDeleteConfirm\",\n    messageKey: t(\"roleDeleteConfirmDialog\", {\n      selectedRoleName: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (!clientId) {\n          await adminClient.roles.delById({ id });\n        } else {\n          await adminClient.clients.delRole({\n            id: clientId,\n            roleName: roleName!,\n          });\n        }\n        addAlert(t(\"roleDeletedSuccess\"), AlertVariant.success);\n        navigate(toOverview());\n      } catch (error) {\n        addError(\"roleDeleteError\", error);\n      }\n    },\n  });\n\n  const dropdownItems = pathname.includes(\"associated-roles\")\n    ? [\n        <DropdownItem\n          key=\"delete-all-associated\"\n          component=\"button\"\n          onClick={() => toggleDeleteAllAssociatedRolesDialog()}\n        >\n          {t(\"removeAllAssociatedRoles\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => {\n            toggleDeleteDialog();\n          }}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ]\n    : [\n        <DropdownItem\n          key=\"toggle-modal\"\n          data-testid=\"add-roles\"\n          component=\"button\"\n          onClick={() => toggleModal()}\n        >\n          {t(\"addAssociatedRolesText\")}\n        </DropdownItem>,\n        <DropdownItem\n          key=\"delete-role\"\n          component=\"button\"\n          onClick={() => toggleDeleteDialog()}\n        >\n          {t(\"deleteRole\")}\n        </DropdownItem>,\n      ];\n\n  const [\n    toggleDeleteAllAssociatedRolesDialog,\n    DeleteAllAssociatedRolesConfirm,\n  ] = useConfirmDialog({\n    titleKey: t(\"removeAllAssociatedRoles\") + \"?\",\n    messageKey: t(\"removeAllAssociatedRolesConfirmDialog\", {\n      name: roleName || t(\"createRole\"),\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        const additionalRoles = await adminClient.roles.getCompositeRoles({\n          id,\n        });\n        await adminClient.roles.delCompositeRoles({ id }, additionalRoles);\n        addAlert(\n          t(\"compositeRoleOff\"),\n          AlertVariant.success,\n          t(\"compositesRemovedAlertDescription\"),\n        );\n        navigate(toTab(\"details\"));\n        refresh();\n      } catch (error) {\n        addError(\"roleDeleteError\", error);\n      }\n    },\n  });\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: id, realm: realm!.realm },\n        composites,\n      );\n      refresh();\n      navigate(toTab(\"associated-roles\"));\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addAssociatedRolesError\", error);\n    }\n  };\n\n  const isDefaultRole = (name: string | undefined) =>\n    realm?.defaultRole && realm.defaultRole!.name === name;\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <DeleteAllAssociatedRolesConfirm />\n      {open && (\n        <AddRoleMappingModal\n          id={id}\n          type=\"roles\"\n          name={roleName}\n          onAssign={(rows) => addComposites(rows.map((r) => r.role))}\n          onClose={() => setOpen(false)}\n        />\n      )}\n      <ViewHeader\n        titleKey={roleName!}\n        badges={[\n          {\n            id: \"composite-role-badge\",\n            text: composites ? t(\"composite\") : \"\",\n            readonly: true,\n          },\n        ]}\n        actionsDropdownId=\"roles-actions-dropdown\"\n        dropdownItems={dropdownItems}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs isBox mountOnEnter defaultLocation={toTab(\"details\")}>\n          <Tab\n            title={<TabTitleText>{t(\"details\")}</TabTitleText>}\n            {...detailsTab}\n          >\n            <RoleForm\n              form={form}\n              onSubmit={onSubmit}\n              role={clientRoleMatch ? \"manage-clients\" : \"manage-realm\"}\n              cancelLink={\n                clientRoleMatch\n                  ? toClient({ realm: realmName, clientId, tab: \"roles\" })\n                  : toRealmRoles({ realm: realmName })\n              }\n              editMode\n            />\n          </Tab>\n          {composites && (\n            <Tab\n              data-testid=\"associatedRolesTab\"\n              title={<TabTitleText>{t(\"associatedRolesText\")}</TabTitleText>}\n              {...associatedRolesTab}\n            >\n              <RoleMapping\n                name={roleName!}\n                id={id}\n                type=\"roles\"\n                isManager\n                save={(rows) => addComposites(rows.map((r) => r.role))}\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              data-testid=\"attributesTab\"\n              className=\"kc-attributes-tab\"\n              title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n              {...attributesTab}\n            >\n              <AttributesForm\n                form={form}\n                save={onSubmit}\n                reset={() =>\n                  setValue(\"attributes\", attributes, { shouldDirty: false })\n                }\n              />\n            </Tab>\n          )}\n          {!isDefaultRole(roleName) && (\n            <Tab\n              title={<TabTitleText>{t(\"usersInRole\")}</TabTitleText>}\n              {...usersInRoleTab}\n            >\n              <UsersInRoleTab data-cy=\"users-in-role-tab\" />\n            </Tab>\n          )}\n          {isFeatureEnabled(Feature.AdminFineGrainedAuthz) && (\n            <Tab\n              title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab id={id} type=\"roles\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["UsersInRoleTab","navigate","useNavigate","realm","useRealm","t","useTranslation","id","clientId","useParams","loader","first","max","role","adminClient","enabled","useHelp","jsx","PageSection","KeycloakDataTable","Popover","Button","jsxs","QuestionCircleIcon","ListEmptyState","emptyFormatter","upperCaseFormatter","RealmRoleTabs","isFeatureEnabled","useIsFeatureEnabled","form","useForm","control","reset","setValue","pathname","useLocation","realmName","key","setKey","useState","attributes","setAttributes","refresh","addAlert","addError","useAlerts","open","setOpen","convert","rest","arrayToKeyValue","roleName","useWatch","composites","setRealm","useFetch","convertedRole","onSubmit","formValues","roleRepresentation","keyValueToArray","AlertVariant","error","realmRoleMatch","useMatch","RealmRoleRoute","clientRoleMatch","ClientRoleRoute","toOverview","toRealmRoles","toClient","toTab","tab","toRealmRole","toClientRole","useTab","useRoutableTab","detailsTab","associatedRolesTab","attributesTab","usersInRoleTab","permissionsTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","dropdownItems","DropdownItem","toggleDeleteAllAssociatedRolesDialog","toggleModal","DeleteAllAssociatedRolesConfirm","additionalRoles","addComposites","isDefaultRole","name","Fragment","AddRoleMappingModal","rows","r","ViewHeader","RoutableTabs","Tab","TabTitleText","RoleForm","RoleMapping","AttributesForm","Feature","PermissionsTab","KeycloakSpinner"],"mappings":"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"}