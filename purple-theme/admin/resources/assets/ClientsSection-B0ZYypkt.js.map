{"version":3,"file":"ClientsSection-B0ZYypkt.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-table@4.113.6_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-table/dist/esm/components/Table/utils/decorators/wrappable.js","../../src/utils/client-url.ts","../../src/clients/initial-access/InitialAccessTokenList.tsx","../../src/clients/registration/AddProviderDialog.tsx","../../src/clients/registration/ClientRegistrationList.tsx","../../src/clients/registration/ClientRegistration.tsx","../../src/clients/ClientsSection.tsx"],"sourcesContent":["import styles from '@patternfly/react-styles/css/components/Table/table';\nexport const breakWord = () => ({\n    className: styles.modifiers.breakWord\n});\nexport const fitContent = () => ({\n    className: styles.modifiers.fitContent\n});\nexport const nowrap = () => ({\n    className: styles.modifiers.nowrap\n});\nexport const truncate = () => ({\n    className: styles.modifiers.truncate\n});\nexport const wrappable = () => ({\n    className: styles.modifiers.wrap\n});\n//# sourceMappingURL=wrappable.js.map","import ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { joinPath } from \"./joinPath\";\n\nexport const convertClientToUrl = (\n  { rootUrl, baseUrl }: ClientRepresentation,\n  adminClientBaseUrl: string,\n) => {\n  // absolute base url configured, use base url is\n  if (baseUrl?.startsWith(\"http\")) {\n    return baseUrl;\n  }\n\n  if (\n    (rootUrl === \"${authBaseUrl}\" || rootUrl === \"${authAdminUrl}\") &&\n    baseUrl\n  ) {\n    return rootUrl.replace(\n      /\\$\\{(authAdminUrl|authBaseUrl)\\}/,\n      joinPath(adminClientBaseUrl, baseUrl),\n    );\n  }\n\n  if (rootUrl?.startsWith(\"http\")) {\n    if (baseUrl) {\n      return joinPath(rootUrl, baseUrl);\n    }\n    return rootUrl;\n  }\n\n  return baseUrl;\n};\n","import type ClientInitialAccessPresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientInitialAccessPresentation\";\nimport { AlertVariant, Button, ButtonVariant } from \"@patternfly/react-core\";\nimport { wrappable } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { toCreateInitialAccessToken } from \"../routes/CreateInitialAccessToken\";\n\nexport const InitialAccessTokenList = () => {\n  const { t } = useTranslation();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n\n  const navigate = useNavigate();\n\n  const [token, setToken] = useState<ClientInitialAccessPresentation>();\n\n  const loader = async () => {\n    try {\n      return await adminClient.realms.getClientsInitialAccess({ realm });\n    } catch (error) {\n      return [];\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"tokenDeleteConfirmTitle\",\n    messageKey: t(\"tokenDeleteConfirm\", { id: token?.id }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.delClientsInitialAccess({\n          realm,\n          id: token!.id!,\n        });\n        addAlert(t(\"tokenDeleteSuccess\"), AlertVariant.success);\n        setToken(undefined);\n      } catch (error) {\n        addError(\"tokenDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={token?.id}\n        ariaLabelKey=\"initialAccessToken\"\n        searchPlaceholderKey=\"searchInitialAccessToken\"\n        loader={loader}\n        toolbarItem={\n          <Button\n            component={(props) => (\n              <Link {...props} to={toCreateInitialAccessToken({ realm })} />\n            )}\n          >\n            {t(\"create\")}\n          </Button>\n        }\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: (token) => {\n              setToken(token);\n              toggleDeleteDialog();\n            },\n          } as Action<ClientInitialAccessPresentation>,\n        ]}\n        columns={[\n          {\n            name: \"id\",\n            displayKey: \"id\",\n          },\n          {\n            name: \"timestamp\",\n            displayKey: \"timestamp\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.timestamp! * 1000), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"expiration\",\n            displayKey: \"expires\",\n            cellRenderer: (row) =>\n              formatDate(\n                new Date(row.timestamp! * 1000 + row.expiration! * 1000),\n                FORMAT_DATE_AND_TIME,\n              ),\n          },\n          {\n            name: \"count\",\n            displayKey: \"count\",\n          },\n          {\n            name: \"remainingCount\",\n            displayKey: \"remainingCount\",\n            transforms: [wrappable],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noTokens\")}\n            instructions={t(\"noTokensInstructions\")}\n            primaryActionText={t(\"create\")}\n            onPrimaryAction={() =>\n              navigate(toCreateInitialAccessToken({ realm }))\n            }\n          />\n        }\n      />\n    </>\n  );\n};\n","import {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype AddProviderDialogProps = {\n  onConfirm: (providerId: string) => void;\n  toggleDialog: () => void;\n};\n\nexport const AddProviderDialog = ({\n  onConfirm,\n  toggleDialog,\n}: AddProviderDialogProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const providers = Object.keys(\n    serverInfo.providers?.[\"client-registration-policy\"].providers || [],\n  );\n\n  const descriptions =\n    serverInfo.componentTypes?.[\n      \"org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy\"\n    ];\n  const localeSort = useLocaleSort();\n\n  const rows = useMemo(\n    () =>\n      localeSort(\n        descriptions?.filter((d) => providers.includes(d.id)) || [],\n        mapByKey(\"id\"),\n      ),\n    [providers, descriptions],\n  );\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"chooseAPolicyProvider\")}\n      isOpen\n      onClose={toggleDialog}\n    >\n      <DataList\n        onSelectDataListItem={(id) => {\n          onConfirm(id);\n          toggleDialog();\n        }}\n        aria-label={t(\"addPredefinedMappers\")}\n        isCompact\n      >\n        <DataListItem aria-label={t(\"headerName\")} id=\"header\">\n          <DataListItemRow>\n            <DataListItemCells\n              dataListCells={[t(\"name\"), t(\"description\")].map((name) => (\n                <DataListCell style={{ fontWeight: 700 }} key={name}>\n                  {name}\n                </DataListCell>\n              ))}\n            />\n          </DataListItemRow>\n        </DataListItem>\n        {rows.map((provider) => (\n          <DataListItem\n            aria-label={provider.id}\n            key={provider.id}\n            data-testid={provider.id}\n            id={provider.id}\n          >\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell width={2} key={`name-${provider.id}`}>\n                    {provider.id}\n                  </DataListCell>,\n                  <DataListCell width={4} key={`description-${provider.id}`}>\n                    {provider.helpText}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        ))}\n      </DataList>\n    </Modal>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Button, ButtonVariant, ToolbarItem } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toRegistrationProvider } from \"../routes/AddRegistrationProvider\";\nimport { ClientRegistrationParams } from \"../routes/ClientRegistration\";\nimport { AddProviderDialog } from \"./AddProviderDialog\";\n\ntype ClientRegistrationListProps = {\n  subType: \"anonymous\" | \"authenticated\";\n};\n\nconst DetailLink = (comp: ComponentRepresentation) => {\n  const { realm } = useRealm();\n  const { subTab } = useParams<ClientRegistrationParams>();\n\n  return (\n    <Link\n      key={comp.id}\n      to={toRegistrationProvider({\n        realm,\n        subTab: subTab || \"anonymous\",\n        providerId: comp.providerId!,\n        id: comp.id,\n      })}\n    >\n      {comp.name}\n    </Link>\n  );\n};\n\nexport const ClientRegistrationList = ({\n  subType,\n}: ClientRegistrationListProps) => {\n  const { t } = useTranslation();\n  const { subTab } = useParams<ClientRegistrationParams>();\n  const navigate = useNavigate();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const [policies, setPolicies] = useState<ComponentRepresentation[]>([]);\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ComponentRepresentation>();\n  const [isAddDialogOpen, toggleAddDialog] = useToggle();\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        type: \"org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy\",\n      }),\n    (policies) => setPolicies(policies.filter((p) => p.subType === subType)),\n    [selectedPolicy],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clientRegisterPolicyDeleteConfirmTitle\",\n    messageKey: t(\"clientRegisterPolicyDeleteConfirm\", {\n      name: selectedPolicy?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          realm,\n          id: selectedPolicy?.id!,\n        });\n        addAlert(t(\"clientRegisterPolicyDeleteSuccess\"));\n        setSelectedPolicy(undefined);\n      } catch (error) {\n        addError(\"clientRegisterPolicyDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {isAddDialogOpen && (\n        <AddProviderDialog\n          onConfirm={(providerId) =>\n            navigate(\n              toRegistrationProvider({\n                realm,\n                subTab: subTab || \"anonymous\",\n                providerId,\n              }),\n            )\n          }\n          toggleDialog={toggleAddDialog}\n        />\n      )}\n      <DeleteConfirm />\n      <KeycloakDataTable\n        ariaLabelKey=\"clientRegistration\"\n        searchPlaceholderKey={t(\"searchClientRegistration\")}\n        data-testid={`clientRegistration-${subType}`}\n        loader={policies}\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              data-testid={`createPolicy-${subType}`}\n              onClick={toggleAddDialog}\n            >\n              {t(\"createPolicy\")}\n            </Button>\n          </ToolbarItem>\n        }\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: (policy) => {\n              setSelectedPolicy(policy);\n              toggleDeleteDialog();\n            },\n          } as Action<ComponentRepresentation>,\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"name\",\n            cellRenderer: DetailLink,\n          },\n          {\n            name: \"providerId\",\n            displayKey: \"providerId\",\n          },\n        ]}\n      />\n    </>\n  );\n};\n","import { Tab, TabTitleText } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  ClientRegistrationTab,\n  toClientRegistration,\n} from \"../routes/ClientRegistration\";\nimport { ClientRegistrationList } from \"./ClientRegistrationList\";\n\nexport const ClientRegistration = () => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const useTab = (subTab: ClientRegistrationTab) =>\n    useRoutableTab(toClientRegistration({ realm, subTab }));\n\n  const anonymousTab = useTab(\"anonymous\");\n  const authenticatedTab = useTab(\"authenticated\");\n\n  return (\n    <RoutableTabs\n      defaultLocation={toClientRegistration({ realm, subTab: \"anonymous\" })}\n      mountOnEnter\n    >\n      <Tab\n        data-testid=\"anonymous\"\n        title={\n          <TabTitleText>\n            {t(\"anonymousAccessPolicies\")}{\" \"}\n            <HelpItem\n              fieldLabelId=\"\"\n              helpText={t(\"anonymousAccessPoliciesHelp\")}\n              noVerticalAlign={false}\n              unWrap\n            />\n          </TabTitleText>\n        }\n        {...anonymousTab}\n      >\n        <ClientRegistrationList subType=\"anonymous\" />\n      </Tab>\n      <Tab\n        data-testid=\"authenticated\"\n        title={\n          <TabTitleText>\n            {t(\"authenticatedAccessPolicies\")}{\" \"}\n            <HelpItem\n              fieldLabelId=\"\"\n              helpText={t(\"authenticatedAccessPoliciesHelp\")}\n              noVerticalAlign={false}\n              unWrap\n            />\n          </TabTitleText>\n        }\n        {...authenticatedTab}\n      >\n        <ClientRegistrationList subType=\"authenticated\" />\n      </Tab>\n    </RoutableTabs>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { ClientQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  AlertVariant,\n  Badge,\n  Button,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { IRowData, TableText, cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { FormattedLink } from \"../components/external-link/FormattedLink\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { emptyFormatter, exportClient } from \"../util\";\nimport { convertClientToUrl } from \"../utils/client-url\";\nimport { InitialAccessTokenList } from \"./initial-access/InitialAccessTokenList\";\nimport { ClientRegistration } from \"./registration/ClientRegistration\";\nimport { toAddClient } from \"./routes/AddClient\";\nimport { toClient } from \"./routes/Client\";\nimport { ClientsTab, toClients } from \"./routes/Clients\";\nimport { toImportClient } from \"./routes/ImportClient\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\n\nconst ClientDetailLink = (client: ClientRepresentation) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  return (\n    <Link\n      key={client.id}\n      to={toClient({ realm, clientId: client.id!, tab: \"settings\" })}\n    >\n      {client.clientId}\n      {!client.enabled && (\n        <Badge key={`${client.id}-disabled`} isRead className=\"pf-u-ml-sm\">\n          {t(\"disabled\")}\n        </Badge>\n      )}\n    </Link>\n  );\n};\n\nconst ClientName = (client: ClientRepresentation) => (\n  <TableText wrapModifier=\"truncate\">\n    {emptyFormatter()(client.name) as string}\n  </TableText>\n);\n\nconst ClientDescription = (client: ClientRepresentation) => (\n  <TableText wrapModifier=\"truncate\">\n    {emptyFormatter()(client.description) as string}\n  </TableText>\n);\n\nconst ClientHomeLink = (client: ClientRepresentation) => {\n  const href = convertClientToUrl(client, adminClient.baseUrl);\n\n  if (!href) {\n    return \"—\";\n  }\n\n  return <FormattedLink href={href} />;\n};\n\nconst ToolbarItems = () => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\");\n\n  if (!isManager) return <span />;\n\n  return (\n    <>\n      <ToolbarItem>\n        <Button\n          component={(props) => <Link {...props} to={toAddClient({ realm })} />}\n        >\n          {t(\"createClient\")}\n        </Button>\n      </ToolbarItem>\n      <ToolbarItem>\n        <Button\n          component={(props) => (\n            <Link {...props} to={toImportClient({ realm })} />\n          )}\n          variant=\"link\"\n          data-testid=\"importClient\"\n        >\n          {t(\"importClient\")}\n        </Button>\n      </ToolbarItem>\n    </>\n  );\n};\n\nexport default function ClientsSection() {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [selectedClient, setSelectedClient] = useState<ClientRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\");\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: ClientQuery = {\n      first: first!,\n      max: max!,\n    };\n    if (search) {\n      params.clientId = search;\n      params.search = true;\n    }\n    return await adminClient.clients.find({ ...params });\n  };\n\n  const useTab = (tab: ClientsTab) => useRoutableTab(toClients({ realm, tab }));\n\n  const listTab = useTab(\"list\");\n  const initialAccessTokenTab = useTab(\"initial-access-token\");\n  const clientRegistrationTab = useTab(\"client-registration\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"clientDelete\", { clientId: selectedClient?.clientId }),\n    messageKey: \"clientDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({\n          id: selectedClient!.id!,\n        });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientDeleteError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"clientList\"\n        subKey=\"clientsExplain\"\n        helpUrl={helpUrls.clientsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          mountOnEnter\n          isBox\n          defaultLocation={toClients({\n            realm,\n            tab: \"list\",\n          })}\n        >\n          <Tab\n            data-testid=\"list\"\n            title={<TabTitleText>{t(\"clientsList\")}</TabTitleText>}\n            {...listTab}\n          >\n            <DeleteConfirm />\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              isPaginated\n              ariaLabelKey=\"clientList\"\n              searchPlaceholderKey=\"searchForClient\"\n              toolbarItem={<ToolbarItems />}\n              actionResolver={(rowData: IRowData) => {\n                const client: ClientRepresentation = rowData.data;\n                const actions: Action<ClientRepresentation>[] = [\n                  {\n                    title: t(\"export\"),\n                    onClick() {\n                      exportClient(client);\n                    },\n                  },\n                ];\n\n                if (\n                  !isRealmClient(client) &&\n                  (isManager || client.access?.configure)\n                ) {\n                  actions.push({\n                    title: t(\"delete\"),\n                    onClick() {\n                      setSelectedClient(client);\n                      toggleDeleteDialog();\n                    },\n                  });\n                }\n\n                return actions;\n              }}\n              columns={[\n                {\n                  name: \"clientId\",\n                  displayKey: \"clientId\",\n                  transforms: [cellWidth(20)],\n                  cellRenderer: ClientDetailLink,\n                },\n                {\n                  name: \"clientName\",\n                  displayKey: \"clientName\",\n                  transforms: [cellWidth(20)],\n                  cellRenderer: ClientName,\n                },\n                {\n                  name: \"protocol\",\n                  displayKey: \"type\",\n                  transforms: [cellWidth(10)],\n                  cellRenderer: (client) =>\n                    getProtocolName(t, client.protocol ?? \"openid-connect\"),\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"description\",\n                  transforms: [cellWidth(30)],\n                  cellRenderer: ClientDescription,\n                },\n                {\n                  name: \"baseUrl\",\n                  displayKey: \"homeURL\",\n                  transforms: [cellWidth(20)],\n                  cellRenderer: ClientHomeLink,\n                },\n              ]}\n            />\n          </Tab>\n          <Tab\n            data-testid=\"initialAccessToken\"\n            title={<TabTitleText>{t(\"initialAccessToken\")}</TabTitleText>}\n            {...initialAccessTokenTab}\n          >\n            <InitialAccessTokenList />\n          </Tab>\n          <Tab\n            data-testid=\"registration\"\n            title={<TabTitleText>{t(\"clientRegistration\")}</TabTitleText>}\n            {...clientRegistrationTab}\n          >\n            <ClientRegistration />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["wrappable","styles","convertClientToUrl","rootUrl","baseUrl","adminClientBaseUrl","joinPath","InitialAccessTokenList","t","useTranslation","addAlert","addError","useAlerts","realm","useRealm","formatDate","useFormatDate","navigate","useNavigate","token","setToken","useState","loader","adminClient","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","AlertVariant","error","jsxs","Fragment","jsx","KeycloakDataTable","Button","props","Link","toCreateInitialAccessToken","row","FORMAT_DATE_AND_TIME","ListEmptyState","AddProviderDialog","onConfirm","toggleDialog","serverInfo","useServerInfo","providers","descriptions","localeSort","useLocaleSort","rows","useMemo","d","mapByKey","Modal","ModalVariant","DataList","id","DataListItem","DataListItemRow","DataListItemCells","name","DataListCell","provider","DetailLink","comp","subTab","useParams","toRegistrationProvider","ClientRegistrationList","subType","policies","setPolicies","selectedPolicy","setSelectedPolicy","isAddDialogOpen","toggleAddDialog","useToggle","useFetch","p","providerId","ToolbarItem","policy","ClientRegistration","useTab","useRoutableTab","toClientRegistration","anonymousTab","authenticatedTab","RoutableTabs","Tab","TabTitleText","HelpItem","ClientDetailLink","client","toClient","Badge","ClientName","TableText","emptyFormatter","ClientDescription","ClientHomeLink","href","FormattedLink","ToolbarItems","hasAccess","useAccess","toAddClient","toImportClient","ClientsSection","key","setKey","refresh","selectedClient","setSelectedClient","isManager","first","max","search","params","tab","toClients","listTab","initialAccessTokenTab","clientRegistrationTab","ViewHeader","helpUrls","PageSection","rowData","actions","exportClient","isRealmClient","cellWidth","getProtocolName"],"mappings":"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","x_google_ignoreList":[0]}