{"version":3,"file":"UserForm-BB1TTnrw.js","sources":["../../src/user/FederatedUserLink.tsx","../../src/user/form-state.ts","../../src/user/user-credentials/RequiredActionMultiSelect.tsx","../../src/user/UserForm.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { Button } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toCustomUserFederation } from \"../user-federation/routes/CustomUserFederation\";\nimport { useFetch } from \"../utils/useFetch\";\n\ntype FederatedUserLinkProps = {\n  user: UserRepresentation;\n};\n\nexport const FederatedUserLink = ({ user }: FederatedUserLinkProps) => {\n  const access = useAccess();\n  const { realm } = useRealm();\n\n  const [component, setComponent] = useState<ComponentRepresentation>();\n\n  useFetch(\n    () =>\n      access.hasAccess(\"view-realm\")\n        ? adminClient.components.findOne({\n            id: (user.federationLink || user.origin)!,\n          })\n        : adminClient.userStorageProvider.name({\n            id: (user.federationLink || user.origin)!,\n          }),\n    setComponent,\n    [],\n  );\n\n  if (!component) return null;\n\n  if (!access.hasAccess(\"view-realm\")) return <span>{component.name}</span>;\n\n  return (\n    <Button\n      variant=\"link\"\n      component={(props) => (\n        <Link\n          {...props}\n          to={toCustomUserFederation({\n            id: component.id!,\n            providerId: component.providerId!,\n            realm,\n          })}\n        />\n      )}\n    >\n      {component.name}\n    </Button>\n  );\n};\n","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  KeyValueType,\n  arrayToKeyValue,\n  keyValueToArray,\n} from \"../components/key-value-form/key-value-convert\";\nimport { beerify, debeerify } from \"../util\";\n\nexport type UserFormFields = Omit<\n  UIUserRepresentation,\n  \"attributes\" | \"userProfileMetadata\" | \"unmanagedAttributes\"\n> & {\n  attributes?: KeyValueType[] | Record<string, string | string[]>;\n  unmanagedAttributes?: KeyValueType[] | Record<string, string | string[]>;\n};\n\nexport interface UIUserRepresentation extends UserRepresentation {\n  unmanagedAttributes?: Record<string, string[]>;\n}\n\nexport function toUserFormFields(data: UIUserRepresentation): UserFormFields {\n  const attributes: Record<string, string | string[]> = {};\n  Object.entries(data.attributes || {}).forEach(\n    ([k, v]) => (attributes[beerify(k)] = v),\n  );\n\n  const unmanagedAttributes = arrayToKeyValue(data.unmanagedAttributes);\n  return { ...data, attributes, unmanagedAttributes };\n}\n\nexport function toUserRepresentation(\n  data: UserFormFields,\n): UIUserRepresentation {\n  const username = data.username?.trim();\n  const attributes = Array.isArray(data.attributes)\n    ? keyValueToArray(data.attributes)\n    : Object.fromEntries(\n        Object.entries(data.attributes || {}).map(([k, v]) => [\n          debeerify(k),\n          v,\n        ]),\n      );\n  const unmanagedAttributes = Array.isArray(data.unmanagedAttributes)\n    ? keyValueToArray(data.unmanagedAttributes)\n    : data.unmanagedAttributes;\n\n  for (const key in unmanagedAttributes) {\n    if (attributes && Object.hasOwn(attributes, key)) {\n      throw Error(\n        `Attribute ${key} is a managed attribute and is already available from the user details.`,\n      );\n    }\n  }\n\n  return {\n    ...data,\n    username,\n    attributes: { ...unmanagedAttributes, ...attributes },\n    unmanagedAttributes: undefined,\n  };\n}\n\nexport function filterManagedAttributes(\n  attributes: Record<string, string[]> = {},\n  unmanagedAttributes: Record<string, string[]> = {},\n) {\n  return Object.fromEntries(\n    Object.entries(attributes).filter(\n      ([key]) => !Object.hasOwn(unmanagedAttributes, key),\n    ),\n  );\n}\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport {\n  Control,\n  Controller,\n  FieldPathByValue,\n  FieldValues,\n  PathValue,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\n\nexport type RequiredActionMultiSelectProps<\n  T extends FieldValues,\n  P extends FieldPathByValue<T, string[] | undefined>,\n> = {\n  control: Control<T>;\n  name: P;\n  label: string;\n  help: string;\n};\n\nexport const RequiredActionMultiSelect = <\n  T extends FieldValues,\n  P extends FieldPathByValue<T, string[] | undefined>,\n>({\n  control,\n  name,\n  label,\n  help,\n}: RequiredActionMultiSelectProps<T, P>) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const [requiredActions, setRequiredActions] = useState<\n    RequiredActionProviderRepresentation[]\n  >([]);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getRequiredActions(),\n    (actions) => {\n      const enabledUserActions = actions.filter((action) => {\n        return action.enabled;\n      });\n      setRequiredActions(enabledUserActions);\n    },\n    [],\n  );\n\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={<HelpItem helpText={t(help)} fieldLabelId=\"resetAction\" />}\n      fieldId=\"actions\"\n    >\n      <Controller\n        name={name}\n        defaultValue={[] as PathValue<T, P>}\n        control={control}\n        render={({ field }) => (\n          <Select\n            maxHeight={375}\n            toggleId={`${name}-actions`}\n            variant={SelectVariant.typeaheadMulti}\n            chipGroupProps={{\n              numChips: 3,\n            }}\n            placeholderText={t(\"requiredActionPlaceholder\")}\n            menuAppendTo=\"parent\"\n            onToggle={(open) => setOpen(open)}\n            isOpen={open}\n            selections={field.value as string[]}\n            onSelect={(_, selectedValue) => {\n              const value: string[] = field.value;\n              field.onChange(\n                value.find((item) => item === selectedValue)\n                  ? value.filter((item) => item !== selectedValue)\n                  : [...value, selectedValue],\n              );\n            }}\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange([]);\n            }}\n            typeAheadAriaLabel={t(\"resetAction\")}\n          >\n            {requiredActions.map(({ alias, name }) => (\n              <SelectOption\n                key={alias}\n                value={alias}\n                data-testid={`${alias}-option`}\n              >\n                {name}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { UserProfileMetadata } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { TFunction } from \"i18next\";\nimport { useState, useEffect } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { HelpItem, UserProfileFields } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../context/access/Access\";\nimport { emailRegexPattern } from \"../util\";\nimport useFormatDate from \"../utils/useFormatDate\";\nimport { FederatedUserLink } from \"./FederatedUserLink\";\nimport { UserFormFields, toUserFormFields } from \"./form-state\";\nimport { toUsers } from \"./routes/Users\";\nimport { RequiredActionMultiSelect } from \"./user-credentials/RequiredActionMultiSelect\";\n\nexport type BruteForced = {\n  isBruteForceProtected?: boolean;\n  isLocked?: boolean;\n};\n\nexport type UserFormProps = {\n  form: UseFormReturn<UserFormFields>;\n  realm: RealmRepresentation;\n  user?: UserRepresentation;\n  bruteForce?: BruteForced;\n  userProfileMetadata?: UserProfileMetadata;\n  save: (user: UserFormFields) => void;\n  onGroupsUpdate?: (groups: GroupRepresentation[]) => void;\n};\n\nexport const UserForm = ({\n  form,\n  realm,\n  user,\n  bruteForce: { isBruteForceProtected, isLocked } = {\n    isBruteForceProtected: false,\n    isLocked: false,\n  },\n  userProfileMetadata,\n  save,\n  onGroupsUpdate,\n}: UserFormProps) => {\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const { addAlert, addError } = useAlerts();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-users\");\n  const canViewFederationLink = hasAccess(\"view-realm\");\n\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    watch,\n    control,\n    reset,\n    formState: { errors },\n  } = form;\n  const watchUsernameInput = watch(\"username\");\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    [],\n  );\n  const [open, setOpen] = useState(false);\n  const [locked, setLocked] = useState(isLocked);\n\n  useEffect(() => {\n    setValue(\"requiredActions\", user?.requiredActions || []);\n  }, [user, setValue]);\n\n  const unLockUser = async () => {\n    try {\n      await adminClient.attackDetection.del({ id: user!.id! });\n      addAlert(t(\"unlockSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"unlockError\", error);\n    }\n  };\n\n  const deleteItem = (id: string) => {\n    setSelectedGroups(selectedGroups.filter((item) => item.name !== id));\n    onGroupsUpdate?.(selectedGroups);\n  };\n\n  const addChips = async (groups: GroupRepresentation[]): Promise<void> => {\n    setSelectedGroups([...selectedGroups!, ...groups]);\n    onGroupsUpdate?.([...selectedGroups!, ...groups]);\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]): Promise<void> => {\n    const newGroups = groups;\n\n    newGroups.forEach(async (group) => {\n      try {\n        await adminClient.users.addToGroup({\n          id: user!.id!,\n          groupId: group.id!,\n        });\n        addAlert(t(\"addedGroupMembership\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"addedGroupMembershipError\", error);\n      }\n    });\n  };\n\n  const toggleModal = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <FormAccess\n      isHorizontal\n      onSubmit={handleSubmit(save)}\n      role=\"query-users\"\n      fineGrainedAccess={user?.access?.manage}\n      className=\"pf-u-mt-lg\"\n    >\n      {open && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"selectGroups\",\n            ok: \"join\",\n          }}\n          canBrowse={isManager}\n          onConfirm={(groups) => {\n            user?.id ? addGroups(groups || []) : addChips(groups || []);\n            setOpen(false);\n          }}\n          onClose={() => setOpen(false)}\n          filterGroups={selectedGroups}\n        />\n      )}\n      {user?.id && (\n        <>\n          <FormGroup label={t(\"id\")} fieldId=\"kc-id\" isRequired>\n            <KeycloakTextInput\n              id={user.id}\n              aria-label={t(\"userID\")}\n              value={user.id}\n              type=\"text\"\n              isReadOnly\n            />\n          </FormGroup>\n          <FormGroup label={t(\"createdAt\")} fieldId=\"kc-created-at\" isRequired>\n            <KeycloakTextInput\n              value={formatDate(new Date(user.createdTimestamp!))}\n              type=\"text\"\n              id=\"kc-created-at\"\n              aria-label={t(\"createdAt\")}\n              name=\"createdTimestamp\"\n              isReadOnly\n            />\n          </FormGroup>\n        </>\n      )}\n      <RequiredActionMultiSelect\n        control={control}\n        name=\"requiredActions\"\n        label=\"requiredUserActions\"\n        help=\"requiredUserActionsHelp\"\n      />\n      {(user?.federationLink || user?.origin) && canViewFederationLink && (\n        <FormGroup\n          label={t(\"federationLink\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"federationLinkHelp\")}\n              fieldLabelId=\"federationLink\"\n            />\n          }\n        >\n          <FederatedUserLink user={user} />\n        </FormGroup>\n      )}\n      {userProfileMetadata ? (\n        <>\n          <FormGroup\n            label={t(\"emailVerified\")}\n            fieldId=\"kc-email-verified\"\n            helperTextInvalid={t(\"required\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailVerifiedHelp\")}\n                fieldLabelId=\"emailVerified\"\n              />\n            }\n          >\n            <Controller\n              name=\"emailVerified\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"email-verified-switch\"\n                  id=\"kc-user-email-verified\"\n                  onChange={(value) => field.onChange(value)}\n                  isChecked={field.value}\n                  label={t(\"yes\")}\n                  labelOff={t(\"no\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <UserProfileFields\n            form={form}\n            userProfileMetadata={userProfileMetadata}\n            hideReadOnly={!user}\n            supportedLocales={realm.supportedLocales || []}\n            t={\n              ((key: unknown, params) =>\n                t(key as string, params as any)) as TFunction\n            }\n          />\n        </>\n      ) : (\n        <>\n          {!realm.registrationEmailAsUsername && (\n            <FormGroup\n              label={t(\"username\")}\n              fieldId=\"kc-username\"\n              isRequired\n              validated={errors.username ? \"error\" : \"default\"}\n              helperTextInvalid={t(\"required\")}\n            >\n              <KeycloakTextInput\n                id=\"kc-username\"\n                isReadOnly={\n                  !!user?.id &&\n                  !realm.editUsernameAllowed &&\n                  realm.editUsernameAllowed !== undefined\n                }\n                {...register(\"username\")}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"email\")}\n            fieldId=\"kc-email\"\n            validated={errors.email ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-email\"\n              data-testid=\"email-input\"\n              {...register(\"email\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"emailVerified\")}\n            fieldId=\"kc-email-verified\"\n            helperTextInvalid={t(\"required\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailVerifiedHelp\")}\n                fieldLabelId=\"emailVerified\"\n              />\n            }\n          >\n            <Controller\n              name=\"emailVerified\"\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  data-testid=\"email-verified-switch\"\n                  id=\"kc-user-email-verified\"\n                  onChange={(value) => field.onChange(value)}\n                  isChecked={field.value}\n                  label={t(\"yes\")}\n                  labelOff={t(\"no\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"firstName\")}\n            fieldId=\"kc-firstName\"\n            validated={errors.firstName ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              data-testid=\"firstName-input\"\n              id=\"kc-firstName\"\n              {...register(\"firstName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"lastName\")}\n            fieldId=\"kc-lastName\"\n            validated={errors.lastName ? \"error\" : \"default\"}\n          >\n            <KeycloakTextInput\n              data-testid=\"lastName-input\"\n              id=\"kc-lastName\"\n              aria-label={t(\"lastName\")}\n              {...register(\"lastName\")}\n            />\n          </FormGroup>\n        </>\n      )}\n      {isBruteForceProtected && (\n        <FormGroup\n          label={t(\"temporaryLocked\")}\n          fieldId=\"temporaryLocked\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"temporaryLockedHelp\")}\n              fieldLabelId=\"temporaryLocked\"\n            />\n          }\n        >\n          <Switch\n            data-testid=\"user-locked-switch\"\n            id=\"temporaryLocked\"\n            onChange={(value) => {\n              unLockUser();\n              setLocked(value);\n            }}\n            isChecked={locked}\n            isDisabled={!locked}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n          />\n        </FormGroup>\n      )}\n      {!user?.id && (\n        <FormGroup\n          label={t(\"groups\")}\n          fieldId=\"kc-groups\"\n          validated={errors.requiredActions ? \"error\" : \"default\"}\n          helperTextInvalid={t(\"required\")}\n          labelIcon={<HelpItem helpText={t(\"groups\")} fieldLabelId=\"groups\" />}\n        >\n          <Controller\n            name=\"groups\"\n            defaultValue={[]}\n            control={control}\n            render={() => (\n              <InputGroup>\n                <ChipGroup categoryName={\" \"}>\n                  {selectedGroups.map((currentChip) => (\n                    <Chip\n                      key={currentChip.id}\n                      onClick={() => deleteItem(currentChip.name!)}\n                    >\n                      {currentChip.path}\n                    </Chip>\n                  ))}\n                </ChipGroup>\n                <Button\n                  id=\"kc-join-groups-button\"\n                  onClick={toggleModal}\n                  variant=\"secondary\"\n                  data-testid=\"join-groups-button\"\n                >\n                  {t(\"joinGroups\")}\n                </Button>\n              </InputGroup>\n            )}\n          />\n        </FormGroup>\n      )}\n\n      <ActionGroup>\n        <Button\n          data-testid={!user?.id ? \"create-user\" : \"save-user\"}\n          isDisabled={\n            !user?.id &&\n            !watchUsernameInput &&\n            realm.registrationEmailAsUsername === false\n          }\n          variant=\"primary\"\n          type=\"submit\"\n        >\n          {user?.id ? t(\"save\") : t(\"create\")}\n        </Button>\n        <Button\n          data-testid=\"cancel-create-user\"\n          variant=\"link\"\n          onClick={user?.id ? () => reset(toUserFormFields(user)) : undefined}\n          component={\n            !user?.id\n              ? (props) => (\n                  <Link {...props} to={toUsers({ realm: realm.realm! })} />\n                )\n              : undefined\n          }\n        >\n          {user?.id ? t(\"revert\") : t(\"cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["FederatedUserLink","user","access","useAccess","realm","useRealm","component","setComponent","useState","useFetch","adminClient","jsx","Button","props","Link","toCustomUserFederation","toUserFormFields","data","attributes","k","v","beerify","unmanagedAttributes","arrayToKeyValue","toUserRepresentation","username","keyValueToArray","debeerify","key","filterManagedAttributes","RequiredActionMultiSelect","control","name","label","help","t","useTranslation","open","setOpen","requiredActions","setRequiredActions","actions","enabledUserActions","action","FormGroup","HelpItem","Controller","field","Select","SelectVariant","_","selectedValue","value","item","event","alias","SelectOption","UserForm","form","isBruteForceProtected","isLocked","userProfileMetadata","save","onGroupsUpdate","formatDate","useFormatDate","addAlert","addError","useAlerts","hasAccess","isManager","canViewFederationLink","handleSubmit","register","setValue","watch","reset","errors","watchUsernameInput","selectedGroups","setSelectedGroups","locked","setLocked","useEffect","unLockUser","AlertVariant","error","deleteItem","id","addChips","groups","addGroups","group","toggleModal","jsxs","FormAccess","GroupPickerDialog","Fragment","KeycloakTextInput","Switch","UserProfileFields","params","emailRegexPattern","InputGroup","ChipGroup","currentChip","Chip","ActionGroup","toUsers"],"mappings":"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"}