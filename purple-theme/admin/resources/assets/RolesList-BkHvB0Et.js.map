{"version":3,"file":"RolesList-BkHvB0Et.js","sources":["../../src/components/roles-list/RolesList.tsx"],"sourcesContent":["import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant, Button, ButtonVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, To, useNavigate } from \"react-router-dom\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toRealmSettings } from \"../../realm-settings/routes/RealmSettings\";\nimport { emptyFormatter, upperCaseFormatter } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { Action, KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\n\nimport \"./RolesList.css\";\n\ntype RoleDetailLinkProps = RoleRepresentation & {\n  defaultRoleName?: string;\n  toDetail: (roleId: string) => To;\n  messageBundle?: string;\n};\n\nconst RoleDetailLink = ({\n  defaultRoleName,\n  toDetail,\n  messageBundle,\n  ...role\n}: RoleDetailLinkProps) => {\n  const { t } = useTranslation(messageBundle);\n  const { realm } = useRealm();\n  return role.name !== defaultRoleName ? (\n    <Link to={toDetail(role.id!)}>{role.name}</Link>\n  ) : (\n    <>\n      <Link to={toRealmSettings({ realm, tab: \"user-registration\" })}>\n        {role.name}{\" \"}\n      </Link>\n      <HelpItem\n        helpText={t(`${messageBundle}:defaultRole`)}\n        fieldLabelId=\"defaultRole\"\n      />\n    </>\n  );\n};\n\ntype RolesListProps = {\n  paginated?: boolean;\n  parentRoleId?: string;\n  messageBundle?: string;\n  isReadOnly: boolean;\n  toCreate: To;\n  toDetail: (roleId: string) => To;\n  loader?: (\n    first?: number,\n    max?: number,\n    search?: string,\n  ) => Promise<RoleRepresentation[]>;\n};\n\nexport const RolesList = ({\n  loader,\n  paginated = true,\n  parentRoleId,\n  messageBundle = \"roles\",\n  toCreate,\n  toDetail,\n  isReadOnly,\n}: RolesListProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  const [selectedRole, setSelectedRole] = useState<RoleRepresentation>();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    (realm) => {\n      setRealm(realm);\n    },\n    [],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"roleDeleteConfirm\",\n    messageKey: t(\"roleDeleteConfirmDialog\", {\n      selectedRoleName: selectedRole ? selectedRole!.name : \"\",\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        if (!parentRoleId) {\n          await adminClient.roles.delById({\n            id: selectedRole!.id!,\n          });\n        } else {\n          await adminClient.roles.delCompositeRoles({ id: parentRoleId }, [\n            selectedRole!,\n          ]);\n        }\n        setSelectedRole(undefined);\n        addAlert(t(\"roleDeletedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"roleDeleteError\", error);\n      }\n    },\n  });\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={selectedRole ? selectedRole.id : \"roleList\"}\n        loader={loader!}\n        ariaLabelKey=\"roleList\"\n        searchPlaceholderKey=\"searchForRoles\"\n        isPaginated={paginated}\n        toolbarItem={\n          !isReadOnly && (\n            <Button\n              data-testid=\"create-role\"\n              component={(props) => <Link {...props} to={toCreate} />}\n            >\n              {t(\"createRole\")}\n            </Button>\n          )\n        }\n        actions={\n          isReadOnly\n            ? []\n            : [\n                {\n                  title: t(\"delete\"),\n                  onRowClick: (role) => {\n                    setSelectedRole(role);\n                    if (\n                      realm!.defaultRole &&\n                      role.name === realm!.defaultRole!.name\n                    ) {\n                      addAlert(\n                        t(\"defaultRoleDeleteError\"),\n                        AlertVariant.danger,\n                      );\n                    } else toggleDeleteDialog();\n                  },\n                } as Action<RoleRepresentation>,\n              ]\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"roleName\",\n            cellRenderer: (row) => (\n              <RoleDetailLink\n                {...row}\n                defaultRoleName={realm.defaultRole?.name}\n                toDetail={toDetail}\n                messageBundle={messageBundle}\n              />\n            ),\n          },\n          {\n            name: \"composite\",\n            displayKey: \"composite\",\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n          {\n            name: \"description\",\n            displayKey: \"description\",\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon={true}\n            message={t(`noRoles-${messageBundle}`)}\n            instructions={\n              isReadOnly ? \"\" : t(`noRolesInstructions-${messageBundle}`)\n            }\n            primaryActionText={isReadOnly ? \"\" : t(\"createRole\")}\n            onPrimaryAction={() => navigate(toCreate)}\n          />\n        }\n      />\n    </>\n  );\n};\n"],"names":["RoleDetailLink","defaultRoleName","toDetail","messageBundle","role","t","useTranslation","realm","useRealm","jsx","Link","jsxs","Fragment","toRealmSettings","HelpItem","RolesList","loader","paginated","parentRoleId","toCreate","isReadOnly","navigate","useNavigate","addAlert","addError","useAlerts","realmName","setRealm","useState","selectedRole","setSelectedRole","useFetch","adminClient","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","AlertVariant","error","KeycloakDataTable","Button","props","row","upperCaseFormatter","emptyFormatter","ListEmptyState","KeycloakSpinner"],"mappings":"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"}