{"version":3,"file":"NewPolicyDialog-Q18nUkuT.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePickerUtils.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/TimePicker/TimePicker.js","../../../../node_modules/.pnpm/@patternfly+react-icons@4.93.7_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-icons/dist/esm/icons/caret-up-icon.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_trimmedEndIndex.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/_baseTrim.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/toNumber.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/now.js","../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/debounce.js","../../src/components/users/UserSelect.tsx","../../src/clients/authorization/DecisionStrategySelect.tsx","../../src/clients/authorization/ResourcesPolicySelect.tsx","../../src/clients/authorization/policy/Aggregate.tsx","../../src/clients/authorization/policy/Client.tsx","../../src/clients/scopes/AddScopeDialog.tsx","../../src/clients/authorization/policy/ClientScope.tsx","../../src/clients/authorization/policy/Group.tsx","../../src/clients/authorization/policy/JavaScript.tsx","../../src/clients/authorization/policy/LogicSelector.tsx","../../src/clients/authorization/policy/NameDescription.tsx","../../src/clients/authorization/policy/Regex.tsx","../../src/clients/authorization/policy/Role.tsx","../../src/clients/authorization/policy/Time.tsx","../../src/clients/authorization/policy/User.tsx","../../src/clients/authorization/policy/PolicyDetails.tsx","../../src/clients/authorization/NewPolicyDialog.tsx"],"sourcesContent":["export const amSuffix = ' AM';\nexport const pmSuffix = ' PM';\nexport const makeTimeOptions = (stepMinutes, hour12, delimiter, minTime, maxTime, includeSeconds) => {\n    const res = [];\n    const iter = new Date(new Date().setHours(0, 0, 0, 0));\n    const iterDay = iter.getDay();\n    while (iter.getDay() === iterDay) {\n        let hour = iter.getHours();\n        let suffix = amSuffix;\n        if (hour12) {\n            if (hour === 0) {\n                hour = 12; // 12am\n            }\n            else if (hour >= 12) {\n                suffix = pmSuffix;\n            }\n            if (hour > 12) {\n                hour %= 12;\n            }\n        }\n        hour = hour12 ? hour.toString() : hour.toString().padStart(2, '0');\n        const minutes = iter\n            .getMinutes()\n            .toString()\n            .padStart(2, '0');\n        const timeOption = `${hour}${delimiter}${minutes}${hour12 ? suffix : ''}`;\n        // time option is valid if within min/max constraints\n        if (isWithinMinMax(minTime, maxTime, timeOption, delimiter, includeSeconds)) {\n            res.push(timeOption);\n        }\n        iter.setMinutes(iter.getMinutes() + stepMinutes);\n    }\n    return res;\n};\nexport const parseTime = (time, timeRegex, delimiter, is12Hour, includeSeconds) => {\n    const date = new Date(time);\n    // if default time is a ISO 8601 formatted date string, we parse it to hh:mm(am/pm) format\n    if (!isNaN(date.getDate()) && (time instanceof Date || time.includes('T'))) {\n        const hours = is12Hour\n            ? `${date.getHours() > 12 ? date.getHours() - 12 : date.getHours()}`\n            : `${date.getHours()}`.padStart(2, '0');\n        const minutes = `${date.getMinutes()}`.padStart(2, '0');\n        const seconds = includeSeconds ? `${date.getSeconds()}`.padStart(2, '0') : '';\n        const secondsWithDelimiter = seconds ? `${delimiter}${seconds}` : '';\n        let ampm = '';\n        if (is12Hour && date.getHours() > 11) {\n            ampm = pmSuffix;\n        }\n        else if (is12Hour) {\n            ampm = amSuffix;\n        }\n        return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n    }\n    else if (typeof time === 'string') {\n        time = time.trim();\n        if (time !== '' && validateTime(time, timeRegex, delimiter, is12Hour)) {\n            const [, hours, minutes, seconds, suffix = ''] = timeRegex.exec(time);\n            const secondsWithDelimiter = includeSeconds ? `${delimiter}${seconds !== null && seconds !== void 0 ? seconds : '00'}` : '';\n            let ampm = '';\n            // Format AM/PM according to design\n            if (is12Hour) {\n                const uppercaseSuffix = suffix.toUpperCase();\n                if (uppercaseSuffix === amSuffix.toUpperCase().trim()) {\n                    ampm = amSuffix;\n                }\n                else if (uppercaseSuffix === pmSuffix.toUpperCase().trim()) {\n                    ampm = pmSuffix;\n                }\n                else {\n                    // if this 12 hour time is missing am/pm but otherwise valid,\n                    // append am/pm depending on time of day\n                    ampm = new Date().getHours() > 11 ? pmSuffix : amSuffix;\n                }\n            }\n            return `${hours}${delimiter}${minutes}${secondsWithDelimiter}${ampm}`;\n        }\n    }\n    return time.toString();\n};\nexport const validateTime = (time, timeRegex, delimiter, is12Hour) => {\n    // ISO 8601 format is valid\n    const date = new Date(time);\n    if (!isNaN(date.getDate()) && time.includes('T')) {\n        return true;\n    }\n    // hours only valid if they are [0-23] or [1-12]\n    const hours = parseInt(time.split(delimiter)[0]);\n    const validHours = hours >= (is12Hour ? 1 : 0) && hours <= (is12Hour ? 12 : 23);\n    // minutes verified by timeRegex\n    // empty string is valid\n    return time === '' || (timeRegex.test(time) && validHours);\n};\nexport const getHours = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    if (parts && parts.length) {\n        if (/pm/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? parseInt(parts[1]) : parseInt(parts[1]) + 12;\n        }\n        if (/am/i.test(parts[4])) {\n            return parseInt(parts[1]) === 12 ? 0 : parseInt(parts[1]);\n        }\n        return parseInt(parts[1]);\n    }\n    return null;\n};\nexport const getMinutes = (time, timeRegex) => {\n    const parts = time.match(timeRegex);\n    return parts && parts.length ? parseInt(parts[2]) : null;\n};\nexport const getSeconds = (time, timeRegex) => {\n    var _a;\n    const seconds = (_a = time.match(timeRegex)) === null || _a === void 0 ? void 0 : _a[3];\n    return seconds ? parseInt(seconds) : null;\n};\nexport const isWithinMinMax = (minTime, maxTime, time, delimiter, includeSeconds) => {\n    // do not throw error if empty string\n    if (time.trim() === '') {\n        return true;\n    }\n    // correctly format as 24hr times (12:30AM => 00:30, 1:15 => 01:15)\n    const min24HourTime = convertTo24Hour(minTime, delimiter, includeSeconds);\n    const selected24HourTime = convertTo24Hour(time, delimiter, includeSeconds);\n    const max24HourTime = convertTo24Hour(maxTime, delimiter, includeSeconds);\n    // simple string comparison for 24hr times\n    return min24HourTime <= selected24HourTime && selected24HourTime <= max24HourTime;\n};\nconst convertTo24Hour = (time, delimiter, includeSeconds) => {\n    const timeReg = new RegExp(`^\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)${delimiter}?([0-5]\\\\d)?\\\\s*([AaPp][Mm])?\\\\s*$`);\n    const regMatches = timeReg.exec(time);\n    if (!regMatches || !regMatches.length) {\n        return;\n    }\n    let hours = regMatches[1].padStart(2, '0');\n    const minutes = regMatches[2];\n    let seconds = regMatches[3] ? `${delimiter}${regMatches[3]}` : '';\n    // When seconds is empty and 'includeSeconds' is enabled, append 0 seconds.\n    if (!seconds && includeSeconds) {\n        seconds = `${delimiter}00`;\n    }\n    const suffix = regMatches[4] || '';\n    if (suffix.toUpperCase() === 'PM' && hours !== '12') {\n        hours = `${parseInt(hours) + 12}`;\n    }\n    else if (suffix.toUpperCase() === 'AM' && hours === '12') {\n        hours = '00';\n    }\n    return `${hours}${delimiter}${minutes}${seconds}`;\n};\n//# sourceMappingURL=TimePickerUtils.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport datePickerStyles from '@patternfly/react-styles/css/components/DatePicker/date-picker';\nimport formStyles from '@patternfly/react-styles/css/components/FormControl/form-control';\nimport menuStyles from '@patternfly/react-styles/css/components/Menu/menu';\nimport { getUniqueId } from '../../helpers';\nimport { Popper } from '../../helpers/Popper/Popper';\nimport { Menu, MenuContent, MenuList, MenuItem } from '../Menu';\nimport { InputGroup } from '../InputGroup';\nimport { TextInput } from '../TextInput';\nimport { KeyTypes } from '../../helpers/constants';\nimport { parseTime, validateTime, makeTimeOptions, amSuffix, pmSuffix, getHours, getMinutes, isWithinMinMax, getSeconds } from './TimePickerUtils';\nexport class TimePicker extends React.Component {\n    constructor(props) {\n        super(props);\n        this.baseComponentRef = React.createRef();\n        this.toggleRef = React.createRef();\n        this.inputRef = React.createRef();\n        this.menuRef = React.createRef();\n        this.onDocClick = (event) => {\n            var _a, _b, _c, _d;\n            const clickedOnToggle = (_b = (_a = this.toggleRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target);\n            const clickedWithinMenu = (_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target);\n            if (this.state.isTimeOptionsOpen && !(clickedOnToggle || clickedWithinMenu)) {\n                this.onToggle(false);\n            }\n        };\n        this.handleGlobalKeys = (event) => {\n            var _a, _b, _c, _d;\n            const { isTimeOptionsOpen, focusedIndex, scrollIndex } = this.state;\n            // keyboard pressed while focus on toggle\n            if ((_b = (_a = this.inputRef) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.contains(event.target)) {\n                if (!isTimeOptionsOpen && event.key !== KeyTypes.Tab && event.key !== KeyTypes.Escape) {\n                    this.onToggle(true);\n                }\n                else if (isTimeOptionsOpen) {\n                    if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                        this.onToggle(false);\n                    }\n                    else if (event.key === KeyTypes.Enter) {\n                        if (focusedIndex !== null) {\n                            this.focusSelection(focusedIndex);\n                            event.stopPropagation();\n                        }\n                        else {\n                            this.onToggle(false);\n                        }\n                    }\n                    else if (event.key === KeyTypes.ArrowDown || event.key === KeyTypes.ArrowUp) {\n                        this.focusSelection(scrollIndex);\n                        this.updateFocusedIndex(0);\n                        event.preventDefault();\n                    }\n                }\n                // keyboard pressed while focus on menu item\n            }\n            else if ((_d = (_c = this.menuRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.contains(event.target)) {\n                if (event.key === KeyTypes.ArrowDown) {\n                    this.updateFocusedIndex(1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.ArrowUp) {\n                    this.updateFocusedIndex(-1);\n                    event.preventDefault();\n                }\n                else if (event.key === KeyTypes.Escape || event.key === KeyTypes.Tab) {\n                    this.inputRef.current.focus();\n                    this.onToggle(false);\n                }\n            }\n        };\n        this.updateFocusedIndex = (increment) => {\n            this.setState(prevState => {\n                const maxIndex = this.getOptions().length - 1;\n                let nextIndex = prevState.focusedIndex !== null ? prevState.focusedIndex + increment : prevState.scrollIndex + increment;\n                if (nextIndex < 0) {\n                    nextIndex = maxIndex;\n                }\n                else if (nextIndex > maxIndex) {\n                    nextIndex = 0;\n                }\n                this.scrollToIndex(nextIndex);\n                return {\n                    focusedIndex: nextIndex\n                };\n            });\n        };\n        // fixes issue where menutAppendTo=\"inline\" results in the menu item that should be scrolled to being out of view; this will select the menu item that comes before the intended one, causing that before-item to be placed out of view instead\n        this.getIndexToScroll = (index) => {\n            if (this.props.menuAppendTo === 'inline') {\n                return index > 0 ? index - 1 : 0;\n            }\n            return index;\n        };\n        this.scrollToIndex = (index) => {\n            this.getOptions()[index].closest(`.${menuStyles.menuContent}`).scrollTop = this.getOptions()[this.getIndexToScroll(index)].offsetTop;\n        };\n        this.focusSelection = (index) => {\n            var _a;\n            const indexToFocus = index !== -1 ? index : 0;\n            if ((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current) {\n                this.getOptions()[indexToFocus].querySelector(`.${menuStyles.menuItem}`).focus();\n            }\n        };\n        this.scrollToSelection = (time) => {\n            const { delimiter, is24Hour } = this.props;\n            let splitTime = time.split(this.props.delimiter);\n            let focusedIndex = null;\n            // build out the rest of the time assuming hh:00 if it's a partial time\n            if (splitTime.length < 2) {\n                time = `${time}${delimiter}00`;\n                splitTime = time.split(delimiter);\n                // due to only the input including seconds when includeSeconds=true, we need to build a temporary time here without those seconds so that an exact or close match can be scrolled to within the menu (which does not include seconds in any of the options)\n            }\n            else if (splitTime.length > 2) {\n                time = parseTime(time, this.state.timeRegex, delimiter, !is24Hour, false);\n                splitTime = time.split(delimiter);\n            }\n            // for 12hr variant, autoscroll to pm if it's currently the afternoon, otherwise autoscroll to am\n            if (!is24Hour && splitTime.length > 1 && splitTime[1].length < 2) {\n                const minutes = splitTime[1].length === 0 ? '00' : splitTime[1] + '0';\n                time = `${splitTime[0]}${delimiter}${minutes}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            else if (!is24Hour &&\n                splitTime.length > 1 &&\n                splitTime[1].length === 2 &&\n                !time.toUpperCase().includes(amSuffix.toUpperCase().trim()) &&\n                !time.toUpperCase().includes(pmSuffix.toUpperCase().trim())) {\n                time = `${time}${new Date().getHours() > 11 ? pmSuffix : amSuffix}`;\n            }\n            let scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n            // if we found an exact match, scroll to match and return index of match for focus\n            if (scrollIndex !== -1) {\n                this.scrollToIndex(scrollIndex);\n                focusedIndex = scrollIndex;\n            }\n            else if (splitTime.length === 2) {\n                // no exact match, scroll to closest hour but don't return index for focus\n                let amPm = '';\n                if (!is24Hour) {\n                    if (splitTime[1].toUpperCase().includes('P')) {\n                        amPm = pmSuffix;\n                    }\n                    else if (splitTime[1].toUpperCase().includes('A')) {\n                        amPm = amSuffix;\n                    }\n                }\n                time = `${splitTime[0]}${delimiter}00${amPm}`;\n                scrollIndex = this.getOptions().findIndex(option => option.textContent === time);\n                if (scrollIndex !== -1) {\n                    this.scrollToIndex(scrollIndex);\n                }\n            }\n            this.setState({\n                focusedIndex,\n                scrollIndex\n            });\n        };\n        this.getRegExp = (includeSeconds = true) => {\n            const { is24Hour, delimiter } = this.props;\n            let baseRegex = `\\\\s*(\\\\d\\\\d?)${delimiter}([0-5]\\\\d)`;\n            if (includeSeconds) {\n                baseRegex += `${delimiter}?([0-5]\\\\d)?`;\n            }\n            return new RegExp(`^${baseRegex}${is24Hour ? '' : '\\\\s*([AaPp][Mm])?'}\\\\s*$`);\n        };\n        this.getOptions = () => {\n            var _a;\n            return (((_a = this.menuRef) === null || _a === void 0 ? void 0 : _a.current)\n                ? Array.from(this.menuRef.current.querySelectorAll(`.${menuStyles.menuListItem}`))\n                : []);\n        };\n        this.isValidFormat = (time) => {\n            if (this.props.validateTime) {\n                return this.props.validateTime(time);\n            }\n            const { delimiter, is24Hour, includeSeconds } = this.props;\n            return validateTime(time, this.getRegExp(includeSeconds), delimiter, !is24Hour);\n        };\n        this.isValidTime = (time) => {\n            const { delimiter, includeSeconds } = this.props;\n            const { minTimeState, maxTimeState } = this.state;\n            return isWithinMinMax(minTimeState, maxTimeState, time, delimiter, includeSeconds);\n        };\n        this.isValid = (time) => this.isValidFormat(time) && this.isValidTime(time);\n        this.onToggle = (isOpen) => {\n            // on close, parse and validate input\n            this.setState(prevState => {\n                const { timeRegex, isInvalid, timeState } = prevState;\n                const { delimiter, is24Hour, includeSeconds, onChange } = this.props;\n                const time = parseTime(timeState, timeRegex, delimiter, !is24Hour, includeSeconds);\n                // Call onChange when Enter is pressed in input and timeoption does not exist in menu\n                if (onChange && !isOpen && time !== timeState) {\n                    onChange(null, time, getHours(time, timeRegex), getMinutes(time, timeRegex), getSeconds(time, timeRegex), this.isValid(time));\n                }\n                return {\n                    isTimeOptionsOpen: isOpen,\n                    timeState: time,\n                    isInvalid: isOpen ? isInvalid : !this.isValid(time)\n                };\n            });\n            this.props.setIsOpen(isOpen);\n            if (!isOpen) {\n                this.inputRef.current.focus();\n            }\n        };\n        this.onSelect = (e) => {\n            const { timeRegex, timeState } = this.state;\n            const { delimiter, is24Hour, includeSeconds, setIsOpen } = this.props;\n            const time = parseTime(e.target.textContent, timeRegex, delimiter, !is24Hour, includeSeconds);\n            if (time !== timeState) {\n                this.onInputChange(time, e);\n            }\n            this.inputRef.current.focus();\n            this.setState({\n                isTimeOptionsOpen: false,\n                isInvalid: false\n            });\n            setIsOpen(false);\n        };\n        this.onInputClick = (e) => {\n            if (!this.state.isTimeOptionsOpen) {\n                this.onToggle(true);\n            }\n            e.stopPropagation();\n        };\n        this.onInputChange = (newTime, event) => {\n            const { onChange } = this.props;\n            const { timeRegex } = this.state;\n            if (onChange) {\n                onChange(event, newTime, getHours(newTime, timeRegex), getMinutes(newTime, timeRegex), getSeconds(newTime, timeRegex), this.isValid(newTime));\n            }\n            this.scrollToSelection(newTime);\n            this.setState({\n                timeState: newTime\n            });\n        };\n        const { is24Hour, delimiter, time, includeSeconds, isOpen } = this.props;\n        let { minTime, maxTime } = this.props;\n        if (minTime === '') {\n            const minSeconds = includeSeconds ? `${delimiter}00` : '';\n            minTime = is24Hour ? `00${delimiter}00${minSeconds}` : `12${delimiter}00${minSeconds} AM`;\n        }\n        if (maxTime === '') {\n            const maxSeconds = includeSeconds ? `${delimiter}59` : '';\n            maxTime = is24Hour ? `23${delimiter}59${maxSeconds}` : `11${delimiter}59${maxSeconds} PM`;\n        }\n        const timeRegex = this.getRegExp();\n        this.state = {\n            isInvalid: false,\n            isTimeOptionsOpen: isOpen,\n            timeState: parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds),\n            focusedIndex: null,\n            scrollIndex: 0,\n            timeRegex,\n            minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds),\n            maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n        };\n    }\n    componentDidMount() {\n        document.addEventListener('mousedown', this.onDocClick);\n        document.addEventListener('touchstart', this.onDocClick);\n        document.addEventListener('keydown', this.handleGlobalKeys);\n        this.setState({ isInvalid: !this.isValid(this.state.timeState) });\n    }\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.onDocClick);\n        document.removeEventListener('touchstart', this.onDocClick);\n        document.removeEventListener('keydown', this.handleGlobalKeys);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const { timeState, isTimeOptionsOpen, isInvalid, timeRegex } = this.state;\n        const { time, is24Hour, delimiter, includeSeconds, isOpen, minTime, maxTime } = this.props;\n        if (prevProps.isOpen !== isOpen) {\n            this.onToggle(isOpen);\n        }\n        if (isTimeOptionsOpen && !prevState.isTimeOptionsOpen && timeState && !isInvalid) {\n            this.scrollToSelection(timeState);\n        }\n        if (delimiter !== prevProps.delimiter) {\n            this.setState({\n                timeRegex: this.getRegExp()\n            });\n        }\n        if (time !== '' && time !== prevProps.time) {\n            const parsedTime = parseTime(time, timeRegex, delimiter, !is24Hour, includeSeconds);\n            this.setState({\n                timeState: parsedTime,\n                isInvalid: !this.isValid(parsedTime)\n            });\n        }\n        if (minTime !== '' && minTime !== prevProps.minTime) {\n            this.setState({\n                minTimeState: parseTime(minTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n        if (maxTime !== '' && maxTime !== prevProps.maxTime) {\n            this.setState({\n                maxTimeState: parseTime(maxTime, timeRegex, delimiter, !is24Hour, includeSeconds)\n            });\n        }\n    }\n    render() {\n        const _a = this.props, { 'aria-label': ariaLabel, isDisabled, className, placeholder, id, menuAppendTo, is24Hour, invalidFormatErrorMessage, invalidMinMaxErrorMessage, stepMinutes, width, delimiter, inputProps, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        onChange, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        setIsOpen, \n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        isOpen, time, validateTime, minTime, maxTime, includeSeconds, \n        /* eslint-enable @typescript-eslint/no-unused-vars */\n        removeFindDomNode, zIndex } = _a, props = __rest(_a, ['aria-label', \"isDisabled\", \"className\", \"placeholder\", \"id\", \"menuAppendTo\", \"is24Hour\", \"invalidFormatErrorMessage\", \"invalidMinMaxErrorMessage\", \"stepMinutes\", \"width\", \"delimiter\", \"inputProps\", \"onChange\", \"setIsOpen\", \"isOpen\", \"time\", \"validateTime\", \"minTime\", \"maxTime\", \"includeSeconds\", \"removeFindDomNode\", \"zIndex\"]);\n        const { timeState, isTimeOptionsOpen, isInvalid, minTimeState, maxTimeState } = this.state;\n        const style = { '--pf-c-date-picker__input--c-form-control--Width': width };\n        const options = makeTimeOptions(stepMinutes, !is24Hour, delimiter, minTimeState, maxTimeState, includeSeconds);\n        const isValidFormat = this.isValidFormat(timeState);\n        const randomId = id || getUniqueId('time-picker');\n        const getParentElement = () => {\n            if (this.baseComponentRef && this.baseComponentRef.current) {\n                return this.baseComponentRef.current.parentElement;\n            }\n            return null;\n        };\n        const menuContainer = (React.createElement(Menu, { ref: this.menuRef, isScrollable: true },\n            React.createElement(MenuContent, { maxMenuHeight: \"200px\" },\n                React.createElement(MenuList, { \"aria-label\": ariaLabel }, options.map((option, index) => (React.createElement(MenuItem, { onClick: this.onSelect, key: option, id: `${randomId}-option-${index}` }, option)))))));\n        const textInput = (React.createElement(TextInput, Object.assign({ \"aria-haspopup\": \"menu\", className: css(formStyles.formControl), id: `${randomId}-input`, \"aria-label\": ariaLabel, validated: isInvalid ? 'error' : 'default', placeholder: placeholder, value: timeState || '', type: \"text\", iconVariant: \"clock\", onClick: this.onInputClick, onChange: this.onInputChange, autoComplete: \"off\", isDisabled: isDisabled, ref: this.inputRef }, inputProps)));\n        let calculatedAppendTo;\n        switch (menuAppendTo) {\n            case 'inline':\n                calculatedAppendTo = () => this.toggleRef.current;\n                break;\n            case 'parent':\n                calculatedAppendTo = getParentElement;\n                break;\n            default:\n                calculatedAppendTo = menuAppendTo;\n        }\n        return (React.createElement(\"div\", { ref: this.baseComponentRef, className: css(datePickerStyles.datePicker, className) },\n            React.createElement(\"div\", Object.assign({ className: css(datePickerStyles.datePickerInput), style: style }, props),\n                React.createElement(InputGroup, null,\n                    React.createElement(\"div\", { id: randomId },\n                        React.createElement(\"div\", { ref: this.toggleRef, style: { paddingLeft: '0' } },\n                            React.createElement(Popper, { appendTo: calculatedAppendTo, trigger: textInput, popper: menuContainer, isVisible: isTimeOptionsOpen, removeFindDomNode: removeFindDomNode, zIndex: zIndex })))),\n                isInvalid && (React.createElement(\"div\", { className: css(datePickerStyles.datePickerHelperText, datePickerStyles.modifiers.error) }, !isValidFormat ? invalidFormatErrorMessage : invalidMinMaxErrorMessage)))));\n    }\n}\nTimePicker.displayName = 'TimePicker';\nTimePicker.defaultProps = {\n    className: '',\n    isDisabled: false,\n    time: '',\n    is24Hour: false,\n    invalidFormatErrorMessage: 'Invalid time format',\n    invalidMinMaxErrorMessage: 'Invalid time entered',\n    placeholder: 'hh:mm',\n    delimiter: ':',\n    'aria-label': 'Time picker',\n    width: '150px',\n    menuAppendTo: 'inline',\n    stepMinutes: 30,\n    inputProps: {},\n    minTime: '',\n    maxTime: '',\n    isOpen: false,\n    setIsOpen: () => { },\n    removeFindDomNode: false,\n    zIndex: 9999\n};\n//# sourceMappingURL=TimePicker.js.map","import { createIcon } from '../createIcon';\n\nexport const CaretUpIconConfig = {\n  name: 'CaretUpIcon',\n  height: 512,\n  width: 320,\n  svgPath: 'M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z',\n  yOffset: 0,\n  xOffset: 0,\n};\n\nexport const CaretUpIcon = createIcon(CaretUpIconConfig);\n\nexport default CaretUpIcon;","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","import type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport type { UserQuery } from \"@keycloak/keycloak-admin-client/lib/resources/users\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { debounce } from \"lodash-es\";\nimport { useCallback, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport type { ComponentProps } from \"../dynamic/components\";\n\ntype UserSelectProps = ComponentProps & {\n  variant?: SelectVariant;\n  isRequired?: boolean;\n};\n\nexport const UserSelect = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isRequired,\n  variant = SelectVariant.typeaheadMulti,\n}: UserSelectProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(name!);\n\n  const [open, toggleOpen] = useToggle();\n  const [users, setUsers] = useState<(UserRepresentation | undefined)[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  const debounceFn = useCallback(debounce(setSearch, 1000), []);\n\n  useFetch(\n    () => {\n      const params: UserQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.username = search;\n      }\n\n      if (values?.length && !search) {\n        return Promise.all(\n          values.map((id: string) => adminClient.users.findOne({ id })),\n        );\n      }\n      return adminClient.users.find(params);\n    },\n    setUsers,\n    [search],\n  );\n\n  const convert = (clients: (UserRepresentation | undefined)[]) =>\n    clients\n      .filter((c) => c !== undefined)\n      .map((option) => (\n        <SelectOption\n          key={option!.id}\n          value={option!.id}\n          selected={values?.includes(option!.id!)}\n        >\n          {option!.username}\n        </SelectOption>\n      ));\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      isRequired={isRequired}\n      labelIcon={<HelpItem helpText={helpText!} fieldLabelId={label!} />}\n      fieldId={name!}\n      validated={errors[name!] ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"required\")}\n    >\n      <Controller\n        name={name!}\n        defaultValue={defaultValue}\n        control={control}\n        rules={\n          isRequired && variant === SelectVariant.typeaheadMulti\n            ? { validate: (value) => value.length > 0 }\n            : { required: isRequired }\n        }\n        render={({ field }) => (\n          <Select\n            toggleId={name!}\n            variant={variant}\n            placeholderText={t(\"selectAUser\")}\n            onToggle={toggleOpen}\n            isOpen={open}\n            selections={field.value}\n            onFilter={(_, value) => {\n              debounceFn(value);\n              return convert(users);\n            }}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (variant !== SelectVariant.typeaheadMulti) {\n                field.value.includes(option)\n                  ? field.onChange([])\n                  : field.onChange([option]);\n              } else {\n                const changedValue = field.value.find(\n                  (v: string) => v === option,\n                )\n                  ? field.value.filter((v: string) => v !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }\n              toggleOpen();\n            }}\n            aria-label={t(name!)}\n          >\n            {convert(users)}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup, Radio } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\n\nconst DECISION_STRATEGY = [\"UNANIMOUS\", \"AFFIRMATIVE\", \"CONSENSUS\"] as const;\n\ntype DecisionStrategySelectProps = {\n  helpLabel?: string;\n  isDisabled?: boolean;\n  isLimited?: boolean;\n};\n\nexport const DecisionStrategySelect = ({\n  helpLabel,\n  isDisabled = false,\n  isLimited = false,\n}: DecisionStrategySelectProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"decisionStrategy\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(`${helpLabel || \"decisionStrategyHelp\"}`)}\n          fieldLabelId=\"decisionStrategy\"\n        />\n      }\n      fieldId=\"decisionStrategy\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"decisionStrategy\"\n        data-testid=\"decisionStrategy\"\n        defaultValue={DECISION_STRATEGY[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {(isLimited\n              ? DECISION_STRATEGY.slice(0, 2)\n              : DECISION_STRATEGY\n            ).map((strategy) => (\n              <Radio\n                id={strategy}\n                key={strategy}\n                data-testid={strategy}\n                isChecked={field.value === strategy}\n                isDisabled={isDisabled}\n                name=\"decisionStrategy\"\n                onChange={() => field.onChange(strategy)}\n                label={t(`decisionStrategies.${strategy}`)}\n                className=\"pf-u-mb-md\"\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type {\n  Clients,\n  PolicyQuery,\n} from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport {\n  Controller,\n  ControllerRenderProps,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { adminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport useToggle from \"../../utils/useToggle\";\nimport PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { toResourceDetails } from \"../routes/Resource\";\n\ntype Type = \"resources\" | \"policies\";\n\ntype ResourcesPolicySelectProps = {\n  name: Type;\n  clientId: string;\n  permissionId?: string;\n  variant?: SelectVariant;\n  preSelected?: string;\n  isRequired?: boolean;\n};\n\ntype Policies = {\n  id?: string;\n  name?: string;\n  type?: string;\n};\n\ntype TypeMapping = {\n  [key in Type]: {\n    searchFunction: keyof Pick<Clients, \"listPolicies\" | \"listResources\">;\n    fetchFunction: keyof Pick<\n      Clients,\n      \"getAssociatedPolicies\" | \"getAssociatedResources\"\n    >;\n  };\n};\n\nconst typeMapping: TypeMapping = {\n  resources: {\n    searchFunction: \"listResources\",\n    fetchFunction: \"getAssociatedResources\",\n  },\n  policies: {\n    searchFunction: \"listPolicies\",\n    fetchFunction: \"getAssociatedPolicies\",\n  },\n};\n\nexport const ResourcesPolicySelect = ({\n  name,\n  clientId,\n  permissionId,\n  variant = SelectVariant.typeaheadMulti,\n  preSelected,\n  isRequired = false,\n}: ResourcesPolicySelectProps) => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n\n  const {\n    control,\n    formState: { errors, isDirty },\n  } = useFormContext<PolicyRepresentation>();\n  const [items, setItems] = useState<Policies[]>([]);\n  const [search, setSearch] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [createPolicyDialog, toggleCreatePolicyDialog] = useToggle();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [onUnsavedChangesConfirm, setOnUnsavedChangesConfirm] =\n    useState<() => void>();\n\n  const functions = typeMapping[name];\n\n  const convert = (\n    p: PolicyRepresentation | ResourceRepresentation,\n  ): Policies => ({\n    id: \"_id\" in p ? p._id : \"id\" in p ? p.id : undefined,\n    name: p.name,\n    type: p.type,\n  });\n\n  useFetch(\n    async () => {\n      const params: PolicyQuery = Object.assign(\n        { id: clientId, first: 0, max: 10, permission: \"false\" },\n        search === \"\" ? null : { name: search },\n      );\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        adminClient.clients[functions.searchFunction](params),\n        permissionId\n          ? adminClient.clients[functions.fetchFunction]({\n              id: clientId,\n              permissionId,\n            })\n          : Promise.resolve([]),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setItems(\n        policies\n          .flat()\n          .filter(\n            (r): r is PolicyRepresentation | ResourceRepresentation =>\n              typeof r !== \"string\",\n          )\n          .map(convert)\n          .filter(\n            ({ id }, index, self) =>\n              index === self.findIndex(({ id: otherId }) => id === otherId),\n          ),\n      );\n    },\n    [search],\n  );\n\n  const [toggleUnsavedChangesDialog, UnsavedChangesConfirm] = useConfirmDialog({\n    titleKey: t(\"unsavedChangesTitle\"),\n    messageKey: t(\"unsavedChangesConfirm\"),\n    continueButtonLabel: t(\"continue\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: () => onUnsavedChangesConfirm?.(),\n  });\n\n  const to = (policy: Policies) =>\n    name === \"policies\"\n      ? toPolicyDetails({\n          realm: realm,\n          id: clientId,\n          policyId: policy.id!,\n          policyType: policy.type!,\n        })\n      : toResourceDetails({\n          realm,\n          id: clientId,\n          resourceId: policy.id!,\n        });\n\n  const toSelectOptions = () =>\n    items.map((p) => (\n      <SelectOption key={p.id} value={p.id}>\n        {p.name}\n      </SelectOption>\n    ));\n\n  const toChipGroupItems = (\n    field: ControllerRenderProps<PolicyRepresentation, Type>,\n  ) => {\n    return (\n      <ChipGroup>\n        {field.value?.map((permissionId) => {\n          const item = items.find(\n            (permission) => permission.id === permissionId,\n          );\n\n          if (!item) return;\n\n          const route = to(item);\n          return (\n            <Chip\n              key={item.id}\n              onClick={() => {\n                field.onChange(field.value?.filter((id) => id !== item.id));\n              }}\n            >\n              <Link\n                to={route}\n                onClick={(event) => {\n                  if (isDirty) {\n                    event.preventDefault();\n                    setOnUnsavedChangesConfirm(() => () => navigate(route));\n                    toggleUnsavedChangesDialog();\n                  }\n                }}\n              >\n                {item.name}\n              </Link>\n            </Chip>\n          );\n        })}\n      </ChipGroup>\n    );\n  };\n\n  return (\n    <>\n      <UnsavedChangesConfirm />\n      {createPolicyDialog && (\n        <NewPolicyDialog\n          policyProviders={policyProviders}\n          onSelect={(p) => {\n            navigate(\n              toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n            );\n          }}\n          toggleDialog={toggleCreatePolicyDialog}\n        />\n      )}\n      <Controller\n        name={name}\n        defaultValue={preSelected ? [preSelected] : []}\n        control={control}\n        rules={{ validate: (value) => !isRequired || value!.length > 0 }}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            variant={variant}\n            onToggle={setOpen}\n            onFilter={(_, filter) => {\n              setSearch(filter);\n              return toSelectOptions();\n            }}\n            onClear={() => {\n              field.onChange([]);\n              setSearch(\"\");\n            }}\n            selections={field.value}\n            onSelect={(_, selectedValue) => {\n              const option = selectedValue.toString();\n              if (variant === SelectVariant.typeaheadMulti) {\n                const changedValue = field.value?.find(\n                  (p: string) => p === option,\n                )\n                  ? field.value.filter((p: string) => p !== option)\n                  : [...field.value!, option];\n                field.onChange(changedValue);\n              } else {\n                field.onChange([option]);\n              }\n\n              setSearch(\"\");\n            }}\n            isOpen={open}\n            aria-label={t(name)}\n            isDisabled={!!preSelected}\n            validated={errors[name] ? \"error\" : \"default\"}\n            typeAheadAriaLabel={t(name)}\n            chipGroupComponent={toChipGroupItems(field)}\n            footer={\n              name === \"policies\" ? (\n                <Button\n                  variant=\"link\"\n                  isInline\n                  onClick={() => {\n                    if (isDirty) {\n                      setOpen(false);\n                      setOnUnsavedChangesConfirm(\n                        () => toggleCreatePolicyDialog,\n                      );\n                      toggleUnsavedChangesDialog();\n                    } else {\n                      toggleCreatePolicyDialog();\n                    }\n                  }}\n                >\n                  {t(\"createPolicy\")}\n                </Button>\n              ) : undefined\n            }\n          >\n            {toSelectOptions()}\n          </Select>\n        )}\n      />\n    </>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { useParams } from \"../../../utils/useParams\";\nimport type { PolicyDetailsParams } from \"../../routes/PolicyDetails\";\nimport { DecisionStrategySelect } from \"../DecisionStrategySelect\";\nimport { ResourcesPolicySelect } from \"../ResourcesPolicySelect\";\n\nexport const Aggregate = () => {\n  const { t } = useTranslation();\n  const { id } = useParams<PolicyDetailsParams>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"applyPolicy\")}\n        fieldId=\"policies\"\n        labelIcon={\n          <HelpItem helpText={t(\"applyPolicyHelp\")} fieldLabelId=\"policies\" />\n        }\n      >\n        <ResourcesPolicySelect name=\"policies\" clientId={id} />\n      </FormGroup>\n      <DecisionStrategySelect helpLabel=\"policyDecisionStagey\" />\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { ClientQuery } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { useFetch } from \"../../../utils/useFetch\";\n\nexport const Client = () => {\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const values: string[] | undefined = getValues(\"clients\");\n\n  const [open, setOpen] = useState(false);\n  const [clients, setClients] = useState<ClientRepresentation[]>([]);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    async () => {\n      const params: ClientQuery = {\n        max: 20,\n      };\n      if (search) {\n        params.clientId = search;\n        params.search = true;\n      }\n\n      if (values?.length && !search) {\n        return await Promise.all(\n          values.map(\n            (id: string) =>\n              adminClient.clients.findOne({ id }) as ClientRepresentation,\n          ),\n        );\n      }\n      return await adminClient.clients.find(params);\n    },\n    setClients,\n    [search],\n  );\n\n  const convert = (clients: ClientRepresentation[]) =>\n    clients.map((option) => (\n      <SelectOption\n        key={option.id!}\n        value={option.id}\n        selected={values?.includes(option.id!)}\n      >\n        {option.clientId}\n      </SelectOption>\n    ));\n\n  return (\n    <FormGroup\n      label={t(\"clients\")}\n      labelIcon={\n        <HelpItem helpText={t(\"policyClientHelp\")} fieldLabelId=\"client\" />\n      }\n      fieldId=\"clients\"\n      helperTextInvalid={t(\"requiredClient\")}\n      validated={errors.clients ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"clients\"\n        defaultValue={[]}\n        control={control}\n        rules={{\n          validate: (value) => value.length > 0,\n        }}\n        render={({ field }) => (\n          <Select\n            toggleId=\"clients\"\n            variant={SelectVariant.typeaheadMulti}\n            typeAheadAriaLabel={t(\"clients\")}\n            onToggle={(open) => setOpen(open)}\n            isOpen={open}\n            selections={field.value}\n            aria-label={t(\"selectClients\")}\n            onFilter={(_, value) => {\n              setSearch(value);\n              return convert(clients);\n            }}\n            onSelect={(_, v) => {\n              const option = v.toString();\n              if (field.value.includes(option)) {\n                field.onChange(\n                  field.value.filter((item: string) => item !== option),\n                );\n              } else {\n                field.onChange([...field.value, option]);\n              }\n              setOpen(false);\n            }}\n          >\n            {convert(clients)}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownDirection,\n  DropdownItem,\n  DropdownToggle,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  CaretDownIcon,\n  CaretUpIcon,\n  FilterIcon,\n} from \"@patternfly/react-icons\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport {\n  ClientScopeType,\n  clientScopeTypesDropdown,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useToggle from \"../../utils/useToggle\";\nimport { getProtocolName } from \"../utils\";\n\nimport \"./client-scopes.css\";\n\nexport type AddScopeDialogProps = {\n  clientScopes: ClientScopeRepresentation[];\n  clientName?: string;\n  open: boolean;\n  toggleDialog: () => void;\n  onAdd: (\n    scopes: { scope: ClientScopeRepresentation; type?: ClientScopeType }[],\n  ) => void;\n  isClientScopesConditionType?: boolean;\n};\n\nenum FilterType {\n  Name = \"Name\",\n  Protocol = \"Protocol\",\n}\n\nenum ProtocolType {\n  All = \"All\",\n  SAML = \"SAML\",\n  OpenIDConnect = \"OpenID Connect\",\n}\n\nexport const AddScopeDialog = ({\n  clientScopes: scopes,\n  clientName,\n  open,\n  toggleDialog,\n  onAdd,\n  isClientScopesConditionType,\n}: AddScopeDialogProps) => {\n  const { t } = useTranslation();\n  const [addToggle, setAddToggle] = useState(false);\n  const [rows, setRows] = useState<ClientScopeRepresentation[]>([]);\n  const [filterType, setFilterType] = useState(FilterType.Name);\n  const [protocolType, setProtocolType] = useState(ProtocolType.All);\n\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n\n  const [isProtocolTypeDropdownOpen, toggleIsProtocolTypeDropdownOpen] =\n    useToggle(false);\n\n  const clientScopes = useMemo(() => {\n    if (protocolType === ProtocolType.OpenIDConnect) {\n      return scopes.filter((item) => item.protocol === \"openid-connect\");\n    } else if (protocolType === ProtocolType.SAML) {\n      return scopes.filter((item) => item.protocol === \"saml\");\n    }\n    return scopes;\n  }, [scopes, filterType, protocolType]);\n\n  const action = (scope: ClientScopeType) => {\n    const scopes = rows.map((row) => {\n      return { scope: row, type: scope };\n    });\n    onAdd(scopes);\n    setAddToggle(false);\n    toggleDialog();\n  };\n\n  const onFilterTypeDropdownSelect = (filterType: string) => {\n    if (filterType === FilterType.Name) {\n      setFilterType(FilterType.Protocol);\n    } else if (filterType === FilterType.Protocol) {\n      setFilterType(FilterType.Name);\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsFilterTypeDropdownOpen();\n  };\n\n  const onProtocolTypeDropdownSelect = (protocolType: string) => {\n    if (protocolType === ProtocolType.SAML) {\n      setProtocolType(ProtocolType.SAML);\n    } else if (protocolType === ProtocolType.OpenIDConnect) {\n      setProtocolType(ProtocolType.OpenIDConnect);\n    } else if (protocolType === ProtocolType.All) {\n      setProtocolType(ProtocolType.All);\n    }\n\n    toggleIsProtocolTypeDropdownOpen();\n  };\n\n  const protocolTypeOptions = [\n    <SelectOption key={1} value={ProtocolType.SAML}>\n      {t(\"protocolTypes.saml\")}\n    </SelectOption>,\n    <SelectOption key={2} value={ProtocolType.OpenIDConnect}>\n      {t(\"protocolTypes.openid-connect\")}\n    </SelectOption>,\n    <SelectOption key={3} value={ProtocolType.All} isPlaceholder>\n      {t(\"protocolTypes.all\")}\n    </SelectOption>,\n  ];\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={\n        isClientScopesConditionType\n          ? t(\"addClientScope\")\n          : t(\"addClientScopesTo\", { clientName })\n      }\n      isOpen={open}\n      onClose={toggleDialog}\n      actions={\n        isClientScopesConditionType\n          ? [\n              <Button\n                id=\"modal-add\"\n                data-testid=\"confirm\"\n                key=\"add\"\n                variant={ButtonVariant.primary}\n                onClick={() => {\n                  const scopes = rows.map((scope) => ({ scope }));\n                  onAdd(scopes);\n                  toggleDialog();\n                }}\n                isDisabled={rows.length === 0}\n              >\n                {t(\"add\")}\n              </Button>,\n              <Button\n                id=\"modal-cancel\"\n                data-testid=\"cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"cancel\")}\n              </Button>,\n            ]\n          : [\n              <Dropdown\n                className=\"keycloak__client-scopes-add__add-dropdown\"\n                id=\"add-dropdown\"\n                key=\"add-dropdown\"\n                direction={DropdownDirection.up}\n                isOpen={addToggle}\n                toggle={\n                  <DropdownToggle\n                    isDisabled={rows.length === 0}\n                    onToggle={() => setAddToggle(!addToggle)}\n                    isPrimary\n                    toggleIndicator={CaretUpIcon}\n                    id=\"add-scope-toggle\"\n                  >\n                    {t(\"add\")}\n                  </DropdownToggle>\n                }\n                dropdownItems={clientScopeTypesDropdown(t, action)}\n              />,\n              <Button\n                id=\"modal-cancel\"\n                key=\"cancel\"\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setRows([]);\n                  toggleDialog();\n                }}\n              >\n                {t(\"cancel\")}\n              </Button>,\n            ]\n      }\n    >\n      <KeycloakDataTable\n        loader={clientScopes}\n        ariaLabelKey=\"chooseAMapperType\"\n        searchPlaceholderKey={\n          filterType === FilterType.Name ? \"searchForClientScope\" : undefined\n        }\n        isSearching={filterType !== FilterType.Name}\n        searchTypeComponent={\n          <Dropdown\n            onSelect={() => {\n              onFilterTypeDropdownSelect(filterType);\n            }}\n            data-testid=\"filter-type-dropdown\"\n            toggle={\n              <DropdownToggle\n                id=\"toggle-id-9\"\n                onToggle={toggleIsFilterTypeDropdownOpen}\n                toggleIndicator={CaretDownIcon}\n                icon={<FilterIcon />}\n              >\n                {filterType}\n              </DropdownToggle>\n            }\n            isOpen={isFilterTypeDropdownOpen}\n            dropdownItems={[\n              <DropdownItem\n                data-testid=\"filter-type-dropdown-item\"\n                key=\"filter-type\"\n              >\n                {filterType === FilterType.Name ? t(\"protocol\") : t(\"name\")}\n              </DropdownItem>,\n            ]}\n          />\n        }\n        toolbarItem={\n          filterType === FilterType.Protocol && (\n            <>\n              <Dropdown\n                onSelect={() => {\n                  onFilterTypeDropdownSelect(filterType);\n                }}\n                data-testid=\"filter-type-dropdown\"\n                toggle={\n                  <DropdownToggle\n                    id=\"toggle-id-9\"\n                    onToggle={toggleIsFilterTypeDropdownOpen}\n                    toggleIndicator={CaretDownIcon}\n                    icon={<FilterIcon />}\n                  >\n                    {filterType}\n                  </DropdownToggle>\n                }\n                isOpen={isFilterTypeDropdownOpen}\n                dropdownItems={[\n                  <DropdownItem\n                    data-testid=\"filter-type-dropdown-item\"\n                    key=\"filter-type\"\n                  >\n                    {t(\"name\")}\n                  </DropdownItem>,\n                ]}\n              />\n              <Select\n                variant={SelectVariant.single}\n                className=\"kc-protocolType-select\"\n                aria-label={t(\"selectOne\")}\n                onToggle={toggleIsProtocolTypeDropdownOpen}\n                onSelect={(_, value) =>\n                  onProtocolTypeDropdownSelect(value.toString())\n                }\n                selections={protocolType}\n                isOpen={isProtocolTypeDropdownOpen}\n              >\n                {protocolTypeOptions}\n              </Select>\n            </>\n          )\n        }\n        canSelectAll\n        onSelect={(rows) => setRows(rows)}\n        columns={[\n          {\n            name: \"name\",\n          },\n          {\n            name: \"protocol\",\n            displayKey: \"protocol\",\n            cellRenderer: (client) =>\n              getProtocolName(t, client.protocol ?? \"openid-connect\"),\n          },\n          {\n            name: \"description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyAddClientScopes\")}\n            instructions={t(\"emptyAddClientScopesInstructions\")}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { useFetch } from \"../../../utils/useFetch\";\nimport useLocaleSort, { mapByKey } from \"../../../utils/useLocaleSort\";\nimport { AddScopeDialog } from \"../../scopes/AddScopeDialog\";\n\nexport type RequiredIdValue = {\n  id: string;\n  required: boolean;\n};\n\nexport const ClientScope = () => {\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<{\n    clientScopes: RequiredIdValue[];\n  }>();\n\n  const [open, setOpen] = useState(false);\n  const [scopes, setScopes] = useState<ClientScopeRepresentation[]>([]);\n  const [selectedScopes, setSelectedScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n\n  const localeSort = useLocaleSort();\n\n  useFetch(\n    () => adminClient.clientScopes.find(),\n    (scopes) => {\n      setSelectedScopes(\n        getValues(\"clientScopes\").map(\n          (s) => scopes.find((c) => c.id === s.id)!,\n        ),\n      );\n      setScopes(localeSort(scopes, mapByKey(\"name\")));\n    },\n    [],\n  );\n\n  return (\n    <FormGroup\n      label={t(\"clientScopes\")}\n      labelIcon={\n        <HelpItem\n          helpText={t(\"clientsClientScopesHelp\")}\n          fieldLabelId=\"clientScopes\"\n        />\n      }\n      fieldId=\"clientScopes\"\n      helperTextInvalid={t(\"requiredClientScope\")}\n      validated={errors.clientScopes ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"clientScopes\"\n        control={control}\n        defaultValue={[]}\n        rules={{\n          validate: (value: RequiredIdValue[]) =>\n            value.filter((c) => c.id).length > 0,\n        }}\n        render={({ field }) => (\n          <>\n            {open && (\n              <AddScopeDialog\n                clientScopes={scopes.filter(\n                  (scope) =>\n                    !field.value\n                      .map((c: RequiredIdValue) => c.id)\n                      .includes(scope.id!),\n                )}\n                isClientScopesConditionType\n                open={open}\n                toggleDialog={() => setOpen(!open)}\n                onAdd={(scopes) => {\n                  setSelectedScopes([\n                    ...selectedScopes,\n                    ...scopes.map((s) => s.scope),\n                  ]);\n                  field.onChange([\n                    ...field.value,\n                    ...scopes\n                      .map((scope) => scope.scope)\n                      .map((item) => ({ id: item.id!, required: false })),\n                  ]);\n                }}\n              />\n            )}\n            <Button\n              data-testid=\"select-scope-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              {t(\"addClientScopes\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedScopes.length > 0 && (\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>{t(\"clientScopeTitle\")}</Th>\n              <Th>{t(\"required\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {selectedScopes.map((scope, index) => (\n              <Tr key={scope.id}>\n                <Td>{scope.name}</Td>\n                <Td>\n                  <Controller\n                    name={`clientScopes.${index}.required`}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <Checkbox\n                        id=\"required\"\n                        data-testid=\"standard\"\n                        name=\"required\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Td>\n                <Td>\n                  <Button\n                    variant=\"link\"\n                    className=\"keycloak__client-authorization__policy-row-remove\"\n                    icon={<MinusCircleIcon />}\n                    onClick={() => {\n                      setValue(\"clientScopes\", [\n                        ...getValues(\"clientScopes\").filter(\n                          (s) => s.id !== scope.id,\n                        ),\n                      ]);\n                      setSelectedScopes([\n                        ...selectedScopes.filter((s) => s.id !== scope.id),\n                      ]);\n                    }}\n                  />\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      )}\n    </FormGroup>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { GroupPickerDialog } from \"../../../components/group/GroupPickerDialog\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useFetch } from \"../../../utils/useFetch\";\n\ntype GroupForm = {\n  groups?: GroupValue[];\n  groupsClaim: string;\n};\n\nexport type GroupValue = {\n  id: string;\n  extendChildren: boolean;\n};\n\nexport const Group = () => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<GroupForm>();\n  const values = getValues(\"groups\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedGroups, setSelectedGroups] = useState<GroupRepresentation[]>(\n    [],\n  );\n\n  useFetch(\n    () => {\n      if (values && values.length > 0)\n        return Promise.all(\n          values.map((g) => adminClient.groups.findOne({ id: g.id })),\n        );\n      return Promise.resolve([]);\n    },\n    (groups) => {\n      const filteredGroup = groups.filter((g) => g) as GroupRepresentation[];\n      setSelectedGroups(filteredGroup);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"groupsClaim\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"groupsClaimHelp\")}\n            fieldLabelId=\"groupsClaim\"\n          />\n        }\n        fieldId=\"groups\"\n      >\n        <KeycloakTextInput\n          type=\"text\"\n          id=\"groupsClaim\"\n          data-testid=\"groupsClaim\"\n          {...register(\"groupsClaim\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"groups\")}\n        labelIcon={\n          <HelpItem helpText={t(\"policyGroupsHelp\")} fieldLabelId=\"groups\" />\n        }\n        fieldId=\"groups\"\n        helperTextInvalid={t(\"requiredGroups\")}\n        validated={errors.groups ? \"error\" : \"default\"}\n        isRequired\n      >\n        <Controller\n          name=\"groups\"\n          control={control}\n          defaultValue={[]}\n          rules={{\n            validate: (value?: GroupValue[]) =>\n              value && value.filter(({ id }) => id).length > 0,\n          }}\n          render={({ field }) => (\n            <>\n              {open && (\n                <GroupPickerDialog\n                  type=\"selectMany\"\n                  text={{\n                    title: \"addGroupsToGroupPolicy\",\n                    ok: \"add\",\n                  }}\n                  onConfirm={(groups) => {\n                    field.onChange([\n                      ...(field.value || []),\n                      ...(groups || []).map(({ id }) => ({ id })),\n                    ]);\n                    setSelectedGroups([...selectedGroups, ...(groups || [])]);\n                    setOpen(false);\n                  }}\n                  onClose={() => {\n                    setOpen(false);\n                  }}\n                  filterGroups={selectedGroups}\n                />\n              )}\n              <Button\n                data-testid=\"select-group-button\"\n                variant=\"secondary\"\n                onClick={() => {\n                  setOpen(true);\n                }}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </>\n          )}\n        />\n        {selectedGroups.length > 0 && (\n          <TableComposable variant=\"compact\">\n            <Thead>\n              <Tr>\n                <Th>{t(\"groups\")}</Th>\n                <Th>{t(\"extendToChildren\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {selectedGroups.map((group, index) => (\n                <Tr key={group.id}>\n                  <Td>{group.path}</Td>\n                  <Td>\n                    <Controller\n                      name={`groups.${index}.extendChildren`}\n                      defaultValue={false}\n                      control={control}\n                      render={({ field }) => (\n                        <Checkbox\n                          id=\"extendChildren\"\n                          data-testid=\"standard\"\n                          name=\"extendChildren\"\n                          isChecked={field.value}\n                          onChange={field.onChange}\n                          isDisabled={group.subGroupCount === 0}\n                        />\n                      )}\n                    />\n                  </Td>\n                  <Td>\n                    <Button\n                      variant=\"link\"\n                      className=\"keycloak__client-authorization__policy-row-remove\"\n                      icon={<MinusCircleIcon />}\n                      onClick={() => {\n                        setValue(\"groups\", [\n                          ...(values || []).filter(({ id }) => id !== group.id),\n                        ]);\n                        setSelectedGroups([\n                          ...selectedGroups.filter(({ id }) => id !== group.id),\n                        ]);\n                      }}\n                    />\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        )}\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\n\nimport { HelpItem } from \"ui-shared\";\n\nexport const JavaScript = () => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"code\")}\n      labelIcon={\n        <HelpItem helpText={t(\"policyCodeHelp\")} fieldLabelId=\"code\" />\n      }\n      fieldId=\"code\"\n      isRequired\n    >\n      <Controller\n        name=\"code\"\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id=\"code\"\n            data-testid=\"code\"\n            onChange={field.onChange}\n            code={field.value}\n            height=\"600px\"\n            language={Language.javascript}\n            isReadOnly={true}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Radio } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"ui-shared\";\n\nconst LOGIC_TYPES = [\"POSITIVE\", \"NEGATIVE\"] as const;\n\ntype LogicSelectorProps = {\n  isDisabled: boolean;\n};\n\nexport const LogicSelector = ({ isDisabled }: LogicSelectorProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(\"logic\")}\n      labelIcon={<HelpItem helpText={t(\"logicHelp\")} fieldLabelId=\"logic\" />}\n      fieldId=\"logic\"\n      hasNoPaddingTop\n    >\n      <Controller\n        name=\"logic\"\n        data-testid=\"logic\"\n        defaultValue={LOGIC_TYPES[0]}\n        control={control}\n        render={({ field }) => (\n          <>\n            {LOGIC_TYPES.map((type) => (\n              <Radio\n                id={type}\n                key={type}\n                data-testid={type}\n                isChecked={field.value === type}\n                name=\"logic\"\n                onChange={() => field.onChange(type)}\n                label={t(`logicType.${type.toLowerCase()}`)}\n                className=\"pf-u-mb-md\"\n                isDisabled={isDisabled}\n              />\n            ))}\n          </>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { KeycloakTextArea } from \"../../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype NameDescriptionProps = {\n  prefix: string;\n  isDisabled: boolean;\n};\n\nexport const NameDescription = ({\n  prefix,\n  isDisabled,\n}: NameDescriptionProps) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"name\")}\n        fieldId=\"kc-name\"\n        helperTextInvalid={t(\"required\")}\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        isRequired\n        labelIcon={\n          <HelpItem helpText={t(`${prefix}-nameHelp`)} fieldLabelId=\"name\" />\n        }\n      >\n        <KeycloakTextInput\n          isDisabled={isDisabled}\n          id=\"kc-name\"\n          data-testid=\"name\"\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"description\")}\n        fieldId=\"kc-description\"\n        labelIcon={\n          <HelpItem\n            helpText={t(`${prefix}-descriptionHelp`)}\n            fieldLabelId=\"description\"\n          />\n        }\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"maxLength\", { length: 255 })}\n      >\n        <KeycloakTextArea\n          isDisabled={isDisabled}\n          id=\"kc-description\"\n          data-testid=\"description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\"description\", { maxLength: 255 })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { Checkbox, FormGroup } from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const Regex = () => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"targetClaim\")}\n        fieldId=\"targetClaim\"\n        helperTextInvalid={t(\"required\")}\n        validated={errors.targetClaim ? \"error\" : \"default\"}\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"targetClaimHelp\")}\n            fieldLabelId=\"targetClaim\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          id=\"targetClaim\"\n          data-testid=\"targetClaim\"\n          validated={errors.targetClaim ? \"error\" : \"default\"}\n          {...register(\"targetClaim\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"regexPattern\")}\n        fieldId=\"pattern\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"regexPatternHelp\")}\n            fieldLabelId=\"regexPattern\"\n          />\n        }\n        isRequired\n        validated={errors.pattern ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          id=\"pattern\"\n          data-testid=\"regexPattern\"\n          validated={errors.pattern ? \"error\" : \"default\"}\n          {...register(\"pattern\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"targetContextAttributes\")}\n        fieldId=\"targetContextAttributes\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"targetContextAttributesHelp\")}\n            fieldLabelId=\"targetContextAttributes\"\n          />\n        }\n      >\n        <Controller\n          name=\"targetContextAttributes\"\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Checkbox\n              id=\"targetContextAttributes\"\n              isChecked={field.value}\n              onChange={field.onChange}\n            />\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { Button, Checkbox, FormGroup } from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { AddRoleMappingModal } from \"../../../components/role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../../../components/role-mapping/RoleMapping\";\nimport { useFetch } from \"../../../utils/useFetch\";\nimport type { RequiredIdValue } from \"./ClientScope\";\n\nexport const Role = () => {\n  const { t } = useTranslation();\n  const {\n    control,\n    getValues,\n    setValue,\n    formState: { errors },\n  } = useFormContext<{\n    roles?: RequiredIdValue[];\n  }>();\n  const values = getValues(\"roles\");\n\n  const [open, setOpen] = useState(false);\n  const [selectedRoles, setSelectedRoles] = useState<Row[]>([]);\n\n  useFetch(\n    async () => {\n      if (values && values.length > 0) {\n        const roles = await Promise.all(\n          values.map((r) => adminClient.roles.findOneById({ id: r.id })),\n        );\n        return Promise.all(\n          roles.map(async (role) => ({\n            role: role!,\n            client: role!.clientRole\n              ? await adminClient.clients.findOne({\n                  id: role?.containerId!,\n                })\n              : undefined,\n          })),\n        );\n      }\n      return Promise.resolve([]);\n    },\n    setSelectedRoles,\n    [],\n  );\n\n  return (\n    <FormGroup\n      label={t(\"roles\")}\n      labelIcon={\n        <HelpItem helpText={t(\"policyRolesHelp\")} fieldLabelId=\"roles\" />\n      }\n      fieldId=\"roles\"\n      helperTextInvalid={t(\"requiredRoles\")}\n      validated={errors.roles ? \"error\" : \"default\"}\n      isRequired\n    >\n      <Controller\n        name=\"roles\"\n        control={control}\n        defaultValue={[]}\n        rules={{\n          validate: (value?: RequiredIdValue[]) =>\n            value && value.filter((c) => c.id).length > 0,\n        }}\n        render={({ field }) => (\n          <>\n            {open && (\n              <AddRoleMappingModal\n                id=\"role\"\n                type=\"roles\"\n                onAssign={(rows) => {\n                  field.onChange([\n                    ...(field.value || []),\n                    ...rows.map((row) => ({ id: row.role.id })),\n                  ]);\n                  setSelectedRoles([...selectedRoles, ...rows]);\n                  setOpen(false);\n                }}\n                onClose={() => {\n                  setOpen(false);\n                }}\n                isLDAPmapper\n              />\n            )}\n            <Button\n              data-testid=\"select-role-button\"\n              variant=\"secondary\"\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              {t(\"addRoles\")}\n            </Button>\n          </>\n        )}\n      />\n      {selectedRoles.length > 0 && (\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th>{t(\"roles\")}</Th>\n              <Th>{t(\"required\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {selectedRoles.map((row, index) => (\n              <Tr key={row.role.id}>\n                <Td>\n                  <ServiceRole role={row.role} client={row.client} />\n                </Td>\n                <Td>\n                  <Controller\n                    name={`roles.${index}.required`}\n                    defaultValue={false}\n                    control={control}\n                    render={({ field }) => (\n                      <Checkbox\n                        id=\"required\"\n                        data-testid=\"standard\"\n                        name=\"required\"\n                        isChecked={field.value}\n                        onChange={field.onChange}\n                      />\n                    )}\n                  />\n                </Td>\n                <Td>\n                  <Button\n                    variant=\"link\"\n                    className=\"keycloak__client-authorization__policy-row-remove\"\n                    icon={<MinusCircleIcon />}\n                    onClick={() => {\n                      setValue(\"roles\", [\n                        ...(values || []).filter((s) => s.id !== row.role.id),\n                      ]);\n                      setSelectedRoles([\n                        ...selectedRoles.filter(\n                          (s) => s.role.id !== row.role.id,\n                        ),\n                      ]);\n                    }}\n                  />\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      )}\n    </FormGroup>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  DatePicker,\n  Flex,\n  FlexItem,\n  FormGroup,\n  NumberInput,\n  Radio,\n  Split,\n  SplitItem,\n  TimePicker,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\n\nimport { HelpItem } from \"ui-shared\";\n\nconst DATE_TIME_FORMAT = /(\\d\\d\\d\\d-\\d\\d-\\d\\d)? (\\d\\d?):(\\d\\d?)/;\nconst padDateSegment = (value: number) => value.toString().padStart(2, \"0\");\n\nconst DateTime = ({ name }: { name: string }) => {\n  const { control } = useFormContext();\n\n  const parseDate = (value: string, date?: Date): string => {\n    if (!date) {\n      return value;\n    }\n\n    const parts = value.match(DATE_TIME_FORMAT);\n    const parsedDate = [\n      date.getFullYear(),\n      padDateSegment(date.getMonth() + 1),\n      padDateSegment(date.getDate()),\n    ].join(\"-\");\n\n    return `${parsedDate} ${parts ? parts[2] : \"00\"}:${\n      parts ? parts[3] : \"00\"\n    }:00`;\n  };\n\n  const parseTime = (\n    value: string,\n    hour?: number | null,\n    minute?: number | null,\n  ): string => {\n    const parts = value.match(DATE_TIME_FORMAT);\n    if (minute !== undefined && minute !== null) {\n      return `${parts ? parts[1] : \"\"} ${hour}:${\n        minute < 10 ? `0${minute}` : minute\n      }:00`;\n    }\n    return value;\n  };\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      rules={{ required: true }}\n      render={({ field }) => {\n        const dateTime = field.value.match(DATE_TIME_FORMAT) || [\n          \"\",\n          \"\",\n          \"0\",\n          \"00\",\n        ];\n        return (\n          <Split hasGutter id={name}>\n            <SplitItem>\n              <DatePicker\n                value={dateTime[1]}\n                onChange={(event, value, date) => {\n                  field.onChange(parseDate(field.value, date));\n                }}\n              />\n            </SplitItem>\n            <SplitItem>\n              <TimePicker\n                time={`${dateTime[2]}:${dateTime[3]}`}\n                onChange={(event, time, hour, minute) =>\n                  field.onChange(parseTime(field.value, hour, minute))\n                }\n                is24Hour\n              />\n            </SplitItem>\n          </Split>\n        );\n      }}\n    />\n  );\n};\n\ntype NumberControlProps = {\n  name: string;\n  min: number;\n  max: number;\n};\n\nconst NumberControl = ({ name, min, max }: NumberControlProps) => {\n  const { control } = useFormContext();\n  const setValue = (newValue: number) => Math.min(newValue, max);\n\n  return (\n    <Controller\n      name={name}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <NumberInput\n          id={name}\n          value={field.value}\n          min={min}\n          max={max}\n          onPlus={() => field.onChange(Number(field.value) + 1)}\n          onMinus={() => field.onChange(Number(field.value) - 1)}\n          onChange={(event) => {\n            const newValue = Number(event.currentTarget.value);\n            field.onChange(setValue(!isNaN(newValue) ? newValue : 0));\n          }}\n        />\n      )}\n    />\n  );\n};\n\nconst FromTo = ({ name, ...rest }: NumberControlProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={<HelpItem helpText={t(`${name}Help`)} fieldLabelId={name} />}\n    >\n      <Split hasGutter>\n        <SplitItem>\n          <NumberControl name={name} {...rest} />\n        </SplitItem>\n        <SplitItem>{t(\"to\")}</SplitItem>\n        <SplitItem>\n          <NumberControl name={`${name}End`} {...rest} />\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n\nexport const Time = () => {\n  const { t } = useTranslation();\n  const {\n    getValues,\n    formState: { errors },\n  } = useFormContext();\n  const [repeat, setRepeat] = useState(getValues(\"month\"));\n  return (\n    <>\n      <FormGroup\n        label={t(\"repeat\")}\n        fieldId=\"repeat\"\n        labelIcon={\n          <HelpItem helpText={t(\"repeatHelp\")} fieldLabelId=\"repeat\" />\n        }\n      >\n        <Flex>\n          <FlexItem>\n            <Radio\n              id=\"notRepeat\"\n              data-testid=\"notRepeat\"\n              isChecked={!repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(false)}\n              label={t(\"notRepeat\")}\n              className=\"pf-u-mb-md\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              id=\"repeat\"\n              data-testid=\"repeat\"\n              isChecked={repeat}\n              name=\"repeat\"\n              onChange={() => setRepeat(true)}\n              label={t(\"repeat\")}\n              className=\"pf-u-mb-md\"\n            />\n          </FlexItem>\n        </Flex>\n      </FormGroup>\n      {repeat && (\n        <>\n          <FromTo name=\"month\" min={1} max={12} />\n          <FromTo name=\"dayMonth\" min={1} max={31} />\n          <FromTo name=\"hour\" min={0} max={23} />\n          <FromTo name=\"minute\" min={0} max={59} />\n        </>\n      )}\n      <FormGroup\n        label={t(\"startTime\")}\n        fieldId=\"notBefore\"\n        labelIcon={\n          <HelpItem helpText={t(\"startTimeHelp\")} fieldLabelId=\"startTime\" />\n        }\n        isRequired\n        helperTextInvalid={t(\"required\")}\n        validated={\n          errors.notBefore ? ValidatedOptions.error : ValidatedOptions.default\n        }\n      >\n        <DateTime name=\"notBefore\" />\n      </FormGroup>\n      <FormGroup\n        label={t(\"expireTime\")}\n        fieldId=\"notOnOrAfter\"\n        labelIcon={\n          <HelpItem helpText={t(\"expireTimeHelp\")} fieldLabelId=\"expireTime\" />\n        }\n        isRequired\n        helperTextInvalid={t(\"required\")}\n        validated={\n          errors.notOnOrAfter\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n      >\n        <DateTime name=\"notOnOrAfter\" />\n      </FormGroup>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { UserSelect } from \"../../../components/users/UserSelect\";\n\nexport const User = () => {\n  const { t } = useTranslation();\n  return (\n    <UserSelect\n      name=\"users\"\n      label=\"users\"\n      helpText={t(\"policyUsers\")}\n      defaultValue={[]}\n      isRequired\n    />\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useFetch } from \"../../../utils/useFetch\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { toAuthorizationTab } from \"../../routes/AuthenticationTab\";\nimport {\n  PolicyDetailsParams,\n  toPolicyDetails,\n} from \"../../routes/PolicyDetails\";\nimport { Aggregate } from \"./Aggregate\";\nimport { Client } from \"./Client\";\nimport { ClientScope, RequiredIdValue } from \"./ClientScope\";\nimport { Group, GroupValue } from \"./Group\";\nimport { JavaScript } from \"./JavaScript\";\nimport { LogicSelector } from \"./LogicSelector\";\nimport { NameDescription } from \"./NameDescription\";\nimport { Regex } from \"./Regex\";\nimport { Role } from \"./Role\";\nimport { Time } from \"./Time\";\nimport { User } from \"./User\";\n\nimport \"./policy-details.css\";\n\ntype Policy = Omit<PolicyRepresentation, \"roles\"> & {\n  groups?: GroupValue[];\n  clientScopes?: RequiredIdValue[];\n  roles?: RequiredIdValue[];\n};\n\nconst COMPONENTS: {\n  [index: string]: () => JSX.Element;\n} = {\n  aggregate: Aggregate,\n  client: Client,\n  user: User,\n  \"client-scope\": ClientScope,\n  group: Group,\n  regex: Regex,\n  role: Role,\n  time: Time,\n  js: JavaScript,\n} as const;\n\nexport const isValidComponentType = (value: string) => value in COMPONENTS;\n\nexport default function PolicyDetails() {\n  const { t } = useTranslation();\n  const { id, realm, policyId, policyType } = useParams<PolicyDetailsParams>();\n  const navigate = useNavigate();\n  const form = useForm();\n  const { reset, handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const [policy, setPolicy] = useState<PolicyRepresentation>();\n  const isDisabled = policyType === \"js\";\n\n  useFetch(\n    async () => {\n      if (policyId) {\n        const result = await Promise.all([\n          adminClient.clients.findOnePolicy({\n            id,\n            type: policyType,\n            policyId,\n          }) as PolicyRepresentation | undefined,\n          adminClient.clients.getAssociatedPolicies({\n            id,\n            permissionId: policyId,\n          }),\n        ]);\n\n        if (!result[0]) {\n          throw new Error(t(\"notFound\"));\n        }\n\n        return {\n          policy: result[0],\n          policies: result[1].map((p) => p.id),\n        };\n      }\n      return {};\n    },\n    ({ policy, policies }) => {\n      reset({ ...policy, policies });\n      setPolicy(policy);\n    },\n    [id, policyType, policyId],\n  );\n\n  const onSubmit = async (policy: Policy) => {\n    // remove entries that only have the boolean set and no id\n    policy.groups = policy.groups?.filter((g) => g.id);\n    policy.clientScopes = policy.clientScopes?.filter((c) => c.id);\n    policy.roles = policy.roles\n      ?.filter((r) => r.id)\n      .map((r) => ({ ...r, required: r.required || false }));\n\n    try {\n      if (policyId) {\n        await adminClient.clients.updatePolicy(\n          { id, type: policyType, policyId },\n          policy,\n        );\n      } else {\n        const result = await adminClient.clients.createPolicy(\n          { id, type: policyType },\n          policy,\n        );\n        navigate(\n          toPolicyDetails({\n            realm,\n            id,\n            policyType,\n            policyId: result.id!,\n          }),\n        );\n      }\n      addAlert(\n        t((policyId ? \"update\" : \"create\") + \"PolicySuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"policySaveError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    messageKey: \"deletePolicyConfirm\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id,\n          policyId,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        navigate(toAuthorizationTab({ realm, clientId: id, tab: \"policies\" }));\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (policyId && !policy) {\n    return <KeycloakSpinner />;\n  }\n\n  function getComponentType() {\n    return isValidComponentType(policyType)\n      ? COMPONENTS[policyType]\n      : COMPONENTS[\"js\"];\n  }\n\n  const ComponentType = getComponentType();\n\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        titleKey={\n          policyId ? policy?.name! : t(\"createPolicyOfType\", { policyType })\n        }\n        dropdownItems={\n          policyId\n            ? [\n                <DropdownItem\n                  key=\"delete\"\n                  data-testid=\"delete-policy\"\n                  onClick={() => toggleDeleteDialog()}\n                >\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n      />\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          onSubmit={handleSubmit(onSubmit)}\n          role=\"anyone\" // if you get this far it means you have access\n        >\n          <FormProvider {...form}>\n            <NameDescription isDisabled={isDisabled} prefix=\"policy\" />\n            <ComponentType />\n            <LogicSelector isDisabled={isDisabled} />\n          </FormProvider>\n          <ActionGroup>\n            <div className=\"pf-u-mt-md\">\n              <Button\n                isDisabled={isDisabled}\n                variant={ButtonVariant.primary}\n                className=\"pf-u-mr-md\"\n                type=\"submit\"\n                data-testid=\"save\"\n              >\n                {t(\"save\")}\n              </Button>\n\n              <Button\n                variant=\"link\"\n                data-testid=\"cancel\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAuthorizationTab({\n                      realm,\n                      clientId: id,\n                      tab: \"policies\",\n                    })}\n                  />\n                )}\n              >\n                {t(\"cancel\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormAccess>\n      </PageSection>\n    </>\n  );\n}\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport { isValidComponentType } from \"./policy/PolicyDetails\";\nimport { useMemo } from \"react\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\n\ntype NewPolicyDialogProps = {\n  policyProviders?: PolicyProviderRepresentation[];\n  toggleDialog: () => void;\n  onSelect: (provider: PolicyProviderRepresentation) => void;\n};\n\nexport const NewPolicyDialog = ({\n  policyProviders,\n  onSelect,\n  toggleDialog,\n}: NewPolicyDialogProps) => {\n  const { t } = useTranslation();\n  const localeSort = useLocaleSort();\n\n  const sortedPolicies = useMemo(\n    () =>\n      policyProviders ? localeSort(policyProviders, mapByKey(\"name\")) : [],\n    [policyProviders],\n  );\n\n  return (\n    <Modal\n      aria-label={t(\"createPolicy\")}\n      variant={ModalVariant.medium}\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"chooseAPolicyType\")}</Text>\n          <Text>{t(\"chooseAPolicyTypeInstructions\")}</Text>\n        </TextContent>\n      }\n      isOpen\n      onClose={toggleDialog}\n    >\n      <TableComposable aria-label={t(\"policies\")} variant=\"compact\">\n        <Thead>\n          <Tr>\n            <Th>{t(\"name\")}</Th>\n            <Th>{t(\"description\")}</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {sortedPolicies.map((provider) => (\n            <Tr\n              key={provider.type}\n              data-testid={provider.type}\n              onRowClick={() => onSelect(provider)}\n              isHoverable\n            >\n              <Td>{provider.name}</Td>\n              <Td>\n                {isValidComponentType(provider.type!) &&\n                  t(`policyProvider.${provider.type}`)}\n              </Td>\n            </Tr>\n          ))}\n        </Tbody>\n      </TableComposable>\n    </Modal>\n  );\n};\n"],"names":["amSuffix","pmSuffix","makeTimeOptions","stepMinutes","hour12","delimiter","minTime","maxTime","includeSeconds","res","iter","iterDay","hour","suffix","minutes","timeOption","isWithinMinMax","parseTime","time","timeRegex","is12Hour","date","hours","seconds","secondsWithDelimiter","ampm","validateTime","uppercaseSuffix","validHours","getHours","parts","getMinutes","getSeconds","_a","min24HourTime","convertTo24Hour","selected24HourTime","max24HourTime","regMatches","TimePicker","React","props","event","_b","_c","_d","clickedOnToggle","clickedWithinMenu","isTimeOptionsOpen","focusedIndex","scrollIndex","KeyTypes","increment","prevState","maxIndex","nextIndex","index","menuStyles","indexToFocus","is24Hour","splitTime","option","amPm","baseRegex","minTimeState","maxTimeState","isOpen","isInvalid","timeState","onChange","e","setIsOpen","newTime","minSeconds","maxSeconds","prevProps","parsedTime","ariaLabel","isDisabled","className","placeholder","id","menuAppendTo","invalidFormatErrorMessage","invalidMinMaxErrorMessage","width","inputProps","removeFindDomNode","zIndex","__rest","style","options","isValidFormat","randomId","getUniqueId","getParentElement","menuContainer","Menu","MenuContent","MenuList","MenuItem","textInput","TextInput","css","formStyles","calculatedAppendTo","datePickerStyles","InputGroup","Popper","CaretUpIconConfig","CaretUpIcon","createIcon","reWhitespace","trimmedEndIndex","string","reTrimStart","baseTrim","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","toNumber","value","isSymbol","isObject","other","isBinary","now","root","FUNC_ERROR_TEXT","nativeMax","nativeMin","debounce","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","timeWaiting","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","UserSelect","name","label","helpText","defaultValue","isRequired","variant","SelectVariant","t","useTranslation","control","getValues","errors","useFormContext","values","open","toggleOpen","useToggle","users","setUsers","useState","search","setSearch","debounceFn","useCallback","useFetch","params","adminClient","convert","clients","c","jsx","SelectOption","FormGroup","HelpItem","Controller","field","Select","_","v","changedValue","DECISION_STRATEGY","DecisionStrategySelect","helpLabel","isLimited","Fragment","strategy","Radio","typeMapping","ResourcesPolicySelect","clientId","permissionId","preSelected","realm","useRealm","navigate","useNavigate","isDirty","items","setItems","setOpen","createPolicyDialog","toggleCreatePolicyDialog","policyProviders","setPolicyProviders","onUnsavedChangesConfirm","setOnUnsavedChangesConfirm","functions","p","providers","policies","r","self","otherId","toggleUnsavedChangesDialog","UnsavedChangesConfirm","useConfirmDialog","ButtonVariant","to","policy","toPolicyDetails","toResourceDetails","toSelectOptions","toChipGroupItems","ChipGroup","item","permission","route","Chip","Link","jsxs","NewPolicyDialog","toCreatePolicy","filter","selectedValue","Button","Aggregate","useParams","Client","setClients","AddScopeDialog","scopes","clientName","toggleDialog","onAdd","isClientScopesConditionType","addToggle","setAddToggle","rows","setRows","filterType","setFilterType","protocolType","setProtocolType","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","isProtocolTypeDropdownOpen","toggleIsProtocolTypeDropdownOpen","clientScopes","useMemo","action","scope","row","onFilterTypeDropdownSelect","onProtocolTypeDropdownSelect","protocolTypeOptions","Modal","ModalVariant","Dropdown","DropdownDirection","DropdownToggle","clientScopeTypesDropdown","KeycloakDataTable","CaretDownIcon","FilterIcon","DropdownItem","client","getProtocolName","ListEmptyState","ClientScope","setValue","setScopes","selectedScopes","setSelectedScopes","localeSort","useLocaleSort","s","mapByKey","TableComposable","Thead","Tr","Th","Tbody","Td","Checkbox","MinusCircleIcon","Group","register","selectedGroups","setSelectedGroups","g","groups","filteredGroup","KeycloakTextInput","GroupPickerDialog","group","JavaScript","CodeEditor","Language","LOGIC_TYPES","LogicSelector","type","NameDescription","prefix","ValidatedOptions","KeycloakTextArea","Regex","Role","selectedRoles","setSelectedRoles","roles","role","AddRoleMappingModal","ServiceRole","DATE_TIME_FORMAT","padDateSegment","DateTime","parseDate","minute","dateTime","Split","SplitItem","DatePicker","NumberControl","min","max","newValue","NumberInput","FromTo","rest","Time","repeat","setRepeat","Flex","FlexItem","User","COMPONENTS","isValidComponentType","PolicyDetails","policyId","policyType","form","useForm","reset","handleSubmit","addAlert","addError","useAlerts","setPolicy","onSubmit","AlertVariant","error","toggleDeleteDialog","DeleteConfirm","toAuthorizationTab","KeycloakSpinner","getComponentType","ComponentType","ViewHeader","PageSection","FormAccess","FormProvider","ActionGroup","onSelect","sortedPolicies","TextContent","Text","TextVariants","provider"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7]}