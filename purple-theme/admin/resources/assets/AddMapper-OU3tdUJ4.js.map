{"version":3,"file":"AddMapper-OU3tdUJ4.js","sources":["../../src/identity-providers/add/AddMapperForm.tsx","../../src/identity-providers/add/AddMapper.tsx"],"sourcesContent":["import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport type { IdPMapperRepresentationWithAttributes } from \"./AddMapper\";\n\ntype AddMapperFormProps = {\n  mapperTypes: IdentityProviderMapperRepresentation[];\n  mapperType: IdentityProviderMapperTypeRepresentation;\n  id: string;\n  updateMapperType: (\n    mapperType: IdentityProviderMapperTypeRepresentation,\n  ) => void;\n  form: UseFormReturn<IdPMapperRepresentationWithAttributes>;\n};\n\nexport const AddMapperForm = ({\n  mapperTypes,\n  mapperType,\n  form,\n  id,\n  updateMapperType,\n}: AddMapperFormProps) => {\n  const { t } = useTranslation();\n\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = form;\n\n  const [mapperTypeOpen, setMapperTypeOpen] = useState(false);\n\n  const syncModes = [\"inherit\", \"import\", \"legacy\", \"force\"];\n  const [syncModeOpen, setSyncModeOpen] = useState(false);\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"name\")}\n        labelIcon={\n          <HelpItem helpText={t(\"addIdpMapperNameHelp\")} fieldLabelId=\"name\" />\n        }\n        fieldId=\"kc-name\"\n        isRequired\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          isDisabled={!!id}\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"syncModeOverride\")}\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"syncModeOverrideHelp\")}\n            fieldLabelId=\"syncModeOverride\"\n          />\n        }\n        fieldId=\"syncMode\"\n      >\n        <Controller\n          name=\"config.syncMode\"\n          defaultValue={syncModes[0].toUpperCase()}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"syncMode\"\n              datatest-id=\"syncmode-select\"\n              required\n              direction=\"down\"\n              onToggle={() => setSyncModeOpen(!syncModeOpen)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString().toUpperCase());\n                setSyncModeOpen(false);\n              }}\n              selections={t(`syncModes.${field.value.toLowerCase()}`)}\n              variant={SelectVariant.single}\n              aria-label={t(\"syncMode\")}\n              isOpen={syncModeOpen}\n            >\n              {syncModes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  data-testid={option}\n                  value={option.toUpperCase()}\n                >\n                  {t(`syncModes.${option}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"mapperType\")}\n        labelIcon={\n          <HelpItem helpText={mapperType.helpText} fieldLabelId=\"mapperType\" />\n        }\n        fieldId=\"identityProviderMapper\"\n      >\n        <Controller\n          name=\"identityProviderMapper\"\n          defaultValue={mapperTypes[0].id}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"identityProviderMapper\"\n              data-testid=\"idp-mapper-select\"\n              isDisabled={!!id}\n              required\n              onToggle={() => setMapperTypeOpen(!mapperTypeOpen)}\n              onSelect={(_, value) => {\n                const mapperType =\n                  value as IdentityProviderMapperTypeRepresentation;\n                updateMapperType(mapperType);\n                field.onChange(mapperType.id);\n                setMapperTypeOpen(false);\n              }}\n              selections={mapperType.name}\n              variant={SelectVariant.single}\n              aria-label={t(\"mapperType\")}\n              isOpen={mapperTypeOpen}\n            >\n              {mapperTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  datatest-id={option.id}\n                  key={option.name}\n                  value={option}\n                >\n                  {option.name}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type { IdentityProviderMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperTypeRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  FormGroup,\n  PageSection,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport type { AttributeForm } from \"../../components/key-value-form/AttributeForm\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { useParams } from \"../../utils/useParams\";\nimport {\n  IdentityProviderEditMapperParams,\n  toIdentityProviderEditMapper,\n} from \"../routes/EditMapper\";\nimport { toIdentityProvider } from \"../routes/IdentityProvider\";\nimport { AddMapperForm } from \"./AddMapperForm\";\n\nexport type IdPMapperRepresentationWithAttributes =\n  IdentityProviderMapperRepresentation & AttributeForm;\n\nexport type Role = RoleRepresentation & {\n  clientId?: string;\n};\n\nexport default function AddMapper() {\n  const { t } = useTranslation();\n\n  const form = useForm<IdPMapperRepresentationWithAttributes>({\n    shouldUnregister: true,\n  });\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const localeSort = useLocaleSort();\n\n  const { realm } = useRealm();\n\n  const { id, providerId, alias } =\n    useParams<IdentityProviderEditMapperParams>();\n\n  const [mapperTypes, setMapperTypes] =\n    useState<IdentityProviderMapperTypeRepresentation[]>();\n\n  const [currentMapper, setCurrentMapper] =\n    useState<IdentityProviderMapperTypeRepresentation>();\n\n  const save = async (idpMapper: IdentityProviderMapperRepresentation) => {\n    const mapper = convertFormValuesToObject(idpMapper);\n\n    const identityProviderMapper = {\n      ...mapper,\n      config: {\n        ...mapper.config,\n      },\n      identityProviderAlias: alias!,\n    };\n\n    if (id) {\n      try {\n        await adminClient.identityProviders.updateMapper(\n          {\n            id: id!,\n            alias: alias!,\n          },\n          { ...identityProviderMapper, id },\n        );\n        addAlert(t(\"mapperSaveSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(t(\"mapperSaveError\"), error);\n      }\n    } else {\n      try {\n        const createdMapper = await adminClient.identityProviders.createMapper({\n          identityProviderMapper,\n          alias: alias!,\n        });\n\n        addAlert(t(\"mapperCreateSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProviderEditMapper({\n            realm,\n            alias,\n            providerId: providerId,\n            id: createdMapper.id,\n          }),\n        );\n      } catch (error) {\n        addError(t(\"mapperCreateError\"), error);\n      }\n    }\n  };\n\n  const [toggleDeleteMapperDialog, DeleteMapperConfirm] = useConfirmDialog({\n    titleKey: \"deleteProviderMapper\",\n    messageKey: t(\"deleteMapperConfirm\", {\n      mapper: currentMapper?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.delMapper({\n          alias: alias,\n          id: id!,\n        });\n        addAlert(t(\"deleteMapperSuccess\"), AlertVariant.success);\n        navigate(\n          toIdentityProvider({ providerId, alias, tab: \"mappers\", realm }),\n        );\n      } catch (error) {\n        addError(\"deleteErrorIdentityProvider\", error);\n      }\n    },\n  });\n\n  useFetch(\n    () =>\n      Promise.all([\n        id ? adminClient.identityProviders.findOneMapper({ alias, id }) : null,\n        adminClient.identityProviders.findMapperTypes({ alias }),\n      ]),\n    ([mapper, mapperTypes]) => {\n      const mappers = localeSort(Object.values(mapperTypes), mapByKey(\"name\"));\n      if (mapper) {\n        setCurrentMapper(\n          mappers.find(({ id }) => id === mapper.identityProviderMapper),\n        );\n        setupForm(mapper);\n      } else {\n        setCurrentMapper(mappers[0]);\n      }\n\n      setMapperTypes(mappers);\n    },\n    [],\n  );\n\n  const setupForm = (mapper: IdentityProviderMapperRepresentation) => {\n    convertToFormValues(mapper, form.setValue);\n  };\n\n  if (!mapperTypes || !currentMapper) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <DeleteMapperConfirm />\n      <ViewHeader\n        className=\"kc-add-mapper-title\"\n        titleKey={\n          id\n            ? t(\"editIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n            : t(\"addIdPMapper\", {\n                providerId:\n                  providerId[0].toUpperCase() + providerId.substring(1),\n              })\n        }\n        dropdownItems={\n          id\n            ? [\n                <DropdownItem key=\"delete\" onClick={toggleDeleteMapperDialog}>\n                  {t(\"delete\")}\n                </DropdownItem>,\n              ]\n            : undefined\n        }\n        divider\n      />\n      <FormAccess\n        role=\"manage-identity-providers\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n        className=\"pf-u-mt-lg\"\n      >\n        {id && (\n          <FormGroup\n            label={t(\"id\")}\n            fieldId=\"kc-name\"\n            validated={\n              errors.name ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              value={currentMapper.id}\n              id=\"kc-name\"\n              isDisabled={!!id}\n              validated={\n                errors.name ? ValidatedOptions.error : ValidatedOptions.default\n              }\n              {...register(\"name\")}\n            />\n          </FormGroup>\n        )}\n        {currentMapper.properties && (\n          <>\n            <AddMapperForm\n              form={form}\n              id={id}\n              mapperTypes={mapperTypes}\n              updateMapperType={setCurrentMapper}\n              mapperType={currentMapper}\n            />\n            <FormProvider {...form}>\n              <DynamicComponents properties={currentMapper.properties!} />\n            </FormProvider>\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"new-mapper-save-button\"\n            variant=\"primary\"\n            type=\"submit\"\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"new-mapper-cancel-button\"\n            variant=\"link\"\n            component={(props) => (\n              <Link\n                {...props}\n                to={toIdentityProvider({\n                  realm,\n                  providerId,\n                  alias: alias!,\n                  tab: \"mappers\",\n                })}\n              />\n            )}\n          >\n            {t(\"cancel\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n}\n"],"names":["AddMapperForm","mapperTypes","mapperType","form","id","updateMapperType","useTranslation","control","register","errors","mapperTypeOpen","setMapperTypeOpen","useState","syncModes","syncModeOpen","setSyncModeOpen","jsxs","Fragment","jsx","FormGroup","HelpItem","ValidatedOptions","KeycloakTextInput","Controller","field","Select","_","value","SelectVariant","option","SelectOption","AddMapper","t","useForm","handleSubmit","addAlert","addError","useAlerts","navigate","useNavigate","localeSort","useLocaleSort","realm","useRealm","providerId","alias","useParams","setMapperTypes","currentMapper","setCurrentMapper","save","idpMapper","mapper","convertFormValuesToObject","identityProviderMapper","adminClient","AlertVariant","error","createdMapper","toIdentityProviderEditMapper","toggleDeleteMapperDialog","DeleteMapperConfirm","useConfirmDialog","ButtonVariant","toIdentityProvider","useFetch","mappers","mapByKey","setupForm","convertToFormValues","KeycloakSpinner","PageSection","ViewHeader","DropdownItem","FormAccess","FormProvider","DynamicComponents","ActionGroup","Button","props","Link"],"mappings":"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"}