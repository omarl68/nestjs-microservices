{"version":3,"file":"EventsSection-CbEJ9E3m.js","sources":["../../src/events/ResourceLinks.tsx","../../src/events/AdminEvents.tsx","../../src/events/EventsSection.tsx"],"sourcesContent":["import { ReactElement } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Tooltip } from \"@patternfly/react-core\";\n\nimport type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toClient } from \"../clients/routes/Client\";\nimport { toGroups } from \"../groups/routes/Groups\";\nimport { toClientScope } from \"../client-scopes/routes/ClientScope\";\nimport { toUser } from \"../user/routes/User\";\nimport { toRealmRole } from \"../realm-roles/routes/RealmRole\";\nimport { toFlow } from \"../authentication/routes/Flow\";\n\ntype ResourceLinkProps = {\n  event: AdminEventRepresentation;\n};\n\nconst MAX_TEXT_LENGTH = 38;\nconst Truncate = ({\n  text,\n  children,\n}: {\n  text?: string;\n  children: (text: string) => ReactElement;\n}) => {\n  const definedText = text || \"\";\n  const needsTruncation = definedText.length > MAX_TEXT_LENGTH;\n  const truncatedText = definedText.substring(0, MAX_TEXT_LENGTH);\n  return needsTruncation ? (\n    <Tooltip content={text}>{children(truncatedText + \"â€¦\")}</Tooltip>\n  ) : (\n    children(definedText)\n  );\n};\n\nconst isLinkable = (event: AdminEventRepresentation) => {\n  if (event.operationType === \"DELETE\") {\n    return false;\n  }\n  return (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\" ||\n    event.resourceType === \"GROUP\" ||\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\") ||\n    event.resourceType === \"CLIENT_SCOPE\" ||\n    event.resourceType === \"AUTH_FLOW\" ||\n    event.resourcePath?.startsWith(\"roles-by-id\")\n  );\n};\n\nconst idRegex = new RegExp(\n  /([0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12})/,\n);\n\nconst createLink = (realm: string, event: AdminEventRepresentation) => {\n  const part = idRegex.exec(event.resourcePath!);\n  if (!part) {\n    console.warn(\"event didn't contain a valid link\", event);\n    return \"\";\n  }\n  const id = part[1];\n\n  if (\n    event.resourceType === \"CLIENT\" ||\n    event.resourceType?.startsWith(\"AUTHORIZATION_RESOURCE\")\n  ) {\n    return toClient({\n      realm,\n      clientId: id,\n      tab: event.resourceType === \"CLIENT\" ? \"settings\" : \"authorization\",\n    });\n  }\n\n  if (event.resourceType === \"GROUP\") {\n    return toGroups({ realm, id });\n  }\n\n  if (event.resourceType === \"CLIENT_SCOPE\") {\n    return toClientScope({ realm, id, tab: \"settings\" });\n  }\n\n  if (\n    event.resourceType === \"USER\" ||\n    event.resourceType === \"GROUP_MEMBERSHIP\"\n  ) {\n    return toUser({ realm, id, tab: \"settings\" });\n  }\n\n  if (event.resourceType === \"AUTH_FLOW\") {\n    return toFlow({ realm, id, usedBy: \"-\" });\n  }\n\n  if (event.resourcePath?.startsWith(\"roles-by-id\")) {\n    return toRealmRole({ realm, id, tab: \"details\" });\n  }\n\n  return \"\";\n};\n\nexport const ResourceLink = ({ event }: ResourceLinkProps) => {\n  const { realm } = useRealm();\n  return (\n    <Truncate text={event.resourcePath}>\n      {(text) =>\n        isLinkable(event) ? (\n          <Link to={createLink(realm, event)}>{text}</Link>\n        ) : (\n          <span>{text}</span>\n        )\n      }\n    </Truncate>\n  );\n};\n\nexport const CellResourceLinkRenderer = (\n  adminEvent: AdminEventRepresentation,\n) => <ResourceLink event={adminEvent} />;\n","import type AdminEventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/adminEventRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  cellWidth,\n} from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { PropsWithChildren, useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { TextControl } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../util\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { CellResourceLinkRenderer } from \"./ResourceLinks\";\n\nimport \"./events.css\";\n\ntype DisplayDialogProps = {\n  titleKey: string;\n  onClose: () => void;\n};\n\ntype AdminEventSearchForm = {\n  resourceTypes: string[];\n  operationTypes: string[];\n  resourcePath: string;\n  dateFrom: string;\n  dateTo: string;\n  authClient: string;\n  authUser: string;\n  authRealm: string;\n  authIpAddress: string;\n};\n\nconst defaultValues: AdminEventSearchForm = {\n  resourceTypes: [],\n  operationTypes: [],\n  resourcePath: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  authClient: \"\",\n  authUser: \"\",\n  authRealm: \"\",\n  authIpAddress: \"\",\n};\n\nconst DisplayDialog = ({\n  titleKey,\n  onClose,\n  children,\n}: PropsWithChildren<DisplayDialogProps>) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(titleKey)}\n      isOpen={true}\n      onClose={onClose}\n    >\n      {children}\n    </Modal>\n  );\n};\n\nexport const AdminEvents = () => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const formatDate = useFormatDate();\n  const resourceTypes = serverInfo.enums?.[\"resourceType\"];\n  const operationTypes = serverInfo.enums?.[\"operationType\"];\n\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectResourceTypesOpen, setSelectResourceTypesOpen] = useState(false);\n  const [selectOperationTypesOpen, setSelectOperationTypesOpen] =\n    useState(false);\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<AdminEventSearchForm>\n  >({});\n\n  const [authEvent, setAuthEvent] = useState<AdminEventRepresentation>();\n  const [representationEvent, setRepresentationEvent] =\n    useState<AdminEventRepresentation>();\n\n  const filterLabels: Record<keyof AdminEventSearchForm, string> = {\n    resourceTypes: t(\"resourceTypes\"),\n    operationTypes: t(\"operationTypes\"),\n    resourcePath: t(\"resourcePath\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    authClient: t(\"client\"),\n    authUser: t(\"userId\"),\n    authRealm: t(\"realm\"),\n    authIpAddress: t(\"ipAddress\"),\n  };\n\n  const form = useForm<AdminEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n  const {\n    getValues,\n    reset,\n    formState: { isDirty },\n    control,\n  } = form;\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findAdminEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  function submitSearch() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof AdminEventSearchForm) {\n    const formValues: AdminEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof AdminEventSearchForm,\n    valueToRemove: string,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<AdminEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const code = useMemo(\n    () =>\n      representationEvent?.representation\n        ? prettyPrintJSON(JSON.parse(representationEvent.representation))\n        : \"\",\n    [representationEvent?.representation],\n  );\n\n  return (\n    <>\n      {authEvent && (\n        <DisplayDialog titleKey=\"auth\" onClose={() => setAuthEvent(undefined)}>\n          <Table\n            aria-label=\"authData\"\n            data-testid=\"auth-dialog\"\n            variant={TableVariant.compact}\n            cells={[t(\"attribute\"), t(\"value\")]}\n            rows={[\n              [t(\"realm\"), authEvent.authDetails?.realmId],\n              [t(\"client\"), authEvent.authDetails?.clientId],\n              [t(\"user\"), authEvent.authDetails?.userId],\n              [t(\"ipAddress\"), authEvent.authDetails?.ipAddress],\n            ]}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n        </DisplayDialog>\n      )}\n      {representationEvent && (\n        <DisplayDialog\n          titleKey=\"representation\"\n          data-testid=\"representation-dialog\"\n          onClose={() => setRepresentationEvent(undefined)}\n        >\n          <CodeEditor\n            isLineNumbersVisible\n            isReadOnly\n            code={code}\n            language={Language.json}\n            height=\"8rem\"\n          />\n        </DisplayDialog>\n      )}\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"adminEvents\"\n        toolbarItem={\n          <FormProvider {...form}>\n            <Flex\n              direction={{ default: \"column\" }}\n              spaceItems={{ default: \"spaceItemsNone\" }}\n            >\n              <FlexItem>\n                <DropdownPanel\n                  buttonText={t(\"searchForAdminEvent\")}\n                  setSearchDropdownOpen={setSearchDropdownOpen}\n                  searchDropdownOpen={searchDropdownOpen}\n                  marginRight=\"2.5rem\"\n                  width=\"15vw\"\n                >\n                  <Form\n                    isHorizontal\n                    className=\"keycloak__events_search__form\"\n                    data-testid=\"searchForm\"\n                  >\n                    <FormGroup\n                      label={t(\"resourceTypes\")}\n                      fieldId=\"kc-resourceTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"resourceTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <Select\n                            className=\"keycloak__events_search__type_select\"\n                            name=\"resourceTypes\"\n                            data-testid=\"resource-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectResourceTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(_, selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={(resource) => {\n                              resource.stopPropagation();\n                              field.onChange([]);\n                            }}\n                            isOpen={selectResourceTypesOpen}\n                            aria-labelledby={\"resourceTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(resource) => {\n                                      resource.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {resourceTypes?.map((option) => (\n                              <SelectOption key={option} value={option} />\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"operationTypes\")}\n                      fieldId=\"kc-operationTypes\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"operationTypes\"\n                        control={control}\n                        render={({ field }) => (\n                          <Select\n                            className=\"keycloak__events_search__type_select\"\n                            name=\"operationTypes\"\n                            data-testid=\"operation-types-searchField\"\n                            chipGroupProps={{\n                              numChips: 1,\n                              expandedText: t(\"hide\"),\n                              collapsedText: t(\"showRemaining\"),\n                            }}\n                            variant={SelectVariant.typeaheadMulti}\n                            typeAheadAriaLabel=\"Select\"\n                            onToggle={(isOpen) =>\n                              setSelectOperationTypesOpen(isOpen)\n                            }\n                            selections={field.value}\n                            onSelect={(_, selectedValue) => {\n                              const option = selectedValue.toString();\n                              const changedValue = field.value.includes(option)\n                                ? field.value.filter((item) => item !== option)\n                                : [...field.value, option];\n\n                              field.onChange(changedValue);\n                            }}\n                            onClear={(operation) => {\n                              operation.stopPropagation();\n                              field.onChange([]);\n                            }}\n                            isOpen={selectOperationTypesOpen}\n                            aria-labelledby={\"operationTypes\"}\n                            chipGroupComponent={\n                              <ChipGroup>\n                                {field.value.map((chip) => (\n                                  <Chip\n                                    key={chip}\n                                    onClick={(operation) => {\n                                      operation.stopPropagation();\n                                      field.onChange(\n                                        field.value.filter(\n                                          (val) => val !== chip,\n                                        ),\n                                      );\n                                    }}\n                                  >\n                                    {chip}\n                                  </Chip>\n                                ))}\n                              </ChipGroup>\n                            }\n                          >\n                            {operationTypes?.map((option) => (\n                              <SelectOption key={option} value={option} />\n                            ))}\n                          </Select>\n                        )}\n                      />\n                    </FormGroup>\n                    <TextControl\n                      name=\"resourcePath\"\n                      label={t(\"resourcePath\")}\n                    />\n                    <TextControl name=\"authRealm\" label={t(\"realm\")} />\n                    <TextControl name=\"authClient\" label={t(\"client\")} />\n                    <TextControl name=\"authUser\" label={t(\"user\")} />\n                    <TextControl name=\"authIpAddress\" label={t(\"ipAddress\")} />\n                    <FormGroup\n                      label={t(\"dateFrom\")}\n                      fieldId=\"kc-dateFrom\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateFrom\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateFrom\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <FormGroup\n                      label={t(\"dateTo\")}\n                      fieldId=\"kc-dateTo\"\n                      className=\"keycloak__events_search__form_label\"\n                    >\n                      <Controller\n                        name=\"dateTo\"\n                        control={control}\n                        render={({ field }) => (\n                          <DatePicker\n                            className=\"pf-u-w-100\"\n                            value={field.value}\n                            onChange={(_, value) => field.onChange(value)}\n                            inputProps={{ id: \"kc-dateTo\" }}\n                          />\n                        )}\n                      />\n                    </FormGroup>\n                    <ActionGroup>\n                      <Button\n                        variant={\"primary\"}\n                        onClick={submitSearch}\n                        data-testid=\"search-events-btn\"\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"searchAdminEventsBtn\")}\n                      </Button>\n                      <Button\n                        variant=\"secondary\"\n                        onClick={resetSearch}\n                        isDisabled={!isDirty}\n                      >\n                        {t(\"resetBtn\")}\n                      </Button>\n                    </ActionGroup>\n                  </Form>\n                </DropdownPanel>\n              </FlexItem>\n              <FlexItem>\n                {Object.entries(activeFilters).length > 0 && (\n                  <div className=\"keycloak__searchChips pf-u-ml-md\">\n                    {Object.entries(activeFilters).map((filter) => {\n                      const [key, value] = filter as [\n                        keyof AdminEventSearchForm,\n                        string | string[],\n                      ];\n\n                      return (\n                        <ChipGroup\n                          className=\"pf-u-mt-md pf-u-mr-md\"\n                          key={key}\n                          categoryName={filterLabels[key]}\n                          isClosable\n                          onClick={() => removeFilter(key)}\n                        >\n                          {typeof value === \"string\" ? (\n                            <Chip isReadOnly>{value}</Chip>\n                          ) : (\n                            value.map((entry) => (\n                              <Chip\n                                key={entry}\n                                onClick={() => removeFilterValue(key, entry)}\n                              >\n                                {entry}\n                              </Chip>\n                            ))\n                          )}\n                        </ChipGroup>\n                      );\n                    })}\n                  </div>\n                )}\n              </FlexItem>\n            </Flex>\n          </FormProvider>\n        }\n        actions={\n          [\n            {\n              title: t(\"auth\"),\n              onRowClick: (event) => setAuthEvent(event),\n            },\n            {\n              title: t(\"representation\"),\n              onRowClick: (event) => setRepresentationEvent(event),\n            },\n          ] as Action<AdminEventRepresentation>[]\n        }\n        columns={[\n          {\n            name: \"time\",\n            displayKey: \"time\",\n            cellRenderer: (row) =>\n              formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n          },\n          {\n            name: \"resourcePath\",\n            displayKey: \"resourcePath\",\n            cellRenderer: CellResourceLinkRenderer,\n          },\n          {\n            name: \"resourceType\",\n            displayKey: \"resourceType\",\n          },\n          {\n            name: \"operationType\",\n            displayKey: \"operationType\",\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"\",\n            displayKey: \"user\",\n            cellRenderer: (event) => event.authDetails?.userId || \"\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyEvents\")}\n            instructions={t(\"emptyEventsInstructions\")}\n          />\n        }\n        isSearching={Object.keys(activeFilters).length > 0}\n      />\n    </>\n  );\n};\n","import type EventRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/eventRepresentation\";\nimport type EventType from \"@keycloak/keycloak-admin-client/lib/defs/eventTypes\";\nimport type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Chip,\n  ChipGroup,\n  DatePicker,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon, WarningTriangleIcon } from \"@patternfly/react-icons\";\nimport { cellWidth, expandable } from \"@patternfly/react-table\";\nimport { pickBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport DropdownPanel from \"../components/dropdown-panel/DropdownPanel\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { toRealmSettings } from \"../realm-settings/routes/RealmSettings\";\nimport { toUser } from \"../user/routes/User\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../utils/useFormatDate\";\nimport { AdminEvents } from \"./AdminEvents\";\nimport { EventsTab, toEvents } from \"./routes/Events\";\n\nimport \"./events.css\";\n\ntype UserEventSearchForm = {\n  client: string;\n  dateFrom: string;\n  dateTo: string;\n  user: string;\n  type: EventType[];\n  ipAddress: string;\n};\n\nconst defaultValues: UserEventSearchForm = {\n  client: \"\",\n  dateFrom: \"\",\n  dateTo: \"\",\n  user: \"\",\n  type: [],\n  ipAddress: \"\",\n};\n\nconst StatusRow = (event: EventRepresentation) =>\n  !event.error ? (\n    <span>\n      <CheckCircleIcon color=\"green\" /> {event.type}\n    </span>\n  ) : (\n    <Tooltip content={event.error}>\n      <span>\n        <WarningTriangleIcon color=\"orange\" /> {event.type}\n      </span>\n    </Tooltip>\n  );\n\nconst DetailCell = (event: EventRepresentation) => (\n  <DescriptionList isHorizontal className=\"keycloak_eventsection_details\">\n    {event.details &&\n      Object.entries(event.details).map(([key, value]) => (\n        <DescriptionListGroup key={key}>\n          <DescriptionListTerm>{key}</DescriptionListTerm>\n          <DescriptionListDescription>{value}</DescriptionListDescription>\n        </DescriptionListGroup>\n      ))}\n    {event.error && (\n      <DescriptionListGroup key=\"error\">\n        <DescriptionListTerm>error</DescriptionListTerm>\n        <DescriptionListDescription>{event.error}</DescriptionListDescription>\n      </DescriptionListGroup>\n    )}\n  </DescriptionList>\n);\n\nconst UserDetailLink = (event: EventRepresentation) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      {event.userId && (\n        <Link\n          key={`link-${event.time}-${event.type}`}\n          to={toUser({\n            realm,\n            id: event.userId,\n            tab: \"settings\",\n          })}\n        >\n          {event.userId}\n        </Link>\n      )}\n      {!event.userId && t(\"noUserDetails\")}\n    </>\n  );\n};\n\nexport default function EventsSection() {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const formatDate = useFormatDate();\n  const [key, setKey] = useState(0);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n  const [selectOpen, setSelectOpen] = useState(false);\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [activeFilters, setActiveFilters] = useState<\n    Partial<UserEventSearchForm>\n  >({});\n\n  const filterLabels: Record<keyof UserEventSearchForm, string> = {\n    client: t(\"client\"),\n    dateFrom: t(\"dateFrom\"),\n    dateTo: t(\"dateTo\"),\n    user: t(\"userId\"),\n    type: t(\"eventType\"),\n    ipAddress: t(\"ipAddress\"),\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { isDirty },\n    control,\n    handleSubmit,\n  } = useForm<UserEventSearchForm>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm }),\n    (events) => setEvents(events),\n    [],\n  );\n\n  function loader(first?: number, max?: number) {\n    return adminClient.realms.findEvents({\n      // The admin client wants 'dateFrom' and 'dateTo' to be Date objects, however it cannot actually handle them so we need to cast to any.\n      ...(activeFilters as any),\n      realm,\n      first,\n      max,\n    });\n  }\n\n  const useTab = (tab: EventsTab) => useRoutableTab(toEvents({ realm, tab }));\n\n  const userEventsTab = useTab(\"user-events\");\n  const adminEventsTab = useTab(\"admin-events\");\n\n  function onSubmit() {\n    setSearchDropdownOpen(false);\n    commitFilters();\n  }\n\n  function resetSearch() {\n    reset();\n    commitFilters();\n  }\n\n  function removeFilter(key: keyof UserEventSearchForm) {\n    const formValues: UserEventSearchForm = { ...getValues() };\n    delete formValues[key];\n\n    reset({ ...defaultValues, ...formValues });\n    commitFilters();\n  }\n\n  function removeFilterValue(\n    key: keyof UserEventSearchForm,\n    valueToRemove: EventType,\n  ) {\n    const formValues = getValues();\n    const fieldValue = formValues[key];\n    const newFieldValue = Array.isArray(fieldValue)\n      ? fieldValue.filter((val) => val !== valueToRemove)\n      : fieldValue;\n\n    reset({ ...formValues, [key]: newFieldValue });\n    commitFilters();\n  }\n\n  function commitFilters() {\n    const newFilters: Partial<UserEventSearchForm> = pickBy(\n      getValues(),\n      (value) => value !== \"\" || (Array.isArray(value) && value.length > 0),\n    );\n\n    setActiveFilters(newFilters);\n    setKey(key + 1);\n  }\n\n  const userEventSearchFormDisplay = () => {\n    return (\n      <Flex\n        direction={{ default: \"column\" }}\n        spaceItems={{ default: \"spaceItemsNone\" }}\n      >\n        <FlexItem>\n          <DropdownPanel\n            buttonText={t(\"searchForUserEvent\")}\n            setSearchDropdownOpen={setSearchDropdownOpen}\n            searchDropdownOpen={searchDropdownOpen}\n            marginRight=\"2.5rem\"\n            width=\"15vw\"\n          >\n            <Form\n              data-testid=\"searchForm\"\n              className=\"keycloak__events_search__form\"\n              onSubmit={handleSubmit(onSubmit)}\n              isHorizontal\n            >\n              <FormGroup\n                label={t(\"userId\")}\n                fieldId=\"kc-userId\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-userId\"\n                  data-testid=\"userId-searchField\"\n                  {...register(\"user\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"eventType\")}\n                fieldId=\"kc-eventType\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"type\"\n                  control={control}\n                  render={({ field }) => (\n                    <Select\n                      className=\"keycloak__events_search__type_select\"\n                      name=\"eventType\"\n                      data-testid=\"event-type-searchField\"\n                      chipGroupProps={{\n                        numChips: 1,\n                        expandedText: t(\"hide\"),\n                        collapsedText: t(\"showRemaining\"),\n                      }}\n                      variant={SelectVariant.typeaheadMulti}\n                      typeAheadAriaLabel=\"Select\"\n                      onToggle={(isOpen) => setSelectOpen(isOpen)}\n                      selections={field.value}\n                      onSelect={(_, selectedValue) => {\n                        const option = selectedValue.toString() as EventType;\n                        const changedValue = field.value.includes(option)\n                          ? field.value.filter((item) => item !== option)\n                          : [...field.value, option];\n\n                        field.onChange(changedValue);\n                      }}\n                      onClear={(event) => {\n                        event.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      isOpen={selectOpen}\n                      aria-labelledby={\"eventType\"}\n                      chipGroupComponent={\n                        <ChipGroup>\n                          {field.value.map((chip) => (\n                            <Chip\n                              key={chip}\n                              onClick={(event) => {\n                                event.stopPropagation();\n                                field.onChange(\n                                  field.value.filter((val) => val !== chip),\n                                );\n                              }}\n                            >\n                              {t(`eventTypes.${chip}.name`)}\n                            </Chip>\n                          ))}\n                        </ChipGroup>\n                      }\n                    >\n                      {events?.enabledEventTypes?.map((option) => (\n                        <SelectOption key={option} value={option}>\n                          {t(`eventTypes.${option}.name`)}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"client\")}\n                fieldId=\"kc-client\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-client\"\n                  data-testid=\"client-searchField\"\n                  {...register(\"client\")}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateFrom\")}\n                fieldId=\"kc-dateFrom\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateFrom\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateFrom\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"dateTo\")}\n                fieldId=\"kc-dateTo\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <Controller\n                  name=\"dateTo\"\n                  control={control}\n                  render={({ field }) => (\n                    <DatePicker\n                      className=\"pf-u-w-100\"\n                      value={field.value}\n                      onChange={(_, value) => field.onChange(value)}\n                      inputProps={{ id: \"kc-dateTo\" }}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"ipAddress\")}\n                fieldId=\"kc-ipAddress\"\n                className=\"keycloak__events_search__form_label\"\n              >\n                <KeycloakTextInput\n                  id=\"kc-ipAddress\"\n                  data-testid=\"ipAddress-searchField\"\n                  {...register(\"ipAddress\")}\n                />\n              </FormGroup>\n              <ActionGroup>\n                <Button\n                  data-testid=\"search-events-btn\"\n                  variant=\"primary\"\n                  type=\"submit\"\n                  isDisabled={!isDirty}\n                >\n                  {t(\"searchUserEventsBtn\")}\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={resetSearch}\n                  isDisabled={!isDirty}\n                >\n                  {t(\"resetBtn\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </DropdownPanel>\n        </FlexItem>\n        <FlexItem>\n          {Object.entries(activeFilters).length > 0 && (\n            <div className=\"keycloak__searchChips pf-u-ml-md\">\n              {Object.entries(activeFilters).map((filter) => {\n                const [key, value] = filter as [\n                  keyof UserEventSearchForm,\n                  string | EventType[],\n                ];\n\n                return (\n                  <ChipGroup\n                    className=\"pf-u-mt-md pf-u-mr-md\"\n                    key={key}\n                    categoryName={filterLabels[key]}\n                    isClosable\n                    onClick={() => removeFilter(key)}\n                  >\n                    {typeof value === \"string\" ? (\n                      <Chip isReadOnly>{value}</Chip>\n                    ) : (\n                      value.map((entry) => (\n                        <Chip\n                          key={entry}\n                          onClick={() => removeFilterValue(key, entry)}\n                        >\n                          {t(`eventTypes.${entry}.name`)}\n                        </Chip>\n                      ))\n                    )}\n                  </ChipGroup>\n                );\n              })}\n            </div>\n          )}\n        </FlexItem>\n      </Flex>\n    );\n  };\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"titleEvents\"\n        subKey={\n          <Trans i18nKey=\"eventExplain\">\n            If you want to configure user events, Admin events or Event\n            listeners, please enter\n            <Link to={toRealmSettings({ realm, tab: \"events\" })}>\n              {t(\"eventConfig\")}\n            </Link>\n            page realm settings to configure.\n          </Trans>\n        }\n        helpUrl={helpUrls.eventsUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toEvents({ realm, tab: \"user-events\" })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"userEvents\")}</TabTitleText>}\n            {...userEventsTab}\n          >\n            <div className=\"keycloak__events_table\">\n              <KeycloakDataTable\n                key={key}\n                loader={loader}\n                detailColumns={[\n                  {\n                    name: \"details\",\n                    enabled: (event) => event.details !== undefined,\n                    cellRenderer: DetailCell,\n                  },\n                ]}\n                isPaginated\n                ariaLabelKey=\"titleEvents\"\n                toolbarItem={userEventSearchFormDisplay()}\n                columns={[\n                  {\n                    name: \"time\",\n                    displayKey: \"time\",\n                    cellFormatters: [expandable],\n                    cellRenderer: (row) =>\n                      formatDate(new Date(row.time!), FORMAT_DATE_AND_TIME),\n                  },\n                  {\n                    name: \"userId\",\n                    displayKey: \"user\",\n                    cellRenderer: UserDetailLink,\n                  },\n                  {\n                    name: \"type\",\n                    displayKey: \"eventType\",\n                    cellRenderer: StatusRow,\n                  },\n                  {\n                    name: \"ipAddress\",\n                    displayKey: \"ipAddress\",\n                    transforms: [cellWidth(10)],\n                  },\n                  {\n                    name: \"clientId\",\n                    displayKey: \"client\",\n                  },\n                ]}\n                emptyState={\n                  <ListEmptyState\n                    message={t(\"emptyEvents\")}\n                    instructions={t(\"emptyEventsInstructions\")}\n                  />\n                }\n                isSearching={Object.keys(activeFilters).length > 0}\n              />\n            </div>\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"adminEvents\")}</TabTitleText>}\n            data-testid=\"admin-events-tab\"\n            {...adminEventsTab}\n          >\n            <AdminEvents />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["MAX_TEXT_LENGTH","Truncate","text","children","definedText","needsTruncation","truncatedText","jsx","Tooltip","isLinkable","event","idRegex","createLink","realm","part","id","toClient","toGroups","toClientScope","toUser","toFlow","toRealmRole","ResourceLink","useRealm","Link","CellResourceLinkRenderer","adminEvent","defaultValues","DisplayDialog","titleKey","onClose","t","useTranslation","Modal","ModalVariant","AdminEvents","serverInfo","useServerInfo","formatDate","useFormatDate","resourceTypes","operationTypes","key","setKey","useState","searchDropdownOpen","setSearchDropdownOpen","selectResourceTypesOpen","setSelectResourceTypesOpen","selectOperationTypesOpen","setSelectOperationTypesOpen","activeFilters","setActiveFilters","authEvent","setAuthEvent","representationEvent","setRepresentationEvent","filterLabels","form","useForm","getValues","reset","isDirty","control","loader","first","max","adminClient","submitSearch","commitFilters","resetSearch","removeFilter","formValues","removeFilterValue","valueToRemove","fieldValue","newFieldValue","val","newFilters","pickBy","value","code","useMemo","prettyPrintJSON","jsxs","Fragment","Table","TableVariant","TableHeader","TableBody","CodeEditor","Language","KeycloakDataTable","FormProvider","Flex","FlexItem","DropdownPanel","Form","FormGroup","Controller","field","Select","SelectVariant","isOpen","_","selectedValue","option","changedValue","item","resource","ChipGroup","chip","Chip","SelectOption","operation","TextControl","DatePicker","ActionGroup","Button","filter","entry","row","FORMAT_DATE_AND_TIME","cellWidth","ListEmptyState","StatusRow","WarningTriangleIcon","CheckCircleIcon","DetailCell","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","UserDetailLink","EventsSection","selectOpen","setSelectOpen","events","setEvents","register","handleSubmit","useFetch","useTab","tab","useRoutableTab","toEvents","userEventsTab","adminEventsTab","onSubmit","userEventSearchFormDisplay","KeycloakTextInput","ViewHeader","Trans","toRealmSettings","helpUrls","PageSection","RoutableTabs","Tab","TabTitleText","expandable"],"mappings":"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"}