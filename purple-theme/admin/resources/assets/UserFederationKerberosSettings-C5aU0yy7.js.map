{"version":3,"file":"UserFederationKerberosSettings-C5aU0yy7.js","sources":["../../src/user-federation/kerberos/KerberosSettingsRequired.tsx","../../src/user-federation/UserFederationKerberosSettings.tsx"],"sourcesContent":["import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { WizardSectionHeader } from \"../../components/wizard-section-header/WizardSectionHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\n\nexport type KerberosSettingsRequiredProps = {\n  form: UseFormReturn;\n  showSectionHeading?: boolean;\n  showSectionDescription?: boolean;\n};\n\nexport const KerberosSettingsRequired = ({\n  form,\n  showSectionHeading = false,\n  showSectionDescription = false,\n}: KerberosSettingsRequiredProps) => {\n  const { t } = useTranslation();\n\n  const { realm } = useRealm();\n\n  const [isEditModeDropdownOpen, setIsEditModeDropdownOpen] = useState(false);\n\n  const allowPassAuth = useWatch({\n    control: form.control,\n    name: \"config.allowPasswordAuthentication\",\n  });\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm }),\n    (result) => form.setValue(\"parentId\", result!.id),\n    [],\n  );\n\n  return (\n    <>\n      {showSectionHeading && (\n        <WizardSectionHeader\n          title={t(\"requiredSettings\")}\n          description={t(\"kerberosRequiredSettingsDescription\")}\n          showDescription={showSectionDescription}\n        />\n      )}\n\n      {/* Required settings */}\n      <FormAccess role=\"manage-realm\" isHorizontal>\n        <FormGroup\n          label={t(\"uiDisplayName\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"uiDisplayNameHelp\")}\n              fieldLabelId=\"uiDisplayName\"\n            />\n          }\n          fieldId=\"kc-ui-display-name\"\n          isRequired\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          helperTextInvalid={(form.formState.errors.name as any)?.message}\n        >\n          {/* These hidden fields are required so data object written back matches data retrieved */}\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerId\"\n            defaultValue=\"kerberos\"\n            {...form.register(\"providerId\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-providerType\"\n            defaultValue=\"org.keycloak.storage.UserStorageProvider\"\n            {...form.register(\"providerType\")}\n          />\n          <KeycloakTextInput\n            hidden\n            id=\"kc-ui-parentId\"\n            defaultValue={realm}\n            {...form.register(\"parentId\")}\n          />\n\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-ui-name\"\n            data-testid=\"kerberos-name\"\n            validated={form.formState.errors.name ? \"error\" : \"default\"}\n            aria-label={t(\"uiDisplayName\")}\n            {...form.register(\"name\", {\n              required: {\n                value: true,\n                message: t(\"validateName\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"kerberosRealm\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"kerberosRealmHelp\")}\n              fieldLabelId=\"kc-kerberos-realm\"\n            />\n          }\n          fieldId=\"kc-kerberos-realm\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.kerberosRealm?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.kerberosRealm?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-kerberos-realm\"\n            data-testid=\"kerberos-realm\"\n            validated={\n              (form.formState.errors.config as any)?.kerberosRealm?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.kerberosRealm.0\", {\n              required: {\n                value: true,\n                message: t(\"validateRealm\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"serverPrincipal\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"serverPrincipalHelp\")}\n              fieldLabelId=\"serverPrincipal\"\n            />\n          }\n          fieldId=\"kc-server-principal\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.serverPrincipal?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.serverPrincipal?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-server-principal\"\n            data-testid=\"kerberos-principal\"\n            validated={\n              (form.formState.errors.config as any)?.serverPrincipal?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.serverPrincipal.0\", {\n              required: {\n                value: true,\n                message: t(\"validateServerPrincipal\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"keyTab\")}\n          labelIcon={\n            <HelpItem helpText={t(\"keyTabHelp\")} fieldLabelId=\"keyTab\" />\n          }\n          fieldId=\"kc-key-tab\"\n          isRequired\n          validated={\n            (form.formState.errors.config as any)?.keyTab?.[0]\n              ? \"error\"\n              : \"default\"\n          }\n          helperTextInvalid={\n            (form.formState.errors.config as any)?.keyTab?.[0].message\n          }\n        >\n          <KeycloakTextInput\n            isRequired\n            id=\"kc-key-tab\"\n            data-testid=\"kerberos-keytab\"\n            validated={\n              (form.formState.errors.config as any)?.keyTab?.[0]\n                ? \"error\"\n                : \"default\"\n            }\n            {...form.register(\"config.keyTab.0\", {\n              required: {\n                value: true,\n                message: t(\"validateKeyTab\"),\n              },\n            })}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"debug\")}\n          labelIcon={\n            <HelpItem helpText={t(\"debugHelp\")} fieldLabelId=\"debug\" />\n          }\n          fieldId=\"kc-debug\"\n          hasNoPaddingTop\n        >\n          {\" \"}\n          <Controller\n            name=\"config.debug\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-debug\"}\n                data-testid=\"debug\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"debug\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        <FormGroup\n          label={t(\"allowPasswordAuthentication\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"allowPasswordAuthenticationHelp\")}\n              fieldLabelId=\"allowPasswordAuthentication\"\n            />\n          }\n          fieldId=\"kc-allow-password-authentication\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.allowPasswordAuthentication\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-allow-password-authentication\"}\n                data-testid=\"allow-password-authentication\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"allowPasswordAuthentication\")}\n              />\n            )}\n          />\n        </FormGroup>\n\n        {isEqual(allowPassAuth, [\"true\"]) ? (\n          <FormGroup\n            label={t(\"editMode\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"editModeKerberosHelp\")}\n                fieldLabelId=\"editMode\"\n              />\n            }\n            isRequired\n            fieldId=\"kc-edit-mode\"\n          >\n            {\" \"}\n            <Controller\n              name=\"config.editMode[0]\"\n              defaultValue=\"READ_ONLY\"\n              control={form.control}\n              rules={{ required: true }}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-edit-mode\"\n                  required\n                  onToggle={() =>\n                    setIsEditModeDropdownOpen(!isEditModeDropdownOpen)\n                  }\n                  isOpen={isEditModeDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value as string);\n                    setIsEditModeDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                >\n                  <SelectOption key={0} value=\"READ_ONLY\" isPlaceholder />\n                  <SelectOption key={1} value=\"UNSYNCED\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n        ) : null}\n\n        <FormGroup\n          label={t(\"updateFirstLogin\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"updateFirstLoginHelp\")}\n              fieldLabelId=\"updateFirstLogin\"\n            />\n          }\n          fieldId=\"kc-update-first-login\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"config.updateProfileFirstLogin\"\n            defaultValue={[\"false\"]}\n            control={form.control}\n            render={({ field }) => (\n              <Switch\n                id={\"kc-update-first-login\"}\n                data-testid=\"update-first-login\"\n                onChange={(value) => field.onChange([`${value}`])}\n                isChecked={field.value?.[0] === \"true\"}\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                aria-label={t(\"updateFirstLogin\")}\n              />\n            )}\n          />\n        </FormGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { KerberosSettingsRequired } from \"./kerberos/KerberosSettingsRequired\";\nimport { toUserFederation } from \"./routes/UserFederation\";\nimport { Header } from \"./shared/Header\";\nimport { SettingsCache } from \"./shared/SettingsCache\";\n\nexport default function UserFederationKerberosSettings() {\n  const { t } = useTranslation();\n  const form = useForm<ComponentRepresentation>({ mode: \"onChange\" });\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const { id } = useParams<{ id?: string }>();\n\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    async () => {\n      if (id) {\n        return adminClient.components.findOne({ id });\n      }\n    },\n    (fetchedComponent) => {\n      if (fetchedComponent) {\n        setupForm(fetchedComponent);\n      } else if (id) {\n        throw new Error(t(\"notFound\"));\n      }\n    },\n    [],\n  );\n\n  const setupForm = (component: ComponentRepresentation) => {\n    form.reset({ ...component });\n  };\n\n  const save = async (component: ComponentRepresentation) => {\n    try {\n      if (!id) {\n        await adminClient.components.create(component);\n        navigate(`/${realm}/user-federation`);\n      } else {\n        await adminClient.components.update({ id }, component);\n      }\n      setupForm(component as ComponentRepresentation);\n      addAlert(\n        t(!id ? \"createUserProviderSuccess\" : \"userProviderSaveSuccess\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\n        `${!id ? \"createUserProviderError\" : \"userProviderSaveError\"}`,\n        error,\n      );\n    }\n  };\n\n  return (\n    <>\n      <FormProvider {...form}>\n        <Header provider=\"Kerberos\" save={() => form.handleSubmit(save)()} />\n      </FormProvider>\n      <PageSection variant=\"light\">\n        <KerberosSettingsRequired form={form} showSectionHeading />\n      </PageSection>\n      <PageSection variant=\"light\" isFilled>\n        <SettingsCache form={form} showSectionHeading />\n        <Form onSubmit={form.handleSubmit(save)}>\n          <ActionGroup>\n            <Button\n              isDisabled={!form.formState.isDirty}\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"kerberos-save\"\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              onClick={() => navigate(toUserFederation({ realm }))}\n              data-testid=\"kerberos-cancel\"\n            >\n              {t(\"cancel\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["KerberosSettingsRequired","form","showSectionHeading","showSectionDescription","t","useTranslation","realm","useRealm","isEditModeDropdownOpen","setIsEditModeDropdownOpen","useState","allowPassAuth","useWatch","useFetch","adminClient","result","jsxs","Fragment","jsx","WizardSectionHeader","FormAccess","FormGroup","HelpItem","KeycloakTextInput","Controller","field","Switch","value","isEqual","Select","_","SelectVariant","SelectOption","UserFederationKerberosSettings","useForm","navigate","useNavigate","id","useParams","addAlert","addError","useAlerts","fetchedComponent","setupForm","component","save","AlertVariant","error","FormProvider","Header","PageSection","SettingsCache","Form","ActionGroup","Button","toUserFederation"],"mappings":"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"}