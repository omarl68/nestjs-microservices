{"version":3,"file":"PageHandler-TK8xnd8P.js","sources":["../../src/page/PageHandler.tsx"],"sourcesContent":["import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { ActionGroup, Button, Form, PageSection } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { DynamicComponents } from \"../components/dynamic/DynamicComponents\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { PAGE_PROVIDER, TAB_PROVIDER } from \"./PageList\";\nimport { toPage } from \"./routes\";\n\ntype PageHandlerProps = {\n  id?: string;\n  providerType: typeof TAB_PROVIDER | typeof PAGE_PROVIDER;\n  page: ComponentTypeRepresentation;\n};\n\nexport const PageHandler = ({\n  id: idAttribute,\n  providerType,\n  page: { id: providerId, ...page },\n}: PageHandlerProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ComponentTypeRepresentation>();\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const { addAlert, addError } = useAlerts();\n  const [id, setId] = useState(idAttribute);\n\n  useFetch(\n    async () =>\n      await Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        id ? adminClient.components.findOne({ id }) : Promise.resolve(),\n        providerType === TAB_PROVIDER\n          ? adminClient.components.find({ type: TAB_PROVIDER })\n          : Promise.resolve(),\n      ]),\n    ([realm, data, tabs]) => {\n      setRealm(realm);\n      const tab = (tabs || []).find((t) => t.providerId === providerId);\n      form.reset(data || tab || {});\n      if (tab) setId(tab.id);\n    },\n    [],\n  );\n\n  const onSubmit = async (component: ComponentRepresentation) => {\n    if (component.config)\n      Object.entries(component.config).forEach(\n        ([key, value]) =>\n          (component.config![key] = Array.isArray(value) ? value : [value]),\n      );\n    try {\n      const updatedComponent = {\n        ...component,\n        providerId,\n        providerType,\n        parentId: realm?.id,\n      };\n      if (id) {\n        await adminClient.components.update({ id }, updatedComponent);\n      } else {\n        await adminClient.components.create(updatedComponent);\n      }\n      addAlert(\"itemSaveSuccessful\");\n    } catch (error) {\n      addError(\"itemSaveError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <Form\n        isHorizontal\n        onSubmit={form.handleSubmit(onSubmit)}\n        className=\"keycloak__form\"\n      >\n        <FormProvider {...form}>\n          <DynamicComponents properties={page.properties} />\n        </FormProvider>\n\n        <ActionGroup>\n          <Button data-testid=\"save\" type=\"submit\">\n            {t(\"save\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            component={(props) => (\n              <Link\n                {...props}\n                to={toPage({ realm: realmName, providerId: providerId! })}\n              />\n            )}\n          >\n            {t(\"cancel\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </PageSection>\n  );\n};\n"],"names":["PageHandler","idAttribute","providerType","providerId","page","t","useTranslation","form","useForm","realmName","useRealm","realm","setRealm","useState","addAlert","addError","useAlerts","id","setId","useFetch","adminClient","TAB_PROVIDER","data","tabs","tab","onSubmit","component","key","value","updatedComponent","error","jsx","PageSection","jsxs","Form","FormProvider","DynamicComponents","ActionGroup","Button","props","Link","toPage"],"mappings":"yVAsBO,MAAMA,EAAc,CAAC,CAC1B,GAAIC,EACJ,aAAAC,EACA,KAAM,CAAE,GAAIC,EAAY,GAAGC,CAAK,CAClC,IAAwB,CAChB,KAAA,CAAE,EAAAC,GAAMC,IACRC,EAAOC,IACP,CAAE,MAAOC,CAAU,EAAIC,EAAS,EAChC,CAACC,EAAOC,CAAQ,EAAIC,EAA8B,EAClD,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,EAAU,EACnC,CAACC,EAAIC,CAAK,EAAIL,EAASZ,CAAW,EAExCkB,EACE,SACE,MAAM,QAAQ,IAAI,CAChBC,EAAY,OAAO,QAAQ,CAAE,MAAOX,EAAW,EAC/CQ,EAAKG,EAAY,WAAW,QAAQ,CAAE,GAAAH,EAAI,EAAI,QAAQ,QAAQ,EAC9Df,IAAiBmB,EACbD,EAAY,WAAW,KAAK,CAAE,KAAMC,CAAc,CAAA,EAClD,QAAQ,QAAQ,CAAA,CACrB,EACH,CAAC,CAACV,EAAOW,EAAMC,CAAI,IAAM,CACvBX,EAASD,CAAK,EACR,MAAAa,GAAOD,GAAQ,IAAI,KAAMlB,GAAMA,EAAE,aAAeF,CAAU,EAChEI,EAAK,MAAMe,GAAQE,GAAO,CAAE,CAAA,EACxBA,GAAKN,EAAMM,EAAI,EAAE,CACvB,EACA,CAAC,CAAA,EAGG,MAAAC,EAAW,MAAOC,GAAuC,CACzDA,EAAU,QACL,OAAA,QAAQA,EAAU,MAAM,EAAE,QAC/B,CAAC,CAACC,EAAKC,CAAK,IACTF,EAAU,OAAQC,CAAG,EAAI,MAAM,QAAQC,CAAK,EAAIA,EAAQ,CAACA,CAAK,CAAA,EAEjE,GAAA,CACF,MAAMC,EAAmB,CACvB,GAAGH,EACH,WAAAvB,EACA,aAAAD,EACA,SAAUS,GAAO,EAAA,EAEfM,EACF,MAAMG,EAAY,WAAW,OAAO,CAAE,GAAAH,CAAA,EAAMY,CAAgB,EAEtD,MAAAT,EAAY,WAAW,OAAOS,CAAgB,EAEtDf,EAAS,oBAAoB,QACtBgB,EAAO,CACdf,EAAS,gBAAiBe,CAAK,CACjC,CAAA,EAIA,OAAAC,EAACC,EAAY,CAAA,QAAQ,QACnB,SAAAC,EAACC,EAAA,CACC,aAAY,GACZ,SAAU3B,EAAK,aAAakB,CAAQ,EACpC,UAAU,iBAEV,SAAA,CAACM,EAAAI,EAAA,CAAc,GAAG5B,EAChB,SAAAwB,EAACK,GAAkB,WAAYhC,EAAK,WAAY,CAClD,CAAA,IAECiC,EACC,CAAA,SAAA,CAAAN,EAACO,GAAO,cAAY,OAAO,KAAK,SAC7B,SAAAjC,EAAE,MAAM,EACX,EACA0B,EAACO,EAAA,CACC,QAAQ,OACR,UAAYC,GACVR,EAACS,EAAA,CACE,GAAGD,EACJ,GAAIE,EAAO,CAAE,MAAOhC,EAAW,WAAAN,EAAyB,CAAA,CAC1D,EAGD,WAAE,QAAQ,CAAA,CACb,CAAA,EACF,CAAA,CAAA,CAEJ,CAAA,CAAA,CAEJ"}